msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"\t\t\t\tpublic String getTitle() {\n"
"\t\t\t\t\treturn title;\n"
"\t\t\t\t}"
msgstr ""

msgid ""
"\t\t\t\tpublic void setTitle(String title) {\n"
"\t\t\t\t\tthis.title = title;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t''')\n"
"\t\t}\n"
"```"
msgstr ""

msgid ""
"\t\t\tpackage my.company.blog {\n"
"\t\t\t\tentity Blog {\n"
"\t\t\t\t\ttitle: String\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t'''.assertCompilesTo('''\n"
"\t\t\tpackage my.company.blog;"
msgstr ""

msgid ""
"\t\t\tpublic class Blog {\n"
"\t\t\t\tprivate String title;"
msgstr ""

msgid ""
"\t\tacceptor.accept(createNewLineContentCodeMining(5, \" inline annotation \"));\n"
"\t}"
msgstr ""

msgid ""
"\t\tacceptor.accept(createNewLineHeaderCodeMining(1, document, \"header annotatio"
"n\"));"
msgstr ""

msgid ""
"\t\t}\n"
"\t},\n"
"\t\"patterns\": [\n"
"\t\t{\n"
"\t\t\t\"include\": \"#general\"\n"
"\t\t}\n"
"\t],\n"
"\t\"uuid\": \"8383e49a-fa0d-4bb5-827b-10e8abb294ca\"\n"
"}\n"
"```\n"
" 1. Open a `*.dmodel` file with the Generic Editor and explore the supported l"
"anguage features like syntax highlighting, content assist, validation, display"
"ing code lenses, quickfixes, formatting, ... :\n"
"![Domainmodel Language Features](images/LSP_5_DomainmodelLanguageFeatures.png)"
msgstr ""
"\t\t}\n"
"\t},\n"
"\t\"patterns\": [\n"
"\t\t{\n"
"\t\t\t\"include\": \"#general\"\n"
"\t\t}\n"
"\t],\n"
"\t\"uuid\": \"8383e49a-fa0d-4bb5-827b-10e8abb294ca\"\n"
"}\n"
"```\n"
" 1. Genericエディターで `*.dmodel` ファイルを開き、シンタックスハイライト、コンテントアシスト、検証、コードレンス、クイックフィックス"
"、フォーマット ... のような言語機能を調べます :\n"
"![ドメインモデル言語機能](../../documentation/images/LSP_5_DomainmodelLanguageFeatures.pn"
"g)"

msgid ""
"\t/**\n"
"\t * Returns a scope for the given context. The scope provides access to the co"
"mpatible\n"
"\t * visible EObjects for a given reference.\n"
"\t *\n"
"\t * @param context the element from which an element shall be referenced. It d"
"oesn't need to be the element\n"
"\t * \t\t  containing the reference, it is just used to find the most inner scope"
" for given {@link EReference}.\n"
"\t * @param reference the reference for which to get the scope.\n"
"\t * @return {@link IScope} representing the innermost {@link IScope} for the\n"
"\t *         passed context and reference. Note for implementors: The result ma"
"y not be <code>null</code>.\n"
"\t *         Return <code>IScope.NULLSCOPE</code> instead.\n"
"\t */\n"
"    IScope getScope(EObject context, EReference reference);"
msgstr ""

msgid ""
"\t@Override\n"
"\tprotected String getHoverInfoAsHtml(EObject o) {\n"
"\t\t...\n"
"\t}"
msgstr ""

msgid ""
"\t@Test def test() {\n"
"\t\t'''\n"
"\t\t\tdatatype String"
msgstr ""

msgid ""
"\t```xtend\n"
"\t@Inject extension CompilationTestHelper"
msgstr ""

msgid ""
"\tpublic Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider() {\n"
"\t\treturn MyDslHoverProvider.class;\n"
"\t}"
msgstr ""

msgid ""
"\tpublic Class<? extends IOccurrenceComputer> bindIOccurrenceComputer() {\n"
"\t\treturn MyDslOccurrenceComputer.class;\n"
"\t}"
msgstr ""

msgid ""
"            serializer = {\n"
"                generateStub = false\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"            }\n"
"        }\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"          Operation : {\n"
"            members += feature.toMethod(feature.name, feature.type) [\n"
"              documentation = feature.documentation\n"
"              for (p : feature.params) {\n"
"                parameters += p.toParameter(p.name, p.parameterType)\n"
"              }\n"
"              body = feature.body\n"
"            ]\n"
"          }\n"
"        }\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"          Property : {\n"
"            members += feature.toField(feature.name, feature.type)\n"
"            members += feature.toGetter(feature.name, feature.type)\n"
"            members += feature.toSetter(feature.name, feature.type)\n"
"          }"
msgstr ""

msgid ""
"        <plugin>\n"
"          <groupId>org.eclipse.xtend</groupId>\n"
"          <artifactId>xtend-maven-plugin</artifactId>\n"
"          <version>${xtext.version}</version>\n"
"          <executions>\n"
"            <execution>\n"
"              <goals>\n"
"                <goal>compile</goal>\n"
"                <goal>xtend-install-debug-info</goal>\n"
"                <goal>testCompile</goal>\n"
"                <goal>xtend-test-install-debug-info</goal>\n"
"              </goals>\n"
"            </execution>\n"
"          </executions>\n"
"          <configuration>\n"
"            <outputDirectory>xtend-gen</outputDirectory>\n"
"          </configuration>\n"
"        </plugin>\n"
"      </plugins>\n"
"    </pluginManagement>\n"
"    ```"
msgstr ""
"        <plugin>\n"
"          <groupId>org.eclipse.xtend</groupId>\n"
"          <artifactId>xtend-maven-plugin</artifactId>\n"
"          <version>${xtext.version}</version>\n"
"          <executions>\n"
"            <execution>\n"
"              <goals>\n"
"                <goal>compile</goal>\n"
"                <goal>xtend-install-debug-info</goal>\n"
"                <goal>testCompile</goal>\n"
"                <goal>xtend-test-install-debug-info</goal>\n"
"              </goals>\n"
"            </execution>\n"
"          </executions>\n"
"          <configuration>\n"
"            <outputDirectory>xtend-gen</outputDirectory>\n"
"          </configuration>\n"
"        </plugin>\n"
"      </plugins>\n"
"    </pluginManagement>\n"
"    ```"

msgid ""
"        @Inject\n"
"        ParseHelper<Domainmodel> parseHelper"
msgstr ""

msgid ""
"        @Test \n"
"        def void loadModel() {\n"
"            val result = parseHelper.parse('''\n"
"                Hello Xtext!\n"
"            ''')\n"
"            Assert.assertNotNull(result)\n"
"            val errors = result.eResource.errors\n"
"            Assert.assertTrue('''Unexpected errors: «errors.join(\", \")»''', er"
"rors.isEmpty)\n"
"        }"
msgstr ""

msgid ""
"        @Test \n"
"        def void parseDomainmodel() {\n"
"            val model = parseHelper.parse(\n"
"                \"entity MyEntity {\n"
"                    parent: MyEntity\n"
"                }\")\n"
"            val entity = model.elements.head as Entity\n"
"            assertSame(entity, entity.features.head.type)\n"
"        }\n"
"    ```\n"
"2. In addition, the utility class [ValidationTestHelper]({{site.src.xtext_core"
"}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/validation/Validati"
"onTestHelper.java) allows to test the custom validation rules written for the "
"language. Both valid and invalid models can be tested."
msgstr ""

msgid ""
"        op getFriendsSortedByFullName() : List<Person> {\n"
"            return friends.sortBy[ f | f.fullName ]\n"
"        }\n"
"    }"
msgstr ""

msgid ""
"        override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IG"
"eneratorContext context) {\n"
"            for (e : resource.allContents.toIterable.filter(Entity)) {"
msgstr ""

msgid ""
"        public class «e.name» {\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"        public class «e.name» «IF e.superType !== null\n"
"                »extends «e.superType.fullyQualifiedName» «ENDIF»{\n"
"            «FOR f : e.features»\n"
"                «f.compile»\n"
"            «ENDFOR»\n"
"        }\n"
"    '''"
msgstr ""

msgid ""
"        public class «e.name» «IF e.superType !== null\n"
"                »extends «e.superType.fullyQualifiedName» «ENDIF»{\n"
"            «FOR f : e.features»\n"
"                «f.compile»\n"
"            «ENDFOR»\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"        public class «e.name» «IF e.superType !== null\n"
"                »extends «e.superType.fullyQualifiedName» «ENDIF»{\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.na"
"me») {\n"
"            this.«f.name» = «f.name»;\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.na"
"me») {\n"
"            this.«f.name» = «f.name»;\n"
"        }\n"
"    '''\n"
"}\n"
"```"
msgstr ""

msgid ""
"        public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {\n"
"            return «f.name»;\n"
"        }"
msgstr ""

msgid ""
"    *Note*: When using JUnit 5 the [InjectionExtension]({{site.src.xtext_core}"
"}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/Injection"
"Extension.java) is used instead of the XtextRunner. The Xtext code generator g"
"enerates the example slightly different, depending on which option you have ch"
"osen in the *New Xtext Project* wizard."
msgstr ""

msgid ""
"    *Operation*s also have a signature as expected. Note that also for formal "
"parameters we can reuse a rule from the super grammar."
msgstr ""

msgid ""
"    *Operations* are mapped to a corresponding Java method. The documentation "
"is translated and the parameters are added within the initializer. The line `b"
"ody = feature.body` registers the *Operation*'s expression as the body of the "
"newly created Java method. This defines the scope of the expression. The frame"
"work deduces the visible fields and parameters as well as the expected return "
"type from that information."
msgstr ""

msgid "    ..."
msgstr ""

msgid ""
"    @Check\n"
"    public void checkNameStartsWithCapital(Entity entity) {\n"
"        if (!Character.isUpperCase(entity.getName().charAt(0))) {\n"
"            warning(\"Name should start with a capital\", \n"
"                DomainmodelPackage.Literals.TYPE__NAME);\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    @Inject\n"
"    private IScopeProvider scopeProvider;"
msgstr ""

msgid "    @Inject ValidationTestHelper validationTestHelper"
msgstr ""

msgid "    @Inject extension IQualifiedNameProvider"
msgstr ""

msgid "    @Inject extension ValidationTestHelper"
msgstr ""

msgid ""
"    @Override\n"
"    public void configure(Binder binder) {\n"
"        binder\n"
"            .bind(IScopeProvider.class)\n"
"            .to(MyConcreteScopeProvider.class);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    @Test\n"
"    def testNameStartsWithCapitalWarning() {\n"
"        \"entity myEntity {\n"
"            parent: myEntity\n"
"        }\".parse.assertWarning(\n"
"            DomainmodelPackage.Literals.ENTITY,\n"
"            DomainmodelValidator.INVALID_NAME,\n"
"            \"Name should start with a capital\"\n"
"        )\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    @Test\n"
"    def testNameStartsWithCapitalWarning() {\n"
"        val entity = parseHelper.parse(\n"
"            \"entity myEntity {\n"
"                parent: myEntity\n"
"            }\")\n"
"        validationTestHelper.assertWarning(entity,\n"
"            DomainmodelPackage.Literals.ENTITY,\n"
"            DomainmodelValidator.INVALID_NAME,\n"
"            \"Name should start with a capital\"\n"
"        )\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    @Test\n"
"    def testValidModel() {\n"
"        \"entity MyEntity {\n"
"        parent: MyEntity\n"
"        }\".parse.assertNoIssues\n"
"    }"
msgstr ""

msgid ""
"    @Test\n"
"    def testValidModel() {\n"
"        val entity = parseHelper.parse(\n"
"            \"entity MyEntity {\n"
"                parent: MyEntity\n"
"            }\")\n"
"        validationTestHelper.assertNoIssues(entity)\n"
"    }"
msgstr ""

msgid ""
"    A *Domainmodel* contains an optional import section and an arbitrary numbe"
"r of *AbstractElements*. The concept of *XImportSection* is part of *org.eclip"
"se.xtext.xbase.Xbase* and comes with tool support and syntax like you know it "
"from Java.\n"
"1."
msgstr ""

msgid ""
"    A *PackageDeclaration* is used to declare a name space which can again con"
"tain any number of *AbstractElement*s. Xtext has built-in support for qualifie"
"d names and scoping based on the hierarchy of the produced model. The default "
"implementation will add the package names as the prefix to contained entities "
"and nested packages. The qualified name of an *Entity* 'Baz' which is containe"
"d in a *PackageDeclaration* 'foo.bar' will be 'foo.bar.Baz'. In case you do no"
"t like the default behavior you will need to use a different implementation of"
" [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/naming/IQualifiedNameProvider.java).\n"
"1."
msgstr ""

msgid ""
"    A *Property* has a name and makes again use of the inherited rule *JvmType"
"Reference*.\n"
"1."
msgstr ""

msgid ""
"    AbstractElement:\n"
"        PackageDeclaration | Type | Import;"
msgstr ""
"    AbstractElement:\n"
"        PackageDeclaration | Type | Import;"

msgid ""
"    AbstractElement:\n"
"        PackageDeclaration | Type;\n"
"    ```"
msgstr ""
"    AbstractElement:\n"
"        PackageDeclaration | Type;\n"
"    ```"

msgid ""
"    As you can see, there is nothing fancy about this one. Last but not least,"
" we have to make sure that the function is actually used."
msgstr ""

msgid ""
"    Every [JvmDeclaredType]({{site.src.xtext_extras}}/org.eclipse.xtext.common"
".types/emf-gen/org/eclipse/xtext/common/types/JvmDeclaredType.java) you create"
" in the model inference needs to be passed to the *acceptor* in order to get r"
"ecognized. The extension method *toClass* comes from the [JvmTypesBuilder]({{s"
"ite.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvm"
"model/JvmTypesBuilder.java) class. This class provides a lot of convenient ext"
"ension methods, which help making the code extremely readable and concise. It "
"is important to understand that the creation and assignment of a qualified nam"
"e is done in an early phase where the compiler collects all global symbols. Yo"
"u cannot resolve type references at this point.\n"
"1.  The second argument to *accept* is a lambda block that contains further in"
"itialization of the created Java type. Only in this block you are allowed to d"
"o type reference resolution. This is also the place where you add members and "
"put the XExpressions into context. Let's see what we do in the initialization "
"block in detail:\n"
"1.  ```xtend\n"
"    documentation = element.documentation\n"
"    ```"
msgstr ""

msgid ""
"    Feature:\n"
"        (many?='many')? name=ID ':' type=[Type|QualifiedName];\n"
"    ```"
msgstr ""
"    Feature:\n"
"        (many?='many')? name=ID ':' type=[Type|QualifiedName];\n"
"    ```"

msgid ""
"    For each *Property* we create a field as well as a corresponding getter an"
"d setter.\n"
"1.  ```xtend\n"
"    Operation : {\n"
"        members += feature.toMethod(feature.name, feature.type) [\n"
"            documentation = feature.documentation\n"
"            for (p : feature.params) {\n"
"                parameters += p.toParameter(p.name, p.parameterType)\n"
"            }\n"
"            body = feature.body\n"
"        ]\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    Here we assign some JavaDoc to the newly created element. The assignment i"
"s translated to an invocation of the method *[JvmTypesBuilder]({{site.src.xtex"
"t_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmTyp"
"esBuilder.java).setDocumentation([JvmIdentifiableElement]({{site.src.xtext_ext"
"ras}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/Jv"
"mIdentifiableElement.java), String)*, and `element.documentation` is in fact c"
"alling the extension method *[JvmTypesBuilder]({{site.src.xtext_extras}}/org.e"
"clipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmTypesBuilder.java)."
"getDocumentation([EObject]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/"
"org/eclipse/emf/ecore/EObject.java))*. Such extension methods are explained in"
" detail in the [Xtend documentation](https://www.eclipse.org/xtend/documentati"
"on/202_xtend_classes_members.html#extension-methods).\n"
"1.  ```xtend\n"
"    if (element.superType !== null)\n"
"        superTypes += entity.superType.cloneWithProxies\n"
"    ```"
msgstr ""

msgid ""
"    It says that a *Domainmodel* contains an arbitrary number (`*`) of *Type*s"
" which are added (`+=`) to a feature called `elements`.\n"
"1.  The rule *Type* delegates to either the rule *DataType* or (`|`) the rule "
"*Entity*."
msgstr ""
"    これは、*Domainmodel* が任意の数の*Type*を持ち、それらを `elements`と呼ばれる特性に追加 (`+=`) することを表し"
"ています。\n"
"1.  *Type* ルールは*DataType* ルール もしくは (`|`) *Entity* ルールに委任します。"

msgid ""
"    Let's handle the *superType* of an *Entity* gracefully, too, by using anot"
"her `IF` expression:"
msgstr ""

msgid ""
"    Next up there is the `extends` clause which is parenthesized and optional "
"(`?`). Since the feature named `superType` is a cross reference (note the squa"
"re brackets), the parser rule *Entity* is not called here, but only a single i"
"dentifier (the *ID*-rule) is parsed. The actual *Entity* to assign to the `sup"
"erType` reference is resolved during the linking phase. Finally between curly "
"braces there can be any number of *Features*, which invokes the next rule.\n"
"1.  Last but not least, the rule *Feature* is defined as follows:"
msgstr ""
"    次に かっこで囲まれたオプション (`?`) の`extends` 句があります。 特性 `superType` は クロスリファレンス ( 角かっ"
"こに注意 )なので、 パーサールール *Entity* はここでは呼び出されず、一つの識別子だけが (*ID* ルール) がパースされます。`superTy"
"pe` で参照する実際の *Entity* 割り付けは、リンクフェーズにて解決されます。 最後に、 中かっこの中には、次のルールで呼び出される任意の数の *"
"Feature* を含めることができます。\n"
"1.  最後に、 *Feature* ルール定義は次のとおり:"

msgid ""
"    Please note that the bar (`|`) is not an alternative in the context of a c"
"ross-reference, but used to specify the syntax of the parsed string."
msgstr "    (`|`)はクロスリファレンスの対象ではなく、パースされた文字列の構文を指定するために用いられることに注意してください。"

msgid ""
"    QualifiedName:\n"
"        ID ('.' ID)*;\n"
"    ```"
msgstr ""
"    QualifiedName:\n"
"        ID ('.' ID)*;\n"
"    ```"

msgid ""
"    QualifiedNameWithWildcard:\n"
"        QualifiedName '.*'?;\n"
"    ```"
msgstr ""
"    QualifiedNameWithWildcard:\n"
"        QualifiedName '.*'?;\n"
"    ```"

msgid ""
"    Set the *superType* on the inferred element. Note that we have to clone th"
"e type reference from the *element.superType*. If we did not do that, the type"
" reference would be automatically removed from the *element*, as *superType* i"
"s an EMF containment reference.\n"
"1.  ```xtend\n"
"    for (feature : element.features) {\n"
"        switch feature {\n"
"            Property : {\n"
"                // ...\n"
"            }\n"
"            Operation : {\n"
"                // ...\n"
"            }\n"
"        }\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    Similar to the rule `QualifiedName`, `QualifiedNameWithWildcard` returns a"
" plain string.\n"
"1.  The last step is to allow fully qualified names in cross-references, too. "
"Otherwise one could not refer to an entity without adding an import statement."
msgstr ""
"    `QualifiedName`と同様に、`QualifiedNameWithWildcard`もまたもプレーン文字列を返します。\n"
"1.  最後のステップでは、完全修飾名をクロスリファレンスでも使用できるようにします。これがないと、importを常に記載しないとエンティティの参照ができな"
"くなります。"

msgid ""
"    The `QualifiedName` is a little special. It does not contain any assignmen"
"ts. Therefore it serves as a data type rule that returns a String. Hence the f"
"eature `name` of a *Package* is still of type [String]({{site.javadoc.java}}/j"
"ava/lang/String.html).\n"
"1.  Imports can be defined in a very convenient way with Xtext. If you use the"
" name `importedNamespace` in a parser rule, the framework will treat the value"
" as an import. It even supports wildcards and handles them as expected:"
msgstr ""
"    `QualifiedName` は少し特殊で、割り当てが含まれません。したがって、これは文字列を返すデータタイプルールを提供します。よって、 *Pa"
"ckage*の`name`特性は[String]({{site.javadoc.java}}/java/lang/String.html)型のままです。\n"
"1.  ImportsはXtextによってとても簡単に定義することができます。パーサールールで`importedNamespace`という名前を用いると、フ"
"レームワークはimportとして処理します。これはワイルドカードもサポートしています。"

msgid ""
"    The body of the *Operation* is the actual implementation and is defined by"
" the rule *XBlockExpression*, which is one of the most often used entry rules "
"from Xbase. A block consist of any number of expressions between curly braces "
"such as:"
msgstr ""

msgid ""
"    The first thing to note is that instead of inheriting from the usual *org."
"eclipse.xtext.common.Terminals* grammar, we make use of *org.eclipse.xtext.xba"
"se.Xbase*. Xbase allows us to easily reuse and embed modern, statically typed "
"expressions as well as Java type signatures in our language."
msgstr ""

msgid ""
"    The keyword `many` shall be used to model a multi-valued feature in this D"
"SL. The assignment operator (`?=`) implies that the feature `many` is of type "
"*boolean*. You are already familiar with the other syntax elements in this par"
"ser rule."
msgstr ""
"    `many` キーワードは、複数の値を持つ特性をモデル化するのに使われます。 代入演算子 (`?=`) は、`many` の型が *boolean*"
"であることを意味しています。 その他のパーサールールは既知のものです。"

msgid ""
"    The rule *AbstractElement* delegates to either the rule *PackageDeclaratio"
"n* or the rule *Entity*.\n"
"1."
msgstr ""

msgid ""
"    The rule *Entity* starts with the definition of a keyword followed by a na"
"me. The *extends* clause makes use of the rule *JvmTypeReference* which is def"
"ined in the super grammar. *JvmTypeReference* defines the syntax for full Java"
"-like type names. That is everything from simple names, over fully qualified n"
"ames to fully-fledged generics, including wildcards, lower bounds and upper bo"
"unds. Finally between curly braces there can be any number of *Features*, whic"
"h leads us to the next rule.\n"
"1."
msgstr ""

msgid ""
"    The rule *Feature* delegates to either a *Property* or an *Operation*.\n"
"1."
msgstr ""

msgid ""
"    This allows to ask for the name of an entity. It is straightforward to con"
"vert the name into a file name:"
msgstr ""

msgid ""
"    Using the dispatch keyword makes sure that the method is called for instan"
"ces of type *Entity* only. Have a look at the Xtend documentation on [polymorp"
"hic dispatch](http://www.eclipse.org/xtend/documentation/202_xtend_classes_mem"
"bers.html#polymorphic-dispatch) to understand Xtend's dispatch functions. Exte"
"nding [AbstractModelInferrer]({{site.src.xtext_extras}}/org.eclipse.xtext.xbas"
"e/src/org/eclipse/xtext/xbase/jvmmodel/AbstractModelInferrer.java) makes sure "
"we don't have to walk the syntax model on our own.\n"
"1.  ```xtend\n"
"    acceptor.accept(element.toClass(element.fullyQualifiedName)) [\n"
"        ...\n"
"    ]\n"
"    ```"
msgstr ""

msgid ""
"    When iterating over a list of heterogeneous types, the switch expression w"
"ith its type guards comes in handy. If *feature* is of type *Property* the fir"
"st block is executed. If it is an *Operation* the second block is executed. No"
"te that the variable *feature* will be implicitly casted to the respective typ"
"e within the blocks.\n"
"1.  ```xtend\n"
"    Property : {\n"
"        members += feature.toField(feature.name, feature.type)\n"
"        members += feature.toSetter(feature.name, feature.type)\n"
"        members += feature.toGetter(feature.name, feature.type)\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    You can further simplify the code by injecting `ParseHelper` and `Validati"
"onTestHelper` as extensions. This feature of Xtend allows to add new methods t"
"o a given type without modifying it. You can read more about extension methods"
" in the [Xtend documentation](https://www.eclipse.org/xtend/documentation/202_"
"xtend_classes_members.html#extension-methods). You can rewrite the code as fol"
"lows:"
msgstr ""

msgid ""
"    ```xbase\n"
"      do doSideEffect(\"foo\") while ((i=i+1)<max)\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      do {\n"
"        doSideEffect(\"foo\");\n"
"      } while (true)\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      for (String s : myStrings) {\n"
"        doSideEffect(s);\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      for (s : myStrings)\n"
"        doSideEffect(s)\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      new String()\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      new java.util.ArrayList<java.math.BigDecimal>()\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      switch foo {\n"
"        Entity : foo.superType.name\n"
"        Datatype : foo.name\n"
"        default : throw new IllegalStateException\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      switch x : foo.bar.complicated('hello', 42) {\n"
"        case \"hello42\" : ...\n"
"        case x.length<2 : ...\n"
"        default : ...\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      while ( ( i = i + 1 ) < max ) \n"
"        doSideEffect( \"foo\" )\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      while (true) {\n"
"        doSideEffect(\"foo\");\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"    {\n"
"        return \"Hello World\" + \"!\"\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"\"the quick brown fox\n"
"    jumps over the lazy dog.\"\n"
"    ```"
msgstr ""

msgid ""
"    ```xml\n"
"    <pluginManagement>\n"
"      <plugins>\n"
"        <!-- xtend-maven-plugin is in pluginManagement instead of in plugins\n"
"           so that it doesn't run before the exec-maven-plugin's *.mwe2 gen;\n"
"           this way we can list it after. \n"
"          -->"
msgstr ""
"    ```xml\n"
"    <pluginManagement>\n"
"      <plugins>\n"
"        <!-- xtend-maven-plugin is in pluginManagement instead of in plugins\n"
"           so that it doesn't run before the exec-maven-plugin's *.mwe2 gen;\n"
"           this way we can list it after. \n"
"          -->"

msgid ""
"    ```xml\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.eclipse.tycho</groupId>\n"
"        <artifactId>tycho-maven-plugin</artifactId>\n"
"        <version>${tycho-version}</version>\n"
"        <extensions>true</extensions>\n"
"      </plugin>\n"
"    </plugins>\n"
"    ```"
msgstr ""
"    ```xml\n"
"    <plugins>\n"
"      <plugin>\n"
"        <groupId>org.eclipse.tycho</groupId>\n"
"        <artifactId>tycho-maven-plugin</artifactId>\n"
"        <version>${tycho-version}</version>\n"
"        <extensions>true</extensions>\n"
"      </plugin>\n"
"    </plugins>\n"
"    ```"

msgid ""
"    ```xtend\n"
"      @Inject extension IQualifiedNameProvider\n"
"    ```"
msgstr ""

msgid ""
"    ```xtend\n"
"    @Inject ParseHelper<Domainmodel> parseHelper"
msgstr ""

msgid ""
"    ```xtend\n"
"    @Inject extension ParseHelper<Domainmodel>"
msgstr ""

msgid ""
"    ```xtend\n"
"    @RunWith(XtextRunner)\n"
"    @InjectWith(DomainmodelInjectorProvider)\n"
"    class DomainmodelParsingTest {"
msgstr ""

msgid ""
"    ```xtend\n"
"    class DomainmodelGenerator extends AbstractGenerator {"
msgstr ""

msgid ""
"    ```xtend\n"
"    import static org.junit.Assert.*"
msgstr ""

msgid ""
"    ```xtend\n"
"    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGener"
"atorContext context) {\n"
"        for (e : resource.allContents.toIterable.filter(Entity)) {\n"
"            fsa.generateFile(\n"
"                e.fullyQualifiedName.toString(\"/\") + \".java\",\n"
"                e.compile)\n"
"        }\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    ```xtend\n"
"    private def compile(Entity e) '''\n"
"        package «e.eContainer.fullyQualifiedName»;"
msgstr ""

msgid ""
"    ```xtend\n"
"    private def compile(Entity e) '''\n"
"        «IF e.eContainer.fullyQualifiedName !== null»\n"
"            package «e.eContainer.fullyQualifiedName»;\n"
"        «ENDIF»"
msgstr ""

msgid ""
"    ```xtend\n"
"    private def compile(Feature f) '''\n"
"        private «f.type.fullyQualifiedName» «f.name»;"
msgstr ""

msgid ""
"    ```xtext\n"
"    AbstractElement:\n"
"        PackageDeclaration | Entity;\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    DataType:\n"
"        'datatype' name=ID;\n"
"    ```"
msgstr ""
"    ```xtext\n"
"    DataType:\n"
"        'datatype' name=ID;\n"
"    ```"

msgid ""
"    ```xtext\n"
"    Domainmodel:\n"
"        (elements+=AbstractElement)*;"
msgstr ""
"    ```xtext\n"
"    Domainmodel:\n"
"        (elements+=AbstractElement)*;"

msgid ""
"    ```xtext\n"
"    Domainmodel:\n"
"        (elements+=Type)*;\n"
"    ```"
msgstr ""
"    ```xtext\n"
"    Domainmodel:\n"
"        (elements+=Type)*;\n"
"    ```"

msgid ""
"    ```xtext\n"
"    Domainmodel:\n"
"        importSection=XImportSection?\n"
"        elements+=AbstractElement*;\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    Entity :\n"
"        'entity' name=ID ('extends' superType=[Entity])? '{'\n"
"            (features+=Feature)*\n"
"        '}';\n"
"    ```"
msgstr ""
"    ```xtext\n"
"    Entity :\n"
"        'entity' name=ID ('extends' superType=[Entity])? '{'\n"
"            (features+=Feature)*\n"
"        '}';\n"
"    ```"

msgid ""
"    ```xtext\n"
"    Entity:\n"
"        'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'\n"
"            (features+=Feature)*\n"
"        '}';"
msgstr ""
"    ```xtext\n"
"    Entity:\n"
"        'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'\n"
"            (features+=Feature)*\n"
"        '}';"

msgid ""
"    ```xtext\n"
"    Entity:\n"
"        'entity' name=ValidID ('extends' superType=JvmTypeReference)? '{'\n"
"            features+=Feature*\n"
"        '}';\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    Feature:\n"
"        (many?='many')? name=ID ':' type=[Type];\n"
"    ```"
msgstr ""
"    ```xtext\n"
"    Feature:\n"
"        (many?='many')? name=ID ':' type=[Type];\n"
"    ```"

msgid ""
"    ```xtext\n"
"    Feature:\n"
"        Property | Operation;\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    Import:\n"
"        'import' importedNamespace=QualifiedNameWithWildcard;"
msgstr ""
"    ```xtext\n"
"    Import:\n"
"        'import' importedNamespace=QualifiedNameWithWildcard;"

msgid ""
"    ```xtext\n"
"    Operation:\n"
"        'op' name=ValidID \n"
"            '('(params+=FullJvmFormalParameter \n"
"            (',' params+=FullJvmFormalParameter)*)?')'\n"
"            ':' type=JvmTypeReference \n"
"        body=XBlockExpression;\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    PackageDeclaration:\n"
"        'package' name=QualifiedName '{'\n"
"            (elements+=AbstractElement)*\n"
"        '}';"
msgstr ""
"    ```xtext\n"
"    PackageDeclaration:\n"
"        'package' name=QualifiedName '{'\n"
"            (elements+=AbstractElement)*\n"
"        '}';"

msgid ""
"    ```xtext\n"
"    PackageDeclaration:\n"
"        'package' name=QualifiedName '{'\n"
"            elements+=AbstractElement*\n"
"        '}';\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    Property:\n"
"        name=ValidID ':' type=JvmTypeReference;\n"
"    ```"
msgstr ""

msgid ""
"    ```xtext\n"
"    Type:\n"
"        DataType | Entity;\n"
"    ```"
msgstr ""
"    ```xtext\n"
"    Type:\n"
"        DataType | Entity;\n"
"    ```"

msgid ""
"    ```xtext\n"
"    grammar org.example.domainmodel.Domainmodel with\n"
"                  org.eclipse.xtext.xbase.Xbase\n"
"    ```"
msgstr ""

msgid ""
"    acceptor.accept(element.toClass(element.fullyQualifiedName)) [\n"
"      documentation = element.documentation\n"
"      for (feature : element.features) {\n"
"        members += feature.toField(feature.name, feature.type)\n"
"        members += feature.toSetter(feature.name, feature.type)\n"
"        members += feature.toGetter(feature.name, feature.type)\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    entity Address {\n"
"        street: String\n"
"        zip: String\n"
"        city: String\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    entity Blog {\n"
"        title: String\n"
"        many posts: Post\n"
"    }"
msgstr ""
"    entity Blog {\n"
"        title: String\n"
"        many posts: Post\n"
"    }"

msgid ""
"    entity Comment extends HasAuthor {\n"
"        content: String\n"
"    }\n"
"}\n"
"```"
msgstr ""
"    entity Comment extends HasAuthor {\n"
"        content: String\n"
"    }\n"
"}\n"
"```"

msgid ""
"    entity HasAuthor {\n"
"        author: String\n"
"    }\n"
"}\n"
"```"
msgstr ""
"    entity HasAuthor {\n"
"        author: String\n"
"    }\n"
"}\n"
"```"

msgid ""
"    entity Person {\n"
"        name: String\n"
"        firstName: String\n"
"        friends: List<Person>\n"
"        address : Address\n"
"        op getFullName() : String {\n"
"            return firstName + \" \" + name;\n"
"        }"
msgstr ""

msgid ""
"    entity Post extends my.company.common.HasAuthor {\n"
"        title: String\n"
"        content: String\n"
"        many comments: Comment\n"
"    }"
msgstr ""
"    entity Post extends my.company.common.HasAuthor {\n"
"        title: String\n"
"        content: String\n"
"        many comments: Comment\n"
"    }"

msgid ""
"    fragment = grammarAccess.GrammarAccessFragment2 {}\n"
"    fragment = ecore.EMFGeneratorFragment2 {}\n"
"    fragment = serializer.SerializerFragment2 {}\n"
"    fragment = resourceFactory.ResourceFactoryFragment2 {}\n"
"    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}\n"
"    fragment = validation.ValidatorFragment2 {}\n"
"    fragment = scoping.ImportNamespacesScopingFragment2 {}\n"
"    fragment = exporting.QualifiedNamesFragment2 {}\n"
"    fragment = builder.BuilderIntegrationFragment2 {}\n"
"    fragment = generator.GeneratorFragment2 {}\n"
"    fragment = formatting.Formatter2Fragment2 {}\n"
"    fragment = ui.labeling.LabelProviderFragment2 {}\n"
"    fragment = ui.outline.QuickOutlineFragment2 {}\n"
"    fragment = ui.outline.OutlineTreeProviderFragment2 {}\n"
"    fragment = ui.quickfix.QuickfixProviderFragment2 {}\n"
"    fragment = ui.contentAssist.ContentAssistFragment2 {}\n"
"    fragment = junit.JunitFragment {}\n"
"    fragment = ui.refactoring.RefactorElementNameFragment2 {}\n"
"    fragment = types.TypesGeneratorFragment2 {}\n"
"    fragment = xbase.XtypeGeneratorFragment2 {}\n"
"    fragment = xbase.XbaseGeneratorFragment2 {}\n"
"    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}\n"
"    fragment = ui.compare.CompareFragment2 {}\n"
"    fragment = web.WebIntegrationFragment {\n"
"        framework = \"Ace\"\n"
"    }\n"
"    fragment = ui.projectWizard.TemplateProjectWizardFragment {}\n"
"    fragment = ui.fileWizard.TemplateFileWizardFragment {}\n"
"}\n"
"```"
msgstr ""

msgid ""
"    if (o instanceof Statemachine) {\n"
"      XtextResource res = (XtextResource) o.eResource();\n"
"      computeEventsFolding(res, foldingRegionAcceptor);\n"
"      computeResetEventsFolding(res, foldingRegionAcceptor);\n"
"      computeCommandsFolding(res, foldingRegionAcceptor);\n"
"    } else {\n"
"      super.computeObjectFolding(o, foldingRegionAcceptor);\n"
"    }\n"
"  }"
msgstr ""

msgid "    import my.company.common.*"
msgstr "    import my.company.common.*"

msgid ""
"    override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorC"
"ontext context) {\n"
"        fsa.generateFile(\"relative/path/AllTheStates.txt\", '''\n"
"            «FOR state : resource.allContents.filter(State).toIterable»\n"
"                State «state.name»\n"
"            «ENDFOR»\n"
"        ''')\n"
"    }"
msgstr ""

msgid ""
"    override generateFiles(IFileGenerator generator) {\n"
"        generator.generate('''«folder»/«name».mydsl''', '''\n"
"            Hello «helloName»!\n"
"        ''')\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    override generateProjects(IProjectGenerator generator) {\n"
"        if (generateHello.value) {\n"
"            generator.generate(new PluginProjectFactory => [\n"
"                projectName = projectInfo.projectName\n"
"                location = projectInfo.locationPath\n"
"                projectNatures += #[JavaCore.NATURE_ID, \"org.eclipse.pde.Plugi"
"nNature\", XtextProjectHelper.NATURE_ID]\n"
"                builderIds += JavaCore.BUILDER_ID\n"
"                folders += \"src\"\n"
"                addFile('''src/Model.mydsl''', '''\n"
"                    Hello World!\n"
"                ''')\n"
"            ])\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGener"
"atorContext context) {\n"
"        for (e : resource.allContents.toIterable.filter(Entity)) {\n"
"            fsa.generateFile(\n"
"                e.fullyQualifiedName.toString(\"/\") + \".java\",\n"
"                e.compile)\n"
"        }\n"
"    }"
msgstr ""

msgid ""
"    parserGenerator = {\n"
"      options = {\n"
"        ignoreCase = true\n"
"      }\n"
"    }\n"
" }\n"
"```"
msgstr ""

msgid ""
"    private def compile(Entity e) '''\n"
"        «IF e.eContainer.fullyQualifiedName !== null»\n"
"            package «e.eContainer.fullyQualifiedName»;\n"
"        «ENDIF»"
msgstr ""

msgid ""
"    private def compile(Feature f) '''\n"
"        private «f.type.fullyQualifiedName» «f.name»;"
msgstr ""

msgid ""
"    public java.lang.String getAuthor() {\n"
"        return author;\n"
"    }"
msgstr ""

msgid ""
"    public static void doSetup() {\n"
"        if (!EPackage.Registry.INSTANCE.containsKey(MyPackage.eNS_URI))\n"
"            EPackage.Registry.INSTANCE.put(MyPackage.eNS_URI, MyPackage.eINSTA"
"NCE);\n"
"        new MyLanguageStandaloneSetup().createInjectorAndDoEMFRegistration();\n"
"    }"
msgstr ""

msgid ""
"    public void setAuthor(java.lang.String author) {\n"
"        this.author = author;\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"    public void set«name.toFirstUpper»(\n"
"      «type.shortName(importManager)» «name») {\n"
"      this.«name» = «name»;\n"
"    }\n"
"  '''"
msgstr ""

msgid ""
"    public «type.shortName(importManager)» \n"
"      get«name.toFirstUpper»() {\n"
"      return «name»;\n"
"    }"
msgstr ""

msgid ""
"    serializer = {\n"
"        generateStub = false\n"
"    }\n"
"}\n"
"```\n"
"we see the `generateStub` parameter disabled for the `serializer` fragment, wh"
"ich means that the fragment should not create any stub file for customizing se"
"rialization."
msgstr ""

msgid ""
"    }\n"
"    ```"
msgstr ""

msgid ""
"    «FOR i:importManager.imports»\n"
"      import «i»;\n"
"    «ENDFOR»"
msgstr ""

msgid ""
"    «body»\n"
"  '''"
msgstr ""

msgid "  ..."
msgstr ""

msgid ""
"  /**\n"
"   * a builder API to programmatically create Jvm elements \n"
"   * in readable way.\n"
"   */\n"
"  @Inject extension JvmTypesBuilder"
msgstr ""

msgid ""
"  // Create and register the completion proposal:\n"
"  // The proposal may be null as the createCompletionProposal(..) \n"
"  // methods check for valid prefixes and terminal token conflicts.\n"
"  // The acceptor handles null-values gracefully.\n"
"  acceptor.accept(createCompletionProposal(proposal, context));\n"
"}\n"
"```"
msgstr ""

msgid ""
"  // compute the plain proposal\n"
"  String proposal = event.getName() + \"ID\";"
msgstr ""

msgid ""
"  // lexical stuff goes here \n"
"  // ..\n"
"  public final static String CROSS_REF = \"CrossReference\";"
msgstr ""

msgid ""
"  @Inject\n"
"  private IQualifiedNameProvider qualifiedNameProvider;"
msgstr ""

msgid ""
"  @Inject\n"
"  private PluginImageHelper imageHelper;"
msgstr ""

msgid "  @Inject extension IQualifiedNameProvider"
msgstr ""

msgid ""
"  @Inject extension IQualifiedNameProvider\n"
"  @Inject extension TypeReferenceSerializer"
msgstr ""

msgid "  @Inject extension JvmTypesBuilder"
msgstr ""

msgid ""
"  @Override\n"
"  protected boolean apply(IOutlineNode node) {\n"
"    return !(node instanceof EObjectNode)\n"
"        || !((EObjectNode) node).getEClass()\n"
"          .equals(DomainmodelPackage.Literals.OPERATION);\n"
"  }"
msgstr ""

msgid ""
"  @Override\n"
"  protected void computeObjectFolding(\n"
"    EObject o,\n"
"    IFoldingRegionAcceptor<ITextRegion> foldingRegionAcceptor) {"
msgstr ""

msgid ""
"  @Override\n"
"  protected void configureAction(Action action) {\n"
"    action.setText(\"Hide operations\");\n"
"    action.setDescription(\"Hide operations\");\n"
"    action.setToolTipText(\"Hide operations\");\n"
"    action.setImageDescriptor(imageHelper.getImageDescriptor(\"Operation.gif\"))"
";\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  @Override\n"
"  public String getPreferenceKey() {\n"
"    return PREFERENCE_KEY;\n"
"  }"
msgstr ""

msgid ""
"  IEvaluationResult result = xbaseInterpreter.evaluate(expression,\n"
"    evaluationContext, CancelIndicator.NullImpl);\n"
"  if (result.getException() != null) {\n"
"    // handle exception\n"
"  } \n"
"  return result.getResult();\n"
"}\n"
"```"
msgstr ""

msgid ""
"  INode root = resource.getParseResult().getRootNode();\n"
"  for (INode node : root.getAsTreeIterable()) {\n"
"    if (node.getGrammarElement() instanceof CrossReference) {\n"
"      acceptor.addPosition(node.getOffset(), node.getLength(), \n"
"        MyHighlightingConfiguration.CROSS_REF);\n"
"    }\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  def body(Entity it, ImportManager importManager) '''\n"
"    public class «name» «IF superType != null»\n"
"      extends «superType.shortName(importManager)» «ENDIF»{\n"
"      «FOR f : features»\n"
"        «f.compile(importManager)»\n"
"      «ENDFOR»\n"
"    }\n"
"  '''"
msgstr ""

msgid ""
"  def compile(Entity it) '''\n"
"    «val importManager = new ImportManager(true)» \n"
"    «val body = body(importManager)»\n"
"    «IF eContainer != null»\n"
"      package «eContainer.fullyQualifiedName»;\n"
"    «ENDIF»"
msgstr ""

msgid ""
"  def compile(Feature it, ImportManager importManager) '''\n"
"    private «type.shortName(importManager)» «name»;"
msgstr ""

msgid ""
"  def dispatch void infer(Entity element,\n"
"                IJvmDeclaredTypeAcceptor acceptor,\n"
"                boolean isPrelinkingPhase) {\n"
"    acceptor.accept(element.toClass( element.fullyQualifiedName )) [\n"
"      documentation = element.documentation\n"
"      if (element.superType !== null)\n"
"        superTypes += element.superType.cloneWithProxies\n"
"      for (feature : element.features) {\n"
"        switch feature {"
msgstr ""

msgid ""
"  def dispatch void infer(Entity element, \n"
"                IJvmDeclaredTypeAcceptor acceptor, \n"
"                boolean isPrelinkingPhase) {"
msgstr ""

msgid ""
"  def shortName(JvmTypeReference ref, \n"
"          ImportManager importManager) {\n"
"    val result = new StringBuilderBasedAppendable(importManager)\n"
"    ref.serialize(ref.eContainer, result);\n"
"    result.toString\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  override void doGenerate(Resource resource, IFileSystemAccess fsa) {\n"
"    for(e: resource.allContents.toIterable.filter(typeof(Entity))) {\n"
"      fsa.generateFile(\n"
"        e.fullyQualifiedName.toString(\"/\") + \".java\",\n"
"        e.compile)\n"
"    }\n"
"  }"
msgstr ""

msgid "  private String name;"
msgstr ""

msgid "  private final List<Person> children = new ArrayList<Person>();"
msgstr ""

msgid ""
"  private void computeCommandsFolding(\n"
"    XtextResource res,\n"
"    IFoldingRegionAcceptor<ITextRegion> foldingRegionAcceptor) {\n"
"    ...\n"
"  }\n"
"  ...\n"
"}\n"
"```"
msgstr ""

msgid ""
"  private void computeEventsFolding(\n"
"    XtextResource res,\n"
"    IFoldingRegionAcceptor<ITextRegion> foldingRegionAcceptor) {\n"
"    ...\n"
"  }"
msgstr ""

msgid ""
"  private void computeResetEventsFolding(\n"
"    XtextResource res,\n"
"    IFoldingRegionAcceptor<ITextRegion> foldingRegionAcceptor) {\n"
"    ...\n"
"  }"
msgstr ""

msgid ""
"  private void method(String param) { // method body scope\n"
"    String localVar = \"bar\";\n"
"    innerBlock: { // block scope\n"
"      String innerScopeVar = \"foo\";\n"
"      Object field = innerScopeVar;\n"
"      // the scope hierarchy at this point would look like this:\n"
"      //  blockScope{field,innerScopeVar}->\n"
"      //  methodScope{localVar, param}->\n"
"      //  classScope{field}-> ('field' is shadowed)\n"
"      //  fileScope{STATIC}->\n"
"      //  classpathScope{\n"
"      //      'all qualified names of accessible static fields'} ->\n"
"      //  NULLSCOPE{}\n"
"      //\n"
"    }\n"
"    field.add(localVar);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public Class<? extends IFoldingRegionProvider> bindIFoldingRegionProvider() "
"{\n"
"    return StatemachineFoldingRegionProvider.class;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public EObject getEObject(Resource resource,\n"
"                            String fragment,\n"
"                            Fallback fallback) {\n"
"    if (fragment != null) {\n"
"      Iterator<EObject> i = EcoreUtil.getAllContents(resource, false);\n"
"      while(i.hasNext()) {\n"
"        EObject eObject = i.next();\n"
"        String candidateFragment = (eObject.eIsProxy())\n"
"            ? ((InternalEObject) eObject).eProxyURI().fragment()\n"
"            : getFragment(eObject, fallback);\n"
"        if (fragment.equals(candidateFragment))\n"
"          return eObject;\n"
"      }\n"
"    }\n"
"    return fallback.getEObject(fragment);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public String getFragment(EObject obj, Fallback fallback) {\n"
"    String qName = qualifiedNameProvider.getQualifiedName(obj);\n"
"    return qName != null ? qName : fallback.getFragment(obj);\n"
"  }"
msgstr ""

msgid ""
"  public String image(Event event) {\n"
"    return \"event.gif\";\n"
"  }"
msgstr ""

msgid ""
"  public String image(State state) {\n"
"    return \"state.gif\";\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public String text(Event event) {\n"
"    return event.getName() + \" (\" + event.getCode() + \")\";\n"
"  }"
msgstr ""

msgid ""
"  public TextStyle crossReferenceTextStyle() {\n"
"    TextStyle textStyle = new TextStyle();\n"
"    textStyle.setStyle(SWT.ITALIC);\n"
"    return textStyle;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public TextStyle keywordTextStyle() {\n"
"    TextStyle textStyle = new TextStyle();\n"
"    textStyle.setColor(new RGB(127, 0, 85));\n"
"    textStyle.setStyle(SWT.BOLD);\n"
"    return textStyle;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public static final String KEYWORD_ID = \"keyword\";\n"
"  public static final String COMMENT_ID = \"comment\";"
msgstr ""

msgid ""
"  public static final String PREFERENCE_KEY =\n"
"    \"ui.outline.filterEntities\";"
msgstr ""

msgid ""
"  public void addChild(Person child) {\n"
"    this.children.add(child);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"  public void configure(IHighlightingConfigurationAcceptor acceptor) {\n"
"    // lexical stuff goes here \n"
"    // ..\n"
"    acceptor.acceptDefaultHighlighting(CROSS_REF, \n"
"      \"Cross-References\", crossReferenceTextStyle());\n"
"  }"
msgstr ""

msgid ""
"  public void configure(IHighlightingConfigurationAcceptor acceptor) {\n"
"    acceptor.acceptDefaultHighlighting(\n"
"      KEYWORD_ID, \"Keyword\", keywordTextStyle());\n"
"    acceptor.acceptDefaultHighlighting(COMMENT_ID, \"Comment\", commentTextStyle"
"();\n"
"  }"
msgstr ""

msgid ""
"  public void setName(String name) {\n"
"    this.name = name;\n"
"  }"
msgstr ""

msgid ""
"  void flush() throws IOException;\n"
"  void writeHidden(EObject grammarElement, String value);\n"
"  void writeSemantic(EObject grammarElement, String value);\n"
"}\n"
"```"
msgstr ""

msgid ""
" * [Orion](http://eclipse.org/orion/)\n"
" * [Ace](http://ace.c9.io)\n"
" * [CodeMirror](http://codemirror.net)"
msgstr ""
" * [Orion](http://eclipse.org/orion/)\n"
" * [Ace](http://ace.c9.io)\n"
" * [CodeMirror](http://codemirror.net)"

msgid ""
" * `baseUrl`\n"
"   The path segment where the Xtext service is found (default: `'/'`). See the"
" `serviceUrl` option.\n"
" * `contentAssistCharTriggers`\n"
"   Characters that invoke the content assist service when typed (Orion only).\n"
" * `contentAssistExcludedStyles`\n"
"   Excluded styles for character triggers (Orion only).\n"
" * `contentType`\n"
"   The content type included in requests to the Xtext server. If no content ty"
"pe is given, the file extension in the `resourceId` option is used to determin"
"e the language.\n"
" * `dirtyElement`\n"
"   An element into which the dirty status class is written when the editor is "
"marked dirty; it can be either a DOM element or an id for a DOM element.\n"
" * `dirtyStatusClass`\n"
"   A CSS class name written into the dirtyElement when the editor is marked di"
"rty (default: `'dirty'`).\n"
" * `document`\n"
"   The document; if not specified, the global document is used.\n"
" * `enableContentAssistService`\n"
"   Whether content assist should be enabled (default: `true`).\n"
" * `enableCors`\n"
"   Whether CORS should be enabled for service request (default: `false`).\n"
" * `enableFormattingAction`\n"
"   Whether the formatting action should be bound to the standard keystroke <kb"
"d>Ctrl</kbd>+<kbd>⇧</kbd>+<kbd>F</kbd> (<kbd>Ctrl</kbd>+<kbd>⇧</kbd>+<kbd>S</k"
"bd> on CodeMirror) / <kbd>⌘</kbd>+<kbd>⇧</kbd>+<kbd>F</kbd> (default: `false`)"
".\n"
" * `enableFormattingService`\n"
"   Whether text formatting should be enabled (default: `true`).\n"
" * `enableGeneratorService`\n"
"   Whether code generation should be enabled (default: `true`). No default key"
"stroke is bound for the generator, so it must be triggered through JavaScript "
"code.\n"
" * `enableHoverService`\n"
"   Whether mouse hover information should be enabled (default: `true`).\n"
" * `enableHighlightingService`\n"
"   Whether semantic highlighting should be enabled (default: `true`). In contr"
"ast to [syntax highlighting](#syntax-highlighting), semantic highlighting is c"
"omputed on the server.\n"
" * `enableOccurrencesService`\n"
"   Whether marking occurrences should be enabled (default: `true`).\n"
" * `enableSaveAction`\n"
"   Whether the save action should be bound to the standard keystroke <kbd>Ctrl"
"</kbd>+<kbd>S</kbd> / <kbd>⌘</kbd>+<kbd>S</kbd> (default: `false`).\n"
" * `enableValidationService`\n"
"   Whether validation should be enabled (default: `true`).\n"
" * `loadFromServer`\n"
"   Whether to load the editor content from the server. The default value is `t"
"rue` if the `resourceId` option is set and `false` otherwise.\n"
" * `mouseHoverDelay`\n"
"   The number of milliseconds to wait after a mouse hover before the informati"
"on tooltip is displayed (default: 500).\n"
" * `parent`\n"
"   The parent element into which the editor should be created. It can be eithe"
"r a DOM element or an id for a DOM element (default: `'xtext-editor'`).\n"
" * `parentClass`\n"
"   If the `parent` option is not given, this option is used to find elements t"
"hat match the given class name (default: `'xtext-editor'`).\n"
" * `resourceId`\n"
"   The identifier of the resource displayed in the text editor. This option is"
" sent to the server to communicate required information on the respective reso"
"urce.\n"
" * `selectionUpdateDelay`\n"
"   The number of milliseconds to wait after a selection change before Xtext se"
"rvices are invoked (default: 550).\n"
" * `sendFullText`\n"
"   Whether the full text shall be sent to the server with each request (defaul"
"t: `false`). Use this if you want the server to run in stateless mode. If the "
"option is inactive, the server state is updated regularly.\n"
" * `serviceUrl`\n"
"   The URL of the Xtext servlet. If no value is given, it is constructed using"
" the `baseUrl` option in the form `{location.protocol}//{location.host}{baseUr"
"l}xtext-service`.\n"
" * `showErrorDialogs`\n"
"   Whether errors should be displayed in popup dialogs (default: `false`).\n"
" * `syntaxDefinition`\n"
"   A path to a JS file containing a syntax definition. Set this option to `'no"
"ne'` to disable syntax highlighting. See the [Syntax Highlighting](#syntax-hig"
"hlighting) section for more details.\n"
" * `textUpdateDelay`\n"
"   The number of milliseconds to wait after a text change before Xtext service"
"s are invoked (default: 500).\n"
" * `xtextLang`\n"
"   The language name (usually the file extension configured for the language)."
" This is used to set the `resourceId` and `syntaxDefinition` options if they h"
"ave not been specified."
msgstr ""
" * `baseUrl`\n"
"   Xtextサービスがどこにあるかを表すパスセグメント。(デフォルト:`'/'`)`serverUrl`オプションを参照。\n"
" * `contentAssistCharTriggers`\n"
"   コンテンツアシストサービスを呼び出すためのキー。(Orionのみ)\n"
" * `contentAssistExcludedStyles`\n"
"   コンテンツアシストの呼び出しを除外するキー。 (Orionのみ)。\n"
" * `contentType`\n"
"   Xtextサーバーへの要求に含むコンテンツタイプ。もしコンテンツタイプが設定されていない場合、`resourceId`オプション内のファイル拡張子が言"
"語を判断するために使用されます。\n"
" * `dirtyElement`\n"
"   エディターがダーティーとマーキングされたとき、ダーティー状態クラスが記載される要素。DOM要素もしくはDOM要素のidのどちらかを指定します。\n"
" * `dirtyStatusClass`\n"
"   エディターがダーティーとマーキングされたとき、ダーティー要素の中に記載されるCSSクラス名です。(デフォルト: `'dirty'`)\n"
" * `document`\n"
"   ドキュメント。もし指定されていない場合は、ドキュメント全体が使用されます。\n"
" * `enableContentAssistService`\n"
"   コンテンツアシストを有効にするかどうか。 (デフォルト: `true`).\n"
" * `enableCors`\n"
"   サービス要求にCORSを有効にするかどうか。 (default: `false`).\n"
" * `enableFormattingAction`\n"
"   標準のキーストロークにフォーマットアクションをバインドするかどうか。<kbd>Ctrl</kbd>+<kbd>⇧</kbd>+<kbd>F</kbd>"
" (<kbd>Ctrl</kbd>+<kbd>⇧</kbd>+<kbd>S</kbd> CodeMirror上の場合) / <kbd>⌘</kbd>+<kb"
"d>⇧</kbd>+<kbd>F</kbd> (デフォルト: `false`)\n"
" * `enableFormattingService`\n"
"   テキストフォーマットを有効にするかどうか。 (デフォルト: `true`).\n"
" * `enableGeneratorService`\n"
"   コード生成を有効にするかどうか。(デフォルト: `true`)ジェネレーターにデフォルトのキーストロークがバインドされていない場合、JavaScrip"
"tコードから実行する必要があります。\n"
" * `enableHoverService`\n"
"   マウスホバーを有効にするかどうか。(デフォルト: `true`)\n"
" * `enableHighlightingService`\n"
"   セマンティックハイライトを有効にするかどうか。 (デフォルト: `true`). [シンタックスハイライト](#syntax-highlighting"
")と対照的に、 セマンティックハイライトはサーバー上で計算されます。\n"
" * `enableOccurrencesService`\n"
"   強調表示を有効にするかどうか。(デフォルト: `true`)\n"
" * `enableSaveAction`\n"
"   保存を標準キーストロークにバインドするかどうか。 <kbd>Ctrl</kbd>+<kbd>S</kbd> / <kbd>⌘</kbd>+<kbd>S"
"</kbd> (デフォルト: `false`)\n"
" * `enableValidationService`\n"
"   検証を有効にするかどうか。 (デフォルト: `true`)\n"
" * `loadFromServer`\n"
"   サーバーからエディターコンテンツをロードするかどうか。 デフォルトは `resourceId`が設定されている場合は`true`、それ以外は`fals"
"e`です。\n"
" * `mouseHoverDelay`\n"
"   マウスオーバー後、ツールチップが表示されるまでの待ち時間(ミリ秒)(デフォルト: 500).\n"
" * `parent`\n"
"   親要素の中にエディタを生成するかどうか。DOM要素もしくはDOM要素のidのどちらかを指定することができます。(デフォルト: `'xtext-edit"
"or'`)\n"
" * `parentClass`\n"
"   `parent`オプションが設定されていない場合、このオプションは与えられたクラス名で要素を検索するために使用されます。 (デフォルト: `'xtex"
"t-editor'`)\n"
" * `resourceId`\n"
"   テキストエディタ内に表示されているリソースの識別子です。このオプションは、各リソースに関して必要な情報をサーバーとやり取りするために送信されます。\n"
" * `selectionUpdateDelay`\n"
"   選択が変更されてからXtextサービスが実行されるまでの待ち時間(ミリ秒)(デフォルト: 550)\n"
" * `sendFullText`\n"
"   リクエスト毎に全テキストを送信するかどうか。(デフォルト: `false`)これはサーバーをステートレスモードで動作させるときに使用してください。この"
"オプションが無効の場合、サーバー状態は定期的に更新されます。\n"
" * `serviceUrl`\n"
"   XtextサーブレットのURL。オプションに値が設定されていない場合、`{location.protocol}//{location.host}{ba"
"seUrl}xtext-service`形式の`baseUrl`オプションを使用して構成されます。\n"
" * `showErrorDialogs`\n"
"   ポップアップダイアログでエラーを表示するかどうか。(デフォルト: `false`)\n"
" * `syntaxDefinition`\n"
"   構文定義を含むJSファイルのパス。このオプションを`'none'`に設定するとシンタックスハイライトを無効にできます。詳細は[シンタックスハイライト]"
"(#syntax-highlighting)節を参照。\n"
" * `textUpdateDelay`\n"
"   テキストが変更されXtextサービスが実行されるまでの待ち時間(ミリ秒)(デフォルト: 500)\n"
" * `xtextLang`\n"
"   言語名。(通常は言語用に構成されたファイル拡張子)このオプションが設定されていない場合、`resourceId`と`syntaxDefinition`"
"オプションが設定されていない場合、それらを指定するために使用されます。"

msgid ""
" * `getContentAssist()`\n"
"   Returns the content assist proposals in the format explained in the [Conten"
"t Assist](#content-assist) section.\n"
" * `validate()`\n"
"   Returns the validation result. The returned object has a property `issues`,"
" which is an array of objects with the following properties:\n"
"    * `description`: A description to be displayed to the user.\n"
"    * `severity`: one of `'error'`, `'warning'`, or `'info'`\n"
"    * `line`: the line where the issue occurs (one-based)\n"
"    * `column`: the column where the issue occurs (one-based)\n"
"    * `offset`: the character offset in the document (zero-based)\n"
"    * `length`: the length of the affected text region\n"
" * `computeHighlighting()`\n"
"   Returns the text styling data for semantic highlighting (see the [Semantic "
"Highlighting](#semantic-highlighting) section).\n"
" * `getOccurrences()`\n"
"   Returns the occurrences of the element at the current cursor position (see "
"the [Mark Occurrences](#mark-occurrences) section).\n"
" * `getHoverInfo()`\n"
"   Returns the hover information at the current cursor position (see the [Hove"
"r Information](#hover-info) section).\n"
" * `format()`\n"
"   Formats the current selection (or the whole document if the selection has z"
"ero length) and returns the formatted text.\n"
" * `generate()`\n"
"   Returns the document generated from the associated resource. If more than o"
"ne document has been generated, an object with a property `documents` is retur"
"ned, which is an array of objects with the properties `name`, `contentType`, a"
"nd `content`.\n"
" * `loadResource()`\n"
"   Loads the associated resource and returns an object with properties `fullTe"
"xt` and `dirty`. If the resource has been modified during the current session,"
" the modified version is returned even if the page is reloaded.\n"
" * `saveResource()`\n"
"   Saves the current state of the resource.\n"
" * `revertResource()`\n"
"   Reverts the resource to the last saved state and returns an object with pro"
"perties `fullText` and `dirty`.\n"
" * `update()`\n"
"   Computes the difference between the current editor content and the last ver"
"sion that has been committed to the server. If there is a difference, an updat"
"e request is sent to refresh the server state. The return value has a single p"
"roperty `stateId`, which is an identifier for the new server state. All reques"
"ts have to include the last obtained state identifier in order to succeed."
msgstr ""
" * `getContentAssist()`\n"
"   [コンテンツアシスト](#content-assist)節で説明した形式でコンテンツアシスト案を返します。\n"
" * `validate()`\n"
"   検証結果を返します。戻り値のオブジェクトは`issues`プロパティを持っており、これは以下のプロパティのオブジェクト配列です:\n"
"    * `description`: ユーザに表示する説明。\n"
"    * `severity`: `'error'`、 `'warning'`、 or `'info'`のいずれか\n"
"    * `line`: 問題が発生した行 (1から開始)\n"
"    * `column`: 問題が発生した列 (1から開始)\n"
"    * `offset`: ドキュメント内の文字オフセット (0から開始)\n"
"    * `length`: 影響を受けるテキスト領域の長さ\n"
" * `computeHighlighting()`\n"
"   セマンティックハイライト用のテキストスタイリングデータを返します。 ([セマンティックハイライト](#semantic-highlighting)節を"
"参照)。\n"
" * `getOccurrences()`\n"
"   現在のカーソル位置にあるエレメントを返します。 ([強調表示](#mark-occurrences)節を参照)。\n"
" * `getHoverInfo()`\n"
"   現在のカーソル位置にあるホバーを返します。 ([ホバー](#hover-info)節を参照)。\n"
" * `format()`\n"
"   Formats the current selection (or the whole document if the selection has z"
"ero length) and returns the formatted text.\n"
"   現在の選択範囲をフォーマットし、フォーマット後のテキストを返します。 (選択範囲の長さが0の場合、全てのドキュメントをフォーマット対象とする)\n"
" * `generate()`\n"
"   関連付けられたリソースから生成されたドキュメントを返します。 1つ以上のドキュメントが生成された場合、 `documents`プロパティを持つオブジェ"
"クトが返されます。`documents`プロパティは`name`、`contentType`と`content`プロパティを持つオブジェクトの配列です。\n"
" * `loadResource()`\n"
"   関連付けられたリソースをロードし、`fullText`と`dirty`プロパティを持つオブジェクトを返します。現在のセッション中にリソースが変更された"
"場合、ページがリロードされても変更後のバージョンが返されます。\n"
" * `saveResource()`\n"
"   現在のリソースが保存されます。\n"
" * `revertResource()`\n"
"   Reverts the resource to the last saved state and returns an object with pro"
"perties `fullText` and `dirty`.\n"
"   リソースを最終保存時のものに戻し、`fullText`と`dirty`プロパティを持つオブジェクトを返します。\n"
" * `update()`\n"
"   最後にサーバーにコミットしたバージョンのコンテンツと現在のエディター上のコンテンツとの差分を計算します。差分があった場合、サーバーの状態をリフレッシュ"
"するために更新要求を送信します。戻り値は更新されたサーバー状態の識別子である`stateId`のみを持つオブジェクトを返します。全ての要求は最後に取得したサ"
"ーバー状態の識別子を含む必要があります。"

msgid ""
" 1. Assign the Domainmodel content type to the Domainmodel language server lau"
"ncher:\n"
"![Domainmodel Language Server](images/LSP_4_DomainmodelLanguageServer.png)"
msgstr ""
" 1. ドメインモデルコンテントタイプをドメインモデル言語サーバランチャーに割り付ける:\n"
"![ドメインモデル言語サーバー](../../documentation/images/LSP_4_DomainmodelLanguageServer.pn"
"g)"

msgid ""
" 1. Configure a content type to the `*.dmodel` files:\n"
"![Domainmodel Content Type](images/LSP_2_DomainmodelContentType.png)"
msgstr ""
" 1. コンテントタイプを`*.dmodel`ファイルに設定する\n"
"![ドメインモデルコンテントタイプ](../../documentation/images/LSP_2_DomainmodelContentType.png"
")"

msgid ""
" 1. Create a launch configuration that starts the Domainmodel language server:"
"\n"
"![Domainmodel Language Server Launcher](images/LSP_3_DomainmodelLanguageServer"
"Launcher.png)"
msgstr ""
" 1. ドメインモデル言語サーバーを起動するようローンチ設定を作成する:\n"
"![ドメインモデル言語サーバーランチャー](../../documentation/images/LSP_3_DomainmodelLanguageServ"
"erLauncher.png)"

msgid ""
" 1. LSP does not support syntax highlighting (usually it is done on the client"
" side). The following [TextMate](https://projects.eclipse.org/projects/technol"
"ogy.tm4e) json file adds syntax highlighting support for the keywords, single-"
"line and multi-line comments of the Domainmodel language:\n"
" ```json\n"
"{\n"
"\t\"name\": \"Domainmodel\",\n"
"\t\"scopeName\": \"text.dmodel\",\n"
"\t\"fileTypes\": [\n"
"\t\t\"dmodel\"\n"
"\t],\n"
"\t\"repository\": {\n"
"\t\t\"general\": {\n"
"\t\t\t\"patterns\": [\n"
"\t\t\t\t{\n"
"\t\t\t\t\t\"include\": \"#linecomment\"\n"
"\t\t\t\t},\n"
"\t\t\t\t{\n"
"\t\t\t\t\t\"include\": \"#blockcomment\"\n"
"\t\t\t\t},\n"
"\t\t\t\t{\n"
"\t\t\t\t\t\"include\": \"#keyword\"\n"
"\t\t\t\t}\n"
"\t\t\t]\n"
"\t\t},\n"
"\t\t\"linecomment\": {\n"
"\t\t\t\"name\": \"comment.line.double-dash.dmodel\",\n"
"\t\t\t\"begin\": \"(^[ \\\t]+)?(?=//)\",\n"
"\t\t\t\"end\": \"(?=$)\"\n"
"\t\t},\n"
"\t\t\"blockcomment\": {\n"
"\t\t\t\"name\": \"comment.block.dmodel\",\n"
"\t\t\t\"begin\": \"/\\\\*(\\\\*)?(?!/)\",\n"
"\t\t\t\"end\": \"\\\\*/\"\n"
"\t\t},\n"
"\t\t\"keyword\": {\n"
"\t\t\t\"name\": \"keyword.control.mydsl\",\n"
"\t\t\t\"match\": \"\\\\b(entity|datatype)\\\\b|!\""
msgstr ""
" 1. LSPはシンタックスハイライトはサポートしていません。（通常はクライアントサイドで実現）以下に示す [TextMate](https://proje"
"cts.eclipse.org/projects/technology.tm4e) jsonファイルにてドメインモデル言語にキーワードに対するシンタックスハ"
"イライトサポート、単一行と複数行コメントのサポートを追加しています: \n"
" ```json\n"
"{\n"
"\t\"name\": \"Domainmodel\",\n"
"\t\"scopeName\": \"text.dmodel\",\n"
"\t\"fileTypes\": [\n"
"\t\t\"dmodel\"\n"
"\t],\n"
"\t\"repository\": {\n"
"\t\t\"general\": {\n"
"\t\t\t\"patterns\": [\n"
"\t\t\t\t{\n"
"\t\t\t\t\t\"include\": \"#linecomment\"\n"
"\t\t\t\t},\n"
"\t\t\t\t{\n"
"\t\t\t\t\t\"include\": \"#blockcomment\"\n"
"\t\t\t\t},\n"
"\t\t\t\t{\n"
"\t\t\t\t\t\"include\": \"#keyword\"\n"
"\t\t\t\t}\n"
"\t\t\t]\n"
"\t\t},\n"
"\t\t\"linecomment\": {\n"
"\t\t\t\"name\": \"comment.line.double-dash.dmodel\",\n"
"\t\t\t\"begin\": \"(^[ \\\t]+)?(?=//)\",\n"
"\t\t\t\"end\": \"(?=$)\"\n"
"\t\t},\n"
"\t\t\"blockcomment\": {\n"
"\t\t\t\"name\": \"comment.block.dmodel\",\n"
"\t\t\t\"begin\": \"/\\\\*(\\\\*)?(?!/)\",\n"
"\t\t\t\"end\": \"\\\\*/\"\n"
"\t\t},\n"
"\t\t\"keyword\": {\n"
"\t\t\t\"name\": \"keyword.control.mydsl\",\n"
"\t\t\t\"match\": \"\\\\b(entity|datatype)\\\\b|!\""

msgid "![Ecore concepts](images/ecore.png)"
msgstr ""

msgid "![IContainer Management](images/index_container.png)"
msgstr ""

msgid "![Sample AST](images/ast.png)"
msgstr ""

msgid "![Sample meta model](images/metamodel.png)"
msgstr ""

msgid "![The data model of Xtext's index](images/index_datamodel.png)"
msgstr ""

msgid "![](images/30min_editor.png)"
msgstr "![](../../documentation/images/30min_editor.png)"

msgid "![](images/30min_initialprojectlayout.png)"
msgstr "![](../../documentation/images/30min_initialprojectlayout.png)"

msgid "![](images/30min_multipleeditors.png)"
msgstr "![](../../documentation/images/30min_multipleeditors.png)"

msgid "![](images/30min_rungenerator.png)"
msgstr "![](../../documentation/images/30min_rungenerator.png)"

msgid "![](images/30min_wizard.png)"
msgstr "![](../../documentation/images/30min_wizard.png)"

msgid "![](images/JvmTutorial_Editor.png)"
msgstr ""

msgid "![](images/JvmTutorial_RunGenerator.png)"
msgstr ""

msgid "![](images/autoediting.gif)"
msgstr ""

msgid "![](images/code_mining.png)"
msgstr ""

msgid "![](images/emf-integration.png)"
msgstr ""

msgid "![](images/expression-ast.png)"
msgstr ""

msgid "![](images/find_references.gif)"
msgstr ""

msgid "![](images/folding_default.png)"
msgstr ""

msgid "![](images/highlighting.png)"
msgstr ""

msgid "![](images/hovering.png)"
msgstr ""

msgid "![](images/mark_occurrences.png)"
msgstr ""

msgid "![](images/preferences_syntax.png)"
msgstr ""

msgid "![](images/preferences_templates.png)"
msgstr ""

msgid "![](images/sample_outline.png)"
msgstr ""

msgid "![](images/templates_crossref.png)"
msgstr ""

msgid "# {{page.title}} {#configuration}"
msgstr ""

msgid "# {{page.title}} {#continuous-integration}"
msgstr "# {{page.title}} {#continuous-integration}"

msgid "# {{page.title}} {#domain-model-walkthrough}"
msgstr "# {{page.title}} {#domain-model-walkthrough}"

msgid "# {{page.title}} {#domainmodel-next-steps}"
msgstr ""

msgid "# {{page.title}} {#emf-integration}"
msgstr ""

msgid "# {{page.title}} {#grammarLanguage}"
msgstr "# {{page.title}} {#grammarLanguage}"

msgid "# {{page.title}} {#ide-concepts}"
msgstr ""

msgid "# {{page.title}} {#jvm-domain-model}"
msgstr ""

msgid "# {{page.title}} {#lsp-support}"
msgstr "# {{page.title}} {#lsp-support}"

msgid "# {{page.title}} {#runtime-concepts}"
msgstr ""

msgid "# {{page.title}} {#special-languages}"
msgstr ""

msgid "# {{page.title}} {#web-integration}"
msgstr "# {{page.title}} {#web-integration}"

msgid "# {{page.title}} {#xbase}"
msgstr ""

msgid "## A Short Introduction to MWE2 {#short-intro-to-mwe}"
msgstr ""

msgid "## An overview of the example projects"
msgstr "## サンプルプロジェクトの概要"

msgid ""
"## Auto Editing {#autoediting}\n"
"Xtext-based editors automatically assist the user by inserting/deleting certai"
"n text at typetime, e.g. inserting/removing closing single quotes, double quot"
"es, parenthesis, square brackets or curly braces when the user inserts/removes"
" the opening ones. Moreover, the auto-indentation functionality ensures the in"
"dentation-awareness of new lines: after hitting the `ENTER` key e.g. in a bloc"
"k enclosed by curly braces the cursor is automatically placed on the indented "
"position in the subsequent new line."
msgstr ""

msgid "## Building an Xtext language with Maven and Tycho {#tycho-build}"
msgstr "## MavenとTychoを使ったXtext言語のビルド {#tycho-build}"

msgid "## Case Insensitive Languages {#case-insensitive-languages}"
msgstr ""

msgid "## Character Encoding {#encoding}"
msgstr ""

msgid "## Code Generation {#code-generation}"
msgstr ""

msgid "## Code Mining"
msgstr ""

msgid "## Content Assist {#content-assist}"
msgstr ""

msgid "## Create A New Xtext Project"
msgstr "## 新規Xtextプロジェクトの作成"

msgid "## Creating Custom Validation Rules {#tutorial-validation}"
msgstr ""

msgid "## Dependency Injection {#dependency-injection}"
msgstr ""

msgid "## EMF Code Generation {#emf-codegen}"
msgstr ""

msgid "## Ecore Model Inference {#metamodel-inference}"
msgstr ""

msgid "## File Wizard"
msgstr ""

msgid ""
"## Find References {#findreferences}\n"
"Xtext-based editors are able to locate all references in the entire workspace "
"where a certain element is referred to. Invoking the `Find References` context"
" menu or using the keyboard shortcut `Ctlr+Shift+G` (`Cmd+Shift+G` on Mac) on "
"the selected element lists all the references in the `Search` view."
msgstr ""

msgid "## Folding {#folding}"
msgstr ""

msgid "## Formatting {#formatting}"
msgstr ""

msgid "## Generate Language Artifacts"
msgstr "## 言語アーティファクトの生成"

msgid "## Getting Started {#getting-started}"
msgstr "## はじめよう {#getting-started}"

msgid "## Grammar Mixins {#grammar-mixins}"
msgstr ""

msgid ""
"## Hovering {#hovering}\n"
"Similar to [hyperlinking](#hyperlinking), Xtext-based editors provide hovering"
" support on certain tokens: e.g. hovering over a cross-reference token, the Xt"
"ext framework shows the documentation of the element the cross-reference is re"
"ferring to. Considering the Xtext Simple Arithmetics example, when hovering ov"
"er a function call, a popup window displays the documentation of the called fu"
"nction:"
msgstr ""

msgid "## Hyperlinking {#hyperlinking}"
msgstr ""

msgid "## Inferring a JVM Model {#xbase-inferred-type}"
msgstr ""

msgid "## Integration in Standard Maven Builds {#standalone-build}"
msgstr "## 標準的なMavenビルドへの統合 {#standalone-build}"

msgid "## Integration with GMF Editors {#gmf-integration}"
msgstr ""

msgid "## Label Provider {#label-provider}"
msgstr ""

msgid "## Language Features {#language-features}"
msgstr "## 言語機能 {#language-features}"

msgid "## Languages Independent of JDT {#java-independent-languages}"
msgstr ""

msgid "## Linking {#linking}"
msgstr ""

msgid "## Logging"
msgstr ""

msgid ""
"## Mark Occurrences {#maroccurrences}\n"
"Xtext-based editors are able to highlight all occurrences of a certain element"
" in the opened DSL file. Once the user selects an element while the `Toggle Ma"
"rk Occurrences` button is enabled, all occurrences are highlighted with corres"
"ponding markers on the right side of the editor."
msgstr ""

msgid "## Maven Tycho Hints"
msgstr "### Maven Tychoヒント"

msgid "## Model, Ecore Model, and Ecore {#model-metamodel}"
msgstr ""

msgid "## Outline View {#outline}"
msgstr ""

msgid "## Parsing Expressions with Xtext {#expressions}"
msgstr ""

msgid "## Project Wizard {#projectwizard}"
msgstr ""

msgid "## Quick Fixes {#quick-fixes}"
msgstr ""

msgid "## Referencing From EMF {#fragment-provider}"
msgstr ""

msgid "## Referring to Java Elements using JVM Types {#jvmtypes}"
msgstr ""

msgid "## Referring to Java Types Using Xbase {#xbase-java-references}"
msgstr ""

msgid "## Rename Refactoring {#refactoring}"
msgstr ""

msgid "## Run the Generated Eclipse Plug-in {#run-generated-plugin}"
msgstr "## 生成されたEclipseプラグインの実行 {#run-generated-plugin}"

msgid "## Scoping {#scoping}"
msgstr ""

msgid "## Second Iteration: Adding Packages and Imports {#add-imports}"
msgstr "## 第2イテレーション: パッケージの追加とインポート {#add-imports}"

msgid "## Serialization {#serialization}"
msgstr ""

msgid "## Step Five : Try the Editor! {#domain-model-step5}"
msgstr ""

msgid "## Step Four: Define the Mapping to JVM Concepts {#domain-model-step4}"
msgstr ""

msgid "## Step One: Create A New Xtext Project {#domain-model-step1}"
msgstr ""

msgid "## Step Three: Generate Language Artifacts {#domain-model-step3}"
msgstr ""

msgid "## Step Two: Write the Grammar {#domain-model-step2}"
msgstr ""

msgid "## Syntax Coloring {#highlighting}"
msgstr ""

msgid "## Template Proposals {#templates}"
msgstr ""

msgid "## The Client {#client}"
msgstr "## クライアント {#client}"

msgid "## The Language Generator {#generator}"
msgstr ""

msgid "## The Server {#server}"
msgstr "## サーバー {#server}"

msgid "## The Syntax {#syntax}"
msgstr "## 構文 {#syntax}"

msgid "## UI Testing {#ui-testing}"
msgstr ""

msgid ""
"## Unit Testing\n"
"Automated tests are crucial for the maintainability and the quality of a softw"
"are product. That is why it is strongly recommended to write unit tests for yo"
"ur language server, too. Xtext provides the [org.eclipse.xtext.testing.Abstrac"
"tLanguageServerTest]({{site.src.xtext_core}}/org.eclipse.xtext.testing/src/org"
"/eclipse/xtext/testing/AbstractLanguageServerTest.xtend) base class that comes"
" in handy when implementing automated LSP unit tests. The [org.eclipse.xtext.i"
"de.tests.server]({{site.src.xtext_core}}/org.eclipse.xtext.ide.tests/src/org/e"
"clipse/xtext/ide/tests/server) package contains JUnit test cases for almost al"
"l supported [language features](#language-features). Feel free to study them t"
"o get some inspirations on how to implement automated unit tests for your Xtex"
"t-based language server."
msgstr ""
"## ユニットテスト\n"
"自動テストはソフトウエアの保守性と品質にとって重要です。そのため、あなたの言語サーバーに対してユニットテストを書くのを強く推奨します。Xtextは自動LSP"
"ユニットテストを実装する際に役に立つ抽象クラス[org.eclipse.xtext.testing.AbstractLanguageServerTest]("
"{{site.src.xtext_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testin"
"g/AbstractLanguageServerTest.xtend)を提供しています。[org.eclipse.xtext.ide.tests.serve"
"r]({{site.src.xtext_core}}/org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/i"
"de/tests/server)パッケージはおおよそすべての[言語機能](#language-features)をサポートするJUnitテストケースを含んで"
"います。Xtextベースの言語サーバーに自動ユニットテストを実装する方法についてのインスピレーションを得るため、それらを自由に研究してください。 "

msgid "## Unit Testing the Language {#tutorial-unit-tests}"
msgstr ""

msgid "## Unit Testing {#testing}"
msgstr ""

msgid "## Using Xbase Expressions {#xbase-expressions}"
msgstr ""

msgid "## Validation {#validation}"
msgstr ""

msgid "## Value Converter {#value-converter}"
msgstr ""

msgid "## Whitespace-Aware Languages {#whitespace-aware-languages}"
msgstr ""

msgid "## Write The Grammar"
msgstr "## 文法を書く"

msgid "## Writing a Code Generator With Xtend {#tutorial-code-generation}"
msgstr ""

msgid "## Xbase Language Reference {#xbase-language-ref-introduction}"
msgstr ""

msgid "## XtextResource Implementation {#xtext-resource}"
msgstr ""

msgid "### Associativity"
msgstr ""

msgid "### Automatic Validation"
msgstr ""

msgid "### Common Terminals {#common-terminals}"
msgstr ""

msgid "### Construction of an AST"
msgstr ""

msgid "### Content Assist {#content-assist}"
msgstr "### コンテンツアシスト {#content-assist}"

msgid "### Creating a Simple Test Class"
msgstr ""

msgid "### Cross Reference Template Variable Resolver"
msgstr ""

msgid "### Cross-Reference Serializer {#cross-reference-serializer}"
msgstr ""

msgid "### Custom Validation {#custom-validation}"
msgstr ""

msgid "### Customization Points"
msgstr ""

msgid "### Customizing"
msgstr ""

msgid "### Customizing Available Hyperlinks"
msgstr ""

msgid "### Data Type Rules {#datatype-rules}"
msgstr ""

msgid "### EPackage Declarations {#package-declarations}"
msgstr "### EPackage 宣言 {#package-declarations}"

msgid "### Encoding at Language Design Time"
msgstr ""

msgid "### Encoding at Language Runtime"
msgstr ""

msgid "### Encoding of an XtextResource"
msgstr ""

msgid "### Enum Literal Generation"
msgstr ""

msgid "### Enum Rules"
msgstr ""

msgid "### Enumeration Template Variable Resolver"
msgstr ""

msgid "### Error Conditions"
msgstr ""

msgid "### Expressions {#xbase-language-ref-expressions}"
msgstr ""

msgid "### Extension Methods {#xbase-language-ref-library-extension}"
msgstr ""

msgid "### Feature and Type Hierarchy Generation"
msgstr ""

msgid "### Filtering actions"
msgstr ""

msgid "### For hudson:"
msgstr "### hudson用設定:"

msgid "### Full List of Options {#options-reference}"
msgstr "### 全てのオプション {#options-reference}"

msgid "### Getting the Text Content {#getting-text-content}"
msgstr "### テキストコンテンツの取得 {#getting-text-content}"

msgid "### Global Scopes and Resource Descriptions {#global-scopes}"
msgstr ""

msgid ""
"### Grammar Annotations {#grammar-annotations}\n"
"Parser Rules can be annotated with several useful annotations. In the followin"
"g sections there is an overview. Please keep in mind that those annotations wi"
"ll only work on Parser Rules. You'll get an error if you try to use them on Te"
"rminal or Enum Rules."
msgstr ""

msgid "### Hidden Terminal Symbols {#hidden-terminals}"
msgstr ""

msgid "### Hover Information {#hover-info}"
msgstr "### ホバー {#hover-info}"

msgid "### IGenerator2"
msgstr ""

msgid "### Imported Namespace Aware Scoping {#namespace-imports}"
msgstr ""

msgid "### Importing Existing Metamodels {#importing-metamodels}"
msgstr ""

msgid "### Influencing the outline structure"
msgstr ""

msgid "### Invoking Services"
msgstr "### サービスの実行"

msgid "### JavaScript API"
msgstr "### JavaScript API"

msgid "### Label Providers For EObjects {#eobject-label-provider}"
msgstr ""

msgid "### Label Providers For Index Entries {#description-label-provider}"
msgstr ""

msgid "### Language Configuration {#language-configuration}"
msgstr ""

msgid "### Language Declaration"
msgstr "### 言語宣言"

msgid "### Lazy Linking {#lazy-linking}"
msgstr ""

msgid "### Lexical Highlighting"
msgstr ""

msgid "### Lexical Syntax {#xbase-language-ref-syntax}"
msgstr ""

msgid "### Linking and Indexing"
msgstr ""

msgid "### Local Scoping {#local-scoping}"
msgstr ""

msgid "### Location Provider {#location-provider}"
msgstr ""

msgid "### Making Your Grammar Refer To Xbase"
msgstr ""

msgid "### Mark Occurrences {#mark-occurrences}"
msgstr "### 強調表示 {#mark-occurrences}"

msgid "### Merge White Space {#hidden-token-merger}"
msgstr ""

msgid ""
"### Multi-Quickfixes\n"
"Xtext also provides a Quickfix API for the definition of multi-quickfixes. Its"
" implementation is similar to the quick fix above, but you need to call `accep"
"tor.acceptMulti()` instead of `acceptor.accept()`.\n"
"```java\n"
"@Fix(IssueCodes.INVALID_FEATURE_NAME)\n"
"public void fixFeatureName(Issue issue,\n"
"                           IssueResolutionAcceptor acceptor) {\n"
"  acceptor.acceptMulti(issue,\n"
"    \"Uncapitalize name\", // label\n"
"    \"Uncapitalize name\", // description\n"
"    \"upcase.png\", // icon\n"
"    (EObject element) -> ((Feature) element).setName(Strings.toFirstLower(issu"
"e.getData()[0])));\n"
"}\n"
"```\n"
"In such cases, you can select all the `Invalid Feature Name` warnings on the P"
"roblems view and use the Quick Fix dialog (either via the context menu or the "
"keyboard shortcut `Ctrl + 1`) to convert all uppercase feature names into lowe"
"rcase at once in a single quickfix action."
msgstr ""

msgid "### Obtaining an Injector"
msgstr ""

msgid "### Operation Modes"
msgstr "### オペレーションモード"

msgid "### Options"
msgstr "### Options"

msgid "### Options {#save-options}"
msgstr ""

msgid "### Other General Configuration"
msgstr ""

msgid "### Output Configurations"
msgstr ""

msgid "### Parse Tree Constructor {#parse-tree-constructor}"
msgstr ""

msgid "### Parser Rules {#parser-rules}"
msgstr ""

msgid "### Persistence {#persistence}"
msgstr "### 永続化 {#persistence}"

msgid "### Preserving Comments from the Node Model {#comment-associater}"
msgstr ""

msgid "### Project Configuration {#project-configuration}"
msgstr ""

msgid "### Quick Fixes for Linking Errors and Syntax Errors"
msgstr ""

msgid "### Quick Outline {#quick-outline}"
msgstr ""

msgid "### Rename Participants"
msgstr ""

msgid "### Roles of the Semantic Model and the Node Model During Serialization"
msgstr ""

msgid "### Semantic Highlighting"
msgstr ""

msgid "### Semantic Highlighting {#semantic-highlighting}"
msgstr "### セマンティックハイライト {#semantic-highlighting}"

msgid "### Sorting actions"
msgstr ""

msgid ""
"### Stage 1: Make GMF Read and Write the Semantic Model As Text {#gmf-integrat"
"ion-stage1}"
msgstr ""

msgid ""
"### Stage 2: Calling the Xtext Parser to Parse GMF Labels {#gmf-integration-st"
"age2}"
msgstr ""

msgid "### Stage 3: A Popup Xtext Editor (experimental) {#gmf-integration-stage3}"
msgstr ""

msgid "### Styling the outline"
msgstr ""

msgid "### Syntax Highlighting {#syntax-highlighting}"
msgstr "### シンタックスハイライト {#syntax-highlighting}"

msgid "### Terminal Rules {#terminal-rules}"
msgstr "### 終端ルール {#terminal-rules}"

msgid "### Testing Multiple Languages"
msgstr ""

msgid "### Testing the Parser"
msgstr ""

msgid "### Testing the Validator {#test-validators}"
msgstr ""

msgid "### The Contract {#serialization-contract}"
msgstr ""

msgid "### The Module API {#guicemodules}"
msgstr ""

msgid "### The core language project (my.mavenized.herolanguage)"
msgstr "### コア言語プロジェクト (my.mavenized.herolanguage)"

msgid "### The feature project (my.mavenized.herolanguage.sdk)"
msgstr "### フィーチャープロジェクト (my.mavenized.herolanguage.sdk)"

msgid "### The parent project (my.mavenized.herolanguage.parent)"
msgstr "### 親プロジェクト (my.mavenized.herolanguage.parent)"

msgid "### The tests language project (my.mavenized.herolanguage.tests)"
msgstr "### 言語プロジェクトのテスト (my.mavenized.herolanguage.tests)"

msgid "### The ui language project (my.mavenized.herolanguage.ui)"
msgstr "### UI言語プロジェクト (my.mavenized.herolanguage.ui)"

msgid "### The update site project (my.mavenized.herolanguage.updatesite)"
msgstr "### アップデートサイトプロジェクト (my.mavenized.herolanguage.updatesite)"

msgid "### Token Stream {#token-stream}"
msgstr ""

msgid "### Transient Values {#transient-values}"
msgstr ""

msgid "### Type and Package Generation"
msgstr ""

msgid "### Types {#xbase-language-ref-types}"
msgstr ""

msgid "### Unassigned Text {#unassigned-text}"
msgstr ""

msgid "### Using the Xbase Interpreter"
msgstr ""

msgid "#### Ace"
msgstr "#### Ace"

msgid "#### Arrays {#xbase-types-arrays}"
msgstr ""

msgid "#### Assignments {#xbase-expressions-property-assignment}"
msgstr ""

msgid "#### Basic For Loop {#xbase-expressions-basic-for-loop}"
msgstr ""

msgid "#### Blocks {#xbase-expressions-blocks}"
msgstr ""

msgid "#### Builder Syntax {#xbase-language-ref-builder-syntax}"
msgstr ""

msgid "#### CodeMirror"
msgstr "#### CodeMirror"

msgid "#### Comments {#xbase-syntax-comments}"
msgstr ""

msgid "#### Common Super Type {#xbase-types-common-super-type}"
msgstr ""

msgid "#### Conformance and Conversion {#xbase-types-conformance-rules}"
msgstr ""

msgid "#### Constructor Call {#xbase-expressions-constructor-call}"
msgstr ""

msgid "#### DefaultEObjectLabelProvider {#default-eobject-label-provider}"
msgstr ""

msgid "#### Do-While Loop {#xbase-expressions-do-while-expression}"
msgstr ""

msgid "#### EOF &ndash; End Of File {#eof}"
msgstr ""

msgid "#### EPackage Generation"
msgstr "#### EPackage 生成"

msgid "#### EPackage Import {#epackage-import}"
msgstr "#### EPackage インポート {#epackage-import}"

msgid "#### Ecore Model Aliases for EPackages"
msgstr "#### EPackageのためのEcoreモデル エイリアス"

msgid "#### Examples"
msgstr ""

msgid ""
"#### Exported\n"
"As a default all elements that have a name that are exposed through the index "
"to be referenced from outside. As a start this might fit your needs, but soone"
"r or later you might run out of memory (big index) or you simply want to hide "
"elements from the outside world. To do that you can write a custom version of "
"the [IDefaultResourceDescriptionStrategy]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/resource/IDefaultResourceDescriptionStrategy.java)"
" or simply use the `@Exported` annotation. This will generate a custom strateg"
"y as soon as there is at least one `@Exported` annotation in your grammar."
msgstr ""

msgid "#### Extended Backus-Naur Form Expressions"
msgstr ""

msgid "#### Feature Calls {#xbase-expressions-feature-calls}"
msgstr ""

msgid "#### For Loop {#xbase-expressions-for-loop}"
msgstr ""

msgid "#### Function Types {#xbase-types-function-types}"
msgstr ""

msgid "#### Global Scopes Based On External Configuration {#index-based}"
msgstr ""

msgid "#### Identifiers {#xbase-syntax-identifiers}"
msgstr ""

msgid "#### If Expression {#xbase-expressions-if-expression}"
msgstr ""

msgid "#### Implicit variables 'this' and 'it' {#xbase-expressions-implicit-this}"
msgstr ""

msgid "#### Importing Namespaces"
msgstr ""

msgid "#### Infix Operators / Operator Overloading {#xbase-expressions-operators}"
msgstr ""

msgid "#### Lambda Expressions {#xbase-expressions-lambda}"
msgstr ""

msgid "#### Lexer/Parser: Syntactical Validation {#syntactical-validation}"
msgstr ""

msgid "#### Linker: Cross-reference Validation {#linking-validation}"
msgstr ""

msgid "#### Literals {#xbase-expressions-literals}"
msgstr ""

msgid "#### Loading text from the server"
msgstr "### サーバーからテキストをロードする"

msgid "#### Orion"
msgstr "#### Orion"

msgid ""
"#### Override\n"
"Sometimes you want to override an existing Parser Rule of a given super gramma"
"r to customize it. To do that, you have to create a rule with the same name. I"
"t's clear for you that this is a customization, but for the reader of the gram"
"mar it's not. To make that more explicit `@Override` marks a rule as being a c"
"ustomization of an already existing rule in a super grammar. You'll get a warn"
"ing if a rule is a customization and is not marked as Override and an error if"
" it's not an customization and therefore must not be marked as Override.\n"
"#### Final\n"
"Overriding Parser Rules is a common thing but if you want to make sure that no"
"body overrides a special rule the `@Final` annotation gives support for that.\n"
"#### Deprecated\n"
"Language evolution is an important part of building serious DSLs. Adding somet"
"hing to a grammar is easy as long as the old instances of the grammar are stil"
"l valid to the new grammar. It becomes hard if you want to remove something an"
"d you have to be very careful. Marking classes as deprecated is a good indicat"
"or for users to switch to the new API. With `@Deprecated` Xtext has support to"
" mark Parser Rules to be deprecated. \n"
"This will generate validations and the possibility to change the severity thro"
"ugh preferences. As a default users will get a warning when using these rules."
" Of course it's up to you to decide what the severity should be - this opens t"
"he possibility to safely remove parts of the grammar by informing in advance w"
"ith a warning and raise the severity to error afterwards."
msgstr ""

msgid "#### Parameterized Type References {#xbase-types-parameterized-type-reference}"
msgstr ""

msgid "#### Primitives {#xbase-types-primitives}"
msgstr ""

msgid "#### Providing text through JavaScript"
msgstr "### JavaScriptを通じたテキストの提供"

msgid "#### Reserved Keywords {#xbase-syntax-keywords}"
msgstr ""

msgid "#### Resource and EObject Descriptions {#resource-descriptions}"
msgstr ""

msgid "#### Return Expression {#xbase-expressions-return}"
msgstr ""

msgid "#### Return Types"
msgstr ""

msgid "#### Runtime Setup {#runtime-setup}"
msgstr ""

msgid "#### Serializer: Concrete Syntax Validation {#concrete-syntax-validation}"
msgstr ""

msgid "#### Setup within Eclipse-Equinox (OSGi) {#equinox-setup}"
msgstr ""

msgid "#### Simple Type References {#xbase-types-type-references}"
msgstr ""

msgid "#### Stateful mode"
msgstr "### ステートフルモード"

msgid "#### Stateless mode"
msgstr "#### ステートレスモード"

msgid "#### Switch Expression {#xbase-expressions-switch-expression}"
msgstr ""

msgid "#### Synchronized {#xbase-expressions-synchronized}"
msgstr ""

msgid "#### Syntactic Predicates {#syntactic-predicates}"
msgstr ""

msgid "#### Terminal Fragments {#terminal-fragment}"
msgstr ""

msgid "#### Throwing Exceptions {#xbase-expressions-throw}"
msgstr ""

msgid "#### Try, Catch, Finally {#xbase-expressions-try-catch}"
msgstr ""

msgid "#### Type Casts {#xbase-expressions-type-casts}"
msgstr ""

msgid "#### Variable Declarations {#xbase-expressions-variable-declaration}"
msgstr ""

msgid "#### While Loop {#xbase-expressions-while-expression}"
msgstr ""

msgid "#### White Space {#xbase-syntax-whitespace}"
msgstr ""

msgid "#### `xtext.createEditor(options)`"
msgstr "#### `xtext.createEditor(options)`"

msgid "#### `xtext.createServices(editor, options)`"
msgstr "#### `xtext.createServices(editor, options)`"

msgid "#### `xtext.removeServices(editor)`"
msgstr "#### `xtext.removeServices(editor)`"

msgid "##### About the Index, Containers and Their Manager {#containers}"
msgstr ""

msgid "##### Alternatives {#alternatives}"
msgstr ""

msgid "##### Assigned Actions {#grammar-actions}"
msgstr ""

msgid "##### Assignment Operators"
msgstr ""

msgid "##### Assignments {#assignments}"
msgstr ""

msgid "##### Boolean Literals {#xbase-expressions-boolean-literal}"
msgstr ""

msgid "##### Character Ranges"
msgstr ""

msgid "##### Cross-References {#cross-references}"
msgstr ""

msgid "##### Eclipse Project-Based Containers {#project-based-containers}"
msgstr ""

msgid "##### Escaped Identifiers {#xbase-syntax-escaped-identifiers}"
msgstr ""

msgid "##### Examples"
msgstr ""

msgid "##### Fall Through"
msgstr ""

msgid "##### First Token Set Predicates"
msgstr ""

msgid "##### Function Mapping {#xbase-expressions-function-mapping}"
msgstr ""

msgid "##### Groups {#groups}"
msgstr ""

msgid "##### Implicit Parameter *it* {#xbase-expressions-implicit-parameter}"
msgstr ""

msgid "##### JDT-Based Container Manager {#jdt-based-containers}"
msgstr ""

msgid "##### Keywords / Characters {#keywords}"
msgstr ""

msgid "##### Negated Token {#negated-tokens}"
msgstr ""

msgid "##### Null Literal {#xbase-expressions-null-literal}"
msgstr ""

msgid "##### Null-Safe Feature Call {#xbase-expressions-null-safe-feature-calls}"
msgstr ""

msgid "##### Number Literals {#xbase-expressions-number-literal}"
msgstr ""

msgid "##### Postfix Operators"
msgstr ""

msgid "##### Property Access {#xbase-expressions-property-access}"
msgstr ""

msgid "##### Refering the current function {#xbase-lambda-self}"
msgstr ""

msgid "##### ResourceSet-Based Containers {#resource-set-containers}"
msgstr ""

msgid "##### Rule Calls {#rule-calls}"
msgstr ""

msgid "##### Short-Circuit Boolean Operators"
msgstr ""

msgid "##### Simple Actions"
msgstr ""

msgid "##### Static Feature Calls {#xbase-expressions-static-feature-calls}"
msgstr ""

msgid "##### String Literals {#xbase-expressions-string-literal}"
msgstr ""

msgid "##### Syntax"
msgstr ""

msgid "##### Type Literals {#xbase-expressions-type-literal}"
msgstr ""

msgid "##### Type guards"
msgstr ""

msgid "##### Typing"
msgstr ""

msgid "##### Typing {#xbase-expressions-if-type-inference}"
msgstr ""

msgid "##### Typing {#xbase-expressions-lambda-type-inference}"
msgstr ""

msgid "##### Unassigned Rule Calls"
msgstr ""

msgid "##### Unordered Groups {#unordered-groups}"
msgstr ""

msgid "##### Until Token"
msgstr ""

msgid "##### Wildcard"
msgstr ""

msgid "##### With Operator"
msgstr ""

msgid "'`)."
msgstr ""

msgid "*"
msgstr ""

msgid ""
"*\t[AbstractAutoEditTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.testi"
"ng/src/org/eclipse/xtext/ui/testing/AbstractAutoEditTest.java): base class for"
" testing the auto editing functionality\n"
"*\t[AbstractCodeMiningTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.tes"
"ting/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java): base class"
" for testing the code mining capabilities\n"
"*\t[AbstractContentAssistTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui."
"testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java): base"
" class for testing the content assistant and template proposals\n"
"*\t[AbstractFoldingTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.testin"
"g/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java): base class for t"
"esting the folding capabilities\n"
"*\t[AbstractHighlightingTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.t"
"esting/src/org/eclipse/xtext/ui/testing/AbstractHighlightingTest.java): base c"
"lass for testing the syntactical and semantic coloring\n"
"*\t[AbstractHoverTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.testing/"
"src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java): base class for testi"
"ng the hovering functionality\n"
"*\t[AbstractHyperlinkingTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.t"
"esting/src/org/eclipse/xtext/ui/testing/AbstractHyperlinkingTest.java): base c"
"lass for testing the hyperlinking functionality\n"
"*\t[AbstractMultiQuickfixTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui."
"testing/src/org/eclipse/xtext/ui/testing/AbstractMultiQuickfixTest.java): base"
" class for testing the multi quick fixes\n"
"*\t[AbstractOutlineTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.testin"
"g/src/org/eclipse/xtext/ui/testing/AbstractOutlineTest.java): base class for t"
"esting the structure of the outline view\n"
"*\t[AbstractQuickfixTest]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.testi"
"ng/src/org/eclipse/xtext/ui/testing/AbstractQuickfixTest.java): base class for"
" testing the quick fixes\n"
"*\t..."
msgstr ""

msgid ""
"*   **Formatting.** Default: `false`. If enabled, it is the [formatters](#form"
"atting) job to determine all white space information during serialization. If "
"disabled, the formatter only defines white space information for the places in"
" which no white space information can be preserved from the node model. E.g. W"
"hen new model elements are inserted or there is no node model.\n"
"*   **Validating.** Default: `true`: Run the [concrete syntax validator](#conc"
"rete-syntax-validation) before serializing the model."
msgstr ""

msgid ""
"*   A Java interface and a Java class for each EClassifier in your Ecore model"
". By default, all classes will implement the interface [EObject]({{site.src.em"
"f}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java), lin"
"king a lot of runtime functionality. \n"
"*   A Java bean property for each EStructuralFeature (member variable, accesso"
"r methods).\n"
"*   A package interface and class, holding singleton objects for all elements "
"of your Ecore model, allowing reflection. EPackages are also registered to the"
" [Registry]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf"
"/ecore/EPackage.java) to be usable at runtime.\n"
"*   A factory interface and class for creating instances.\n"
"*   An abstract switch class implementing a visitor pattern to avoid if-instan"
"ceof-cascades in your code."
msgstr ""

msgid ""
"*   A model element can not be consumed. This can have the following reasons/s"
"olutions:\n"
"    *   The model element should not be stored in the model.\n"
"    *   The grammar needs an assignment which would consume the model element."
"\n"
"    *   The [transient value service](#transient-values) can be used to indica"
"te that this model element should not be consumed.\n"
"*   An assignment in the grammar has no corresponding model element. The defau"
"lt transient value service considers a model element to be transient if it is "
"*unset* or *equals* its default value. However, the parse tree constructor may"
" serialize default values if this is required by a grammar constraint to be ab"
"le to serialize another model element. The following solution may help to solv"
"e such a scenario:\n"
"    *   A model element should be added to the model.\n"
"    *   The assignment in the grammar should be made optional.\n"
"*   The type of the model element differs from the type in the grammar. The ty"
"pe of the model element must be identical to the return type of the grammar ru"
"le or the action's type. Subtypes are not allowed.\n"
"*   [Value conversion](#value-converter) fails. The value converter can indica"
"te that a value is not serializable by throwing a [ValueConverterException]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/Value"
"ConverterException.java).\n"
"*   An enum literal is not allowed at this position. This can happen if the re"
"ferenced enum rule only lists a subset of the literals of the actual enumerati"
"on."
msgstr ""

msgid ""
"*   An EAttribute or EReference has two different types or different cardinali"
"ties.\n"
"*   There is an EAttribute and an EReference with the same name in the same EC"
"lass.\n"
"*   There is a cycle in the type hierarchy.\n"
"*   A new EAttribute, EReference or super type is added to an imported type.\n"
"*   An EClass is added to an imported EPackage.\n"
"*   An undeclared alias is used.\n"
"*   An imported Ecore model cannot be loaded."
msgstr ""

msgid ""
"*   An abstract proposal provider class named `Abstract{MyLang}ProposalProvide"
"r` generated into the *src-gen* folder within the *ui* project, and\n"
"*   a concrete subclass in the *src*-folder of the *ui* project called `{MyLan"
"g}ProposalProvider`"
msgstr ""

msgid ""
"*   Apply and revert the declaration change on the semantic model (methods `ap"
"plyDeclarationChange` and `revertDeclarationChange`). The default is to look f"
"or an [EAttribute]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/ecli"
"pse/emf/ecore/EAttribute.java) `name` on the target object and set its value u"
"sing EMFs reflective API.\n"
"*   Create the LTK [Change]({{site.javadoc.eclipse-platform}}/org/eclipse/ltk/"
"core/refactoring/Change.html) objects of the declaration change. These changes"
" will be aggregated, checked for overlaps, presented to you in the preview and"
" finally executed if you apply the refactoring. The default is to use the [ILo"
"cationInFileProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclips"
"e/xtext/resource/ILocationInFileProvider.java) to locate the text range repres"
"enting the name and create a [ReplaceEdit]({{site.javadoc.eclipse-platform}}/o"
"rg/eclipse/text/edits/ReplaceEdit.html) for it."
msgstr ""

msgid ""
"*   Grammar rules containing assigned actions (e.g. `{MyType.myFeature=current"
"}`) are ignored. Unassigned actions (e.g. `{MyType}`), however, are supported."
"\n"
"*   Grammar rules that delegate to one or more rules containing assigned actio"
"ns via unassigned rule calls are ignored.\n"
"*   Orders within list-features cannot be validated. e.g. `Rule: (foo+=R1 foo+"
"=R2)*` implies that *foo* is expected to contain instances of *R1* and *R2* in"
" an alternating order."
msgstr ""

msgid ""
"*   If there is a semantic token before a comment and in the same line, the co"
"mment is associated with this token's semantic object.\n"
"*   In all other cases, the comment is associated with the semantic object of "
"the next following object."
msgstr ""

msgid ""
"*   In case of an error, the parse tree constructor has found only dead ends b"
"ut no leaf. It cannot tell which dead end is actually erroneous. Therefore, th"
"e error message lists dead ends of the longest paths, a fragment of their seri"
"alization and the reason why the path could not be continued at this point. Th"
"e developer has to judge on his own which reason is the actual error.\n"
"*   For reasons of performance, it is critical that the parse tree constructor"
" takes the most promising branch first and detects wrong branches early. One w"
"ay to achieve this is to avoid having many rules which return the same type an"
"d which are called from within the same alternative in the grammar."
msgstr ""

msgid ""
"*   No checked exceptions\n"
"*   Everything is an expression, there are no statements\n"
"*   Lambda expressions\n"
"*   Type inference\n"
"*   Properties\n"
"*   Simple operator overloading\n"
"*   Powerful switch expressions"
msgstr ""

msgid ""
"*   Prefer optional rule calls (cardinality *?* or *\\**) to mandatory ones (ca"
"rdinality *+* or default), such that missing references will not obstruct seri"
"alization.\n"
"*   You should not use an Xtext-Editor on the same model instance as a self-sy"
"nchronizing other editor, e.g. a canonical GMF editor (see the [EMF integratio"
"n chapter](308_emf_integration.html#gmf-integration-stage1) for details). The "
"Xtext parser replaces re-parsed subtrees of the AST rather than modifying it, "
"so elements will become stale. As the Xtext editor continuously re-parses the "
"model on changes, this will happen rather often. It is safer to synchronize ed"
"itors more loosely, e.g. on file changes.\n"
"*   Implement an [IFragmentProvider](#fragment-provider) to make the XtextReso"
"urce return stable fragments for its contained elements, e.g. based on composi"
"te names rather than order of appearance.\n"
"*   Implement an [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/naming/IQualifiedNameProvider.java) and an [IScope"
"Provider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scop"
"ing/IScopeProvider.java) ([how-to](303_runtime_concepts.html#scoping)) to make"
" the names of all linkable elements in cross-references unique.\n"
"*   Provide an [IFormatter]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/"
"eclipse/xtext/formatting/IFormatter.java) ([how-to](303_runtime_concepts.html#"
"formatting)) to improve the readability of the generated textual models.\n"
"*   Register an [IReferableElementsUnloader]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/parser/antlr/IReferableElementsUnloader.java) t"
"o turn deleted/replaced model elements into EMF proxies. Design the rest of yo"
"ur application such that it does never keep references to [EObjects]({{site.sr"
"c.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) "
"or to cope with proxies. That will improve the stability of your application d"
"rastically.\n"
"*   Xtext will register an EMF [Factory]({{site.src.emf}}/plugins/org.eclipse."
"emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java), so resources with"
" the file extension you entered when generating the Xtext plug-ins will be aut"
"omatically loaded in an [XtextResource]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/resource/XtextResource.java) when you use EMF's [Res"
"ourceSet]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/e"
"core/resource/ResourceSet.java) API to load it."
msgstr ""

msgid ""
"*   The Tycho plug-in will pick up and use Eclipse plug-in specific configurat"
"ion data from the projects in order to build Eclipse conformant OSGi bundles, "
"features and an update site."
msgstr ""
"*   TychoプラグインはEclipseに適合するOSGIバンドル、フィーチャーとアップデートサイトをビルドするために、プロジェクトからEclipseプ"
"ラグイン固有の構成情報をピックアップし、使用します。"

msgid ""
"*   The Xtend compiler plug-in will generate the Java source code for any Xten"
"d files during the 'generate-sources' phase"
msgstr "*   Xtendコンパイラプラグインは'generate-sources'にて任意のXtendファイルに対するJavaソースコードを生成する"

msgid ""
"*   The resource to be processed\n"
"*   An instance of [IFileSystemAccess2]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/generator/IFileSystemAccess2.java)\n"
"*   An instance of [IGeneratorContext]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/generator/IGeneratorContext.java)"
msgstr ""

msgid ""
"*   You can use well-known and easy-to-use tools and techniques for manipulati"
"on, such as text editors, regular expressions, or stream editors.\n"
"*   You can use the same tools for version control as you use for source code."
" Comparing and merging is performed in a syntax the developer is familiar with"
".\n"
"*   It is impossible to break the model such that it cannot be reopened in the"
" editor again.\n"
"*   Models can be fixed using the same tools, even if they have become incompa"
"tible with a new version of the Ecore model."
msgstr ""

msgid ""
"*   [Function0\\<ReturnType\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.l"
"ib/src/org/eclipse/xtext/xbase/lib/Functions.java) for zero parameters,\n"
"*   [Function1\\<Param1Type, ReturnType\\>]({{site.src.xtext_lib}}/org.eclipse.x"
"text.xbase.lib/src/org/eclipse/xtext/xbase/lib/Functions.java) for one paramet"
"ers,\n"
"*   [Function2\\<Param1Type, Param2Type, ReturnType\\>]({{site.src.xtext_lib}}/o"
"rg.eclipse.xtext.xbase.lib/src/org/eclipse/xtext/xbase/lib/Functions.java) for"
" two parameters,\n"
"*   ... \n"
"*   [Function6\\<Param1Type, Param2Type, Param3Type, Param4Type, Param5Type, Pa"
"ram6Type, ReturnType\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src"
"/org/eclipse/xtext/xbase/lib/Functions.java) for six parameters,"
msgstr ""

msgid ""
"*   [Procedure0]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/ec"
"lipse/xtext/xbase/lib/Procedures.java) for zero parameters,\n"
"*   [Procedure1\\<Param1Type\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase."
"lib/src/org/eclipse/xtext/xbase/lib/Procedures.java) for one parameters,\n"
"*   [Procedure2\\<Param1Type, Param2Type\\>]({{site.src.xtext_lib}}/org.eclipse."
"xtext.xbase.lib/src/org/eclipse/xtext/xbase/lib/Procedures.java) for two param"
"eters,\n"
"*   ... \n"
"*   [Procedure6\\<Param1Type, Param2Type, Param3Type, Param4Type, Param5Type, P"
"aram6Type\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/eclips"
"e/xtext/xbase/lib/Procedures.java) for six parameters,"
msgstr ""

msgid ""
"*   `'Escapes : \\' '`\n"
"*   `\"Escapes : \\\" \"`"
msgstr ""

msgid ""
"*   `'Foo Bar Baz'`\n"
"*   `\"Foo Bar Baz\"`\n"
"*"
msgstr ""

msgid ""
"*   `=>Boolean // predicate without parameters`\n"
"*   `()=>String // provider of string`\n"
"*   `(String)=>boolean // One argument predicate`\n"
"*   `(Mutable)=>void // A procedure doing side effects only`\n"
"*   `(List<String>, Integer)=>String`"
msgstr ""

msgid ""
"*   `Foo`\n"
"*   `Foo42`\n"
"*   `FOO`\n"
"*   `_42`\n"
"*   `_foo`\n"
"*   `$$foo$$`\n"
"*   `^extends`"
msgstr ""

msgid ""
"*   `Map.Entry` is equivalent to `Map.Entry.class`\n"
"*   `typeof(StringBuilder)` yields `StringBuilder.class`"
msgstr ""

msgid ""
"*   `String`\n"
"*   `java.lang.String`\n"
"*   `List<?>`\n"
"*   `List<? extends Comparable<? extends FooBar>`\n"
"*   `List<? super MyLowerBound>`\n"
"*   `List<? extends =>Boolean>`"
msgstr ""

msgid ""
"*   `[ | \"foo\" ]   // lambda expression without parameters`\n"
"*   `[ String s | s.toUpperCase() ] // explicit argument type`\n"
"*   `[ a, b, c | a+b+c ] // inferred argument types`"
msgstr ""

msgid ""
"*   `foo`\n"
"*   `my.foo`\n"
"*   `my.foo(x)`\n"
"*   `oh.my.foo(bar)`"
msgstr ""

msgid ""
"*   `if (isFoo) this else that`\n"
"*   `if (isFoo) { this } else if (thatFoo) { that } else { other }`\n"
"*   `if (isFoo) this`"
msgstr ""

msgid ""
"*   `java.lang.String`\n"
"*   `String`"
msgstr ""

msgid ""
"*   `my.foo = 23`\n"
"*   `myList += 23`\n"
"*   `x > 23 && y < 23`\n"
"*   `x && y || z`\n"
"*   `1 + 3 * 5 * (- 23)`\n"
"*   `!(x)`\n"
"*   `my.foo = 23`\n"
"*   `my.foo = 23`"
msgstr ""

msgid ""
"*   `my.foo as MyType`\n"
"*   `(1 + 3 * 5 * (- 23)) as BigInteger`"
msgstr ""

msgid "*   `null`"
msgstr ""

msgid ""
"*   `true`\n"
"*   `false`"
msgstr ""

msgid "*   `typeof(Map$Entry)` yields `Map.Entry.class`"
msgstr ""

msgid ""
"*   a command, handlers and keybindings on both declarations and references,\n"
"*   in-place linked editing for the new name,\n"
"*   validation and preview,\n"
"*   renaming of declaration and all references even across language boundaries"
"."
msgstr ""

msgid ""
"*   a source folder of a Java project,\n"
"*   a referenced jar,\n"
"*   a class path entry of a referenced Java project, or\n"
"*   the exported packages of a required PDE plug-in."
msgstr ""

msgid ""
"*   preserves [existing white spaces](#hidden-token-merger) from the node mode"
"l.\n"
"*   preserves [existing comments](#comment-associater) from the node model.\n"
"*   preserves the representation of cross-references: If a cross-referenced ob"
"ject can be identified by multiple names (i.e. scoping returns multiple [IEObj"
"ectDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/resource/IEObjectDescription.java) for the same object), the serializer tri"
"es to keep the name that was used in the input file.\n"
"*   preserves the representation of values: For values handled by the [value c"
"onverter](#value-converter), the serializer checks whether the textual represe"
"ntation converted to a value equals the value from the semantic model. If that"
" is true, the textual representation is kept."
msgstr ""

msgid ""
"* Enable backtracking: Xtext allows to enable backtracking for the ANTLR parse"
"r generator. This is usually not recommended since it influences error message"
" strategies at runtime and shadows actually existing problems in the grammar.\n"
"* Syntactic predicates: The grammar language allows to guide the parser in cas"
"e of ambiguities. This mechanism is achieved by *syntactic predicates*. Since "
"they affect only a very small part of the grammar, syntactic predicates are th"
"e recommended approach to handle ANTLR error messages during the parser genera"
"tion."
msgstr ""

msgid ""
"* Entering a parser rule the set contains only the return type of the rule. \n"
"* Entering an element of an alternative the set is reset to the same state it "
"was in when entering the first option of the alternative.\n"
"* Leaving an alternative the set contains the union of all types at the end of"
" each of its paths.\n"
"* After an optional element, the set is reset to the same state it was before "
"entering it.\n"
"* After a non-optional unassigned rule call the set contains only the return t"
"ype of the called rule. An optional rule call does not modify the set. A rule "
"call is optional if its cardinality is `?` or `*`.\n"
"* After an action the set contains only the type of the action."
msgstr ""

msgid ""
"* The method Workflow.addBean(Object) provides a means to apply global side-ef"
"fects, which unfortunately is required sometimes. For instance, [StandaloneSet"
"up]({{site.src.mwe}}/plugins/org.eclipse.emf.mwe.utils/src/org/eclipse/emf/mwe"
"/utils/StandaloneSetup.java) can be used to initialize global EMF metadata suc"
"h as the [EPackage.Registry]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/sr"
"c/org/eclipse/emf/ecore/EPackage.java)."
msgstr ""

msgid ""
"* The method Workflow.addComponent(..) accepts instances of [IWorkflowComponen"
"t]({{site.src.mwe}}/plugins/org.eclipse.emf.mwe2.runtime/src/org/eclipse/emf/m"
"we2/runtime/workflow/IWorkflowComponent.java), which is the primary concept of"
" the workflow model of MWE2. The language generator component itself is an ins"
"tance of IWorkflowComponent and can therefore be used within MWE2 workflows."
msgstr ""

msgid ""
"* `enabled` &ndash; whether the subproject is present or not\n"
"* `name` &ndash; the name of the subproject\n"
"* `root` &ndash; the path to the root folder of the subproject\n"
"* `src` &ndash; the path to the folder for Java source files\n"
"* `srcGen` &ndash; the path to the folder for generated Java source files\n"
"* `manifest` &ndash; configuration for the MANIFEST.MF file\n"
"* `pluginXml` &ndash; configuration for the plugin.xml file"
msgstr ""

msgid ""
"* `encoding` &ndash; The character encoding\n"
"* `fileHeader` &ndash; The file header comment to insert at the beginning of e"
"ach file\n"
"* `preferXtendStubs` &ndash; Whether to prefer Xtend over Java for stub files "
"to be implemented manually; this option applies only to files in `src` folders"
", while for `src-gen` folders Java files are always generated."
msgstr ""

msgid ""
"* `name` &ndash; The name of the language exactly as specified in the first li"
"ne of your grammar definition\n"
"* `grammarUri` &ndash; A [URI]({{site.src.emf}}/plugins/org.eclipse.emf.common"
"/src/org/eclipse/emf/common/util/URI.java) pointing to the grammar definition "
"file; if omitted, the grammar file is assumed to be in the Java source folder "
"of the runtime project and to be named according to the language name.\n"
"* `fileExtensions` &ndash; A comma-separated list of file extensions for the l"
"anguage\n"
"* `referencedResources` &ndash; Additional resources to load (see [Importing E"
"xisting Metamodels](#importing-metamodels))"
msgstr ""

msgid ""
"* `runtime` &ndash; The basic language features: grammar definition, parser, s"
"erializer, scoping, validation, etc.\n"
"* `runtimeTest` &ndash; Unit tests for `runtime`\n"
"* `genericIde` &ndash; Platform-independent IDE features such as services for "
"content assist\n"
"* `eclipsePlugin` &ndash; Integration plug-in for Eclipse\n"
"* `eclipsePluginTest` &ndash; Unit tests for `eclipsePlugin`\n"
"* `web` &ndash; Integration into web applications"
msgstr ""

msgid ""
"* an [EAttribute]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclip"
"se/emf/ecore/EAttribute.java) in each current return type\n"
"  * of type [EBoolean]({{site.javadoc.java}}/java/lang/Boolean.html) for each "
"feature assignment using the `?=` operator. No further EReferences or EAttribu"
"tes are generated from such an assignment.\n"
"  * for each assignment with the `=` or `+=` operator calling a terminal rule "
"or data type rule. Its type is the return type of the called rule.\n"
"* an [EReference]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclip"
"se/emf/ecore/EReference.java) in each current return type\n"
"  * for each assignment with the `=` or `+=` operator in a parser rule calling"
" a parser rule. The type of the EReference is the return type of the called pa"
"rser rule.\n"
"  * for each assigned action. The type of the reference is the return type of "
"the current rule containing the action."
msgstr ""

msgid ""
"* an [EPackage]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse"
"/emf/ecore/EPackage.java)\n"
"  * for each `generate` declaration. The *name* of the EPackage is set to the "
"first parameter of such a declaration, its *nsURI* to the second parameter. An"
" optional alias as the third parameter allows to distinguish the generated EPa"
"ckages later. Only one generated package declaration per alias is allowed.\n"
"* an [EClass]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/e"
"mf/ecore/EClass.java)\n"
"  * for each return type of a parser rule. If a parser rule does not define a "
"return type, an implicit one with the same name as the rule itself is assumed."
" You can specify multiple rules that return the same type, but only one EClass"
" is generated for each type name.\n"
"  * for each type defined in an action or a cross-reference.\n"
"* an [EEnum]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/em"
"f/ecore/EEnum.java)\n"
"  * for each return type of an enum rule.\n"
"* an [EDataType]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclips"
"e/emf/ecore/EDataType.java)\n"
"  * for each return type of a terminal rule or a data type rule."
msgstr ""

msgid ""
"**Caveat:** The [ISetup]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecl"
"ipse/xtext/ISetup.java) class is intended to be used for runtime and for unit "
"testing, only. If you use it in an Equinox scenario, you will very likely brea"
"k the running application because entries to the global registries will be ove"
"rwritten."
msgstr ""

msgid ""
"**Step 1:** Create a new Xtext Project with language server support.\n"
"![Xtext project wizard](images/LSP_1_Xtext_Wizard.png)"
msgstr ""
"**Step 1:** 新しいXtextプロジェクトを言語サーバーサポートをつけて作成する。\n"
"![Xtext project wizard](../../documentation/images/LSP_1_Xtext_Wizard.png)"

msgid ""
"**Step 2:** Implement the Domainmodel language following the [Xtext - 15 Minut"
"es Tutorial](https://www.eclipse.org/Xtext/documentation/102_domainmodelwalkth"
"rough.html)."
msgstr ""
"**Step 2:** [Xtext - 15 Minutes Tutorial](https://www.eclipse.org/Xtext/docume"
"ntation/102_domainmodelwalkthrough.html)に従いドメインモデル言語を実装する。"

msgid ""
"**Step 3:** Try out the Domainmodel language server in Eclipse based on [LSP4E"
"](https://projects.eclipse.org/projects/technology.lsp4e)."
msgstr ""
"**Step 3:** [LSP4E](https://projects.eclipse.org/projects/technology.lsp4e)に基づ"
"き、Eclipseでドメインモデル言語サーバーを試す。"

msgid ""
"**Step 4:**  Feel free to implement further LSP clients to the Domainmodel lan"
"guage server based on Atom, Eclipse Che, Eclipse Theia, IntelliJ IDEA, Monaco "
"Editor, VS Code, ... The currenly supported LSP clients are available in the `"
"LSP clients` section of [https://langserver.org/](https://langserver.org/)."
msgstr ""
"**Step 4:** Atom、Eclipse Che、Eclipse Theia、IntelliJ IDEA、Monaco Editor、VS Code"
" ... に基づき、LSPクライアントを思うままに実装してください。現在サポートされているLSPクライアントは[https://langserver.org"
"/](https://langserver.org/)の`LSP Clinetns`節にて確認することができます。"

msgid ""
"**[Next Chapter: 15 Minutes Tutorial - Extended](103_domainmodelnextsteps.html"
")**"
msgstr "**[次章: 15分チュートリアル - 拡張](103_domainmodelnextsteps.html)**"

msgid "**[Next Chapter: Configuration](302_configuration.html)**"
msgstr "**[次章: コンフィギュレーション](302_configuration.html)**"

msgid "**[Next Chapter: Continuous Integration](350_continuous_integration.html)**"
msgstr "**[次章: 継続的インテグレーション](350_continuous_integration.html)**"

msgid "**[Next Chapter: Eclipse Support](310_eclipse_support.html)**"
msgstr ""

msgid ""
"**[Next Chapter: Five simple steps to your JVM language](104_jvmdomainmodel.ht"
"ml)**"
msgstr ""

msgid ""
"**[Next Chapter: Integration with EMF and Other EMF Editors](308_emf_integrati"
"on.html)**"
msgstr ""

msgid "**[Next Chapter: Integration with Java](305_xbase.html)**"
msgstr ""

msgid "**[Next Chapter: LSP Support](340_lsp_support.html)**"
msgstr "**[次章: LSPサポート](340_lsp_support.html)**"

msgid "**[Next Chapter: Language Implementation](303_runtime_concepts.html)**"
msgstr ""

msgid "**[Next Chapter: The Grammar Language](301_grammarlanguage.html)**"
msgstr ""

msgid ""
"**[Next Chapter: Typical Language Configurations](307_special_languages.html)*"
"*"
msgstr ""

msgid "**[Next Chapter: Web Editor Support](330_web_support.html)**"
msgstr ""

msgid "*File &rarr; New &rarr; Project... &rarr; Xtext &rarr; Xtext Project*"
msgstr ""

msgid "*File &rarr; New &rarr; Project... &rarr; Xtext &rarr; Xtext project*"
msgstr "*File &rarr; New &rarr; Project... &rarr; Xtext &rarr; Xtext project*"

msgid ""
"*Hint: Whenever you are in an \\*.mwe2 file and wonder what kind of configurati"
"on the underlying component may accept: Just use content assist (ctrl + space)"
" in the MWE2 Editor or navigate directly to the declaration of the underlying "
"Java implementation by means of F3 (Go To Declaration).*"
msgstr ""

msgid "*Run As &rarr; Generate Xtext Artifacts*."
msgstr "*Run As &rarr; Generate Xtext Artifacts*."

msgid ""
"*SimplePropertyPopupXtextEditorEditPartOverride* demonstrates how to spawn an "
"Xtext editor to edit a model element. The editor pops up in its control and sh"
"ows only the section of the selected element. It is a fully fledged Xtext edit"
"or, with support of validation, content assist and syntax highlighting. The ed"
"ited text is only transferred back to the model if it does not have any errors"
"."
msgstr ""

msgid ""
"- On Linux/Mac OS we recommend using [RVM](https://rvm.io/) to manage your Rub"
"y installations\n"
"- On Windows you will have to install the [development kit](https://github.com"
"/oneclick/rubyinstaller/wiki/Development-Kit)"
msgstr ""
"- Linux/Mac OSの場合、Rubyのインストール管理は[RVM](https://rvm.io/) を使用することを推奨しています。\n"
"- Windowsの場合、[development kit](https://github.com/oneclick/rubyinstaller/wiki/"
"Development-Kit)をインストールしてください。"

msgid "---"
msgstr "---"

msgid ""
"---\n"
"layout: documentation\n"
"title: 15 Minutes Tutorial\n"
"part: Getting Started\n"
"---"
msgstr ""
"---\n"
"layout: documentation\n"
"title: 15分チュートリアル\n"
"part: はじめよう\n"
"---"

msgid ""
"---\n"
"layout: documentation\n"
"title: 15 Minutes Tutorial - Extended\n"
"part: Getting Started\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: Configuration\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: Continuous Integration (with Maven)\n"
"part: Reference Documentation\n"
"upsite:\n"
"  eclipse: http://download.eclipse.org/\n"
"  xtext: http://download.eclipse.org/modeling/tmf/xtext/updates/\n"
"  emf: http://download.eclipse.org/modeling/emf/emf/updates/\n"
"  mwe: http://download.eclipse.org/modeling/emft/mwe/updates/\n"
"  xpand: http://download.eclipse.org/modeling/m2t/xpand/updates/\n"
"---"
msgstr ""
"---\n"
"layout: documentation\n"
"title: 継続的インテグレーション (with Maven)\n"
"part: Reference Documentation\n"
"upsite:\n"
"  eclipse: http://download.eclipse.org/\n"
"  xtext: http://download.eclipse.org/modeling/tmf/xtext/updates/\n"
"  emf: http://download.eclipse.org/modeling/emf/emf/updates/\n"
"  mwe: http://download.eclipse.org/modeling/emft/mwe/updates/\n"
"  xpand: http://download.eclipse.org/modeling/m2t/xpand/updates/\n"
"---"

msgid ""
"---\n"
"layout: documentation\n"
"title: Eclipse Support\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: Five simple steps to your JVM language\n"
"part: Getting Started\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: Integration with EMF\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: Integration with Java\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: LSP Support\n"
"part: Reference Documentation\n"
"---"
msgstr ""
"---\n"
"layout: documentation\n"
"title: LSPサポート\n"
"part: リファレンスドキュメント\n"
"---"

msgid ""
"---\n"
"layout: documentation\n"
"title: Language Implementation\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: The Grammar Language\n"
"part: Reference Documentation\n"
"---"
msgstr ""
"---\n"
"layout: documentation\n"
"title: 文法言語\n"
"part: リファレンスドキュメント\n"
"---"

msgid ""
"---\n"
"layout: documentation\n"
"title: Typical Language Configurations\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: documentation\n"
"title: Web Editor Support\n"
"part: Reference Documentation\n"
"---"
msgstr ""
"---\n"
"layout: documentation\n"
"title: Webエディターサポート\n"
"part: リファレンスドキュメント\n"
"---"

msgid ""
"...\n"
"public Object evaluate(XExpression expression, Object thisElement) {\n"
"  IEvaluationContext evaluationContext = contextProvider.get();\n"
"  // provide initial context and implicit variables\n"
"  evaluationContext.newValue(XbaseScopeProvider.THIS, thisElement);"
msgstr ""

msgid ""
"// @RunWith(XtextRunner.class) // JUnit 4\n"
"@ExtendWith(InjectionExtension.class) // JUnit 5\n"
"@InjectWith(MyLanguageWithDependenciesInjectorProvider.class)\n"
"public class YourTest {\n"
"    ...\n"
"}\n"
"```"
msgstr ""

msgid ""
"// overrides my.SuperGrammar.RuleB\n"
"@Override\n"
"RuleB: '[' name=ID ']';\n"
"```"
msgstr ""

msgid "1."
msgstr ""

msgid ""
"1.  A `PackageDeclaration` in turn looks pretty much as expected. It contains "
"a number of *Imports* and *AbstractElements*. Since *Imports* should be allowe"
"d for the root-Domainmodel, too, we add them as an alternative to the rule `Ab"
"stractElement`."
msgstr ""
"1.  `PackageDeclaration`は期待通りに見えます。これは、複数の *Imports* と *AbstractElements* を含みま"
"す。*Imports* もまたルートドメインモデルに含まれる必要があるため、`AbstractElement` のルールに追加します。"

msgid ""
"1.  Even though the template will compile the *Entities* without any complaint"
"s, it still lacks support for the Java properties that each of the declared fe"
"atures should yield. For that purpose, you have to create another Xtend functi"
"on that compiles a single feature to the respective Java code."
msgstr ""

msgid ""
"1.  First of all, you will have to filter the contents of the resource down to"
" the defined entities. Therefore we need to iterate a resource with all its de"
"eply nested elements. This can be achieved with the method `getAllContents()`."
" To use the resulting [TreeIterator]({{site.src.emf}}/plugins/org.eclipse.emf."
"common/src/org/eclipse/emf/common/util/TreeIterator.java) in a `for` loop, we "
"use the extension method `toIterable()` from the built-in library class [Itera"
"torExtensions]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/ecli"
"pse/xtext/xbase/lib/IteratorExtensions.java)."
msgstr ""

msgid ""
"1.  If the model element's [type]({{site.src.emf}}/plugins/org.eclipse.emf.eco"
"re/src/org/eclipse/emf/ecore/EClass.java) declares a feature *name* then retur"
"n the region of the corresponding token(s). As a fallback also check for a fea"
"ture *id*. \n"
"1.  If the model element's node model contains any top-level tokens correspond"
"ing to invocations of the rule *ID* in the grammar then return a region spanni"
"ng all those tokens.\n"
"1.  As a last resort return the region corresponding to the first keyword toke"
"n of the referenced model element."
msgstr ""

msgid ""
"1.  Lexing\n"
"1.  Parsing\n"
"1.  Linking\n"
"1.  Validation"
msgstr ""
"1.  字句解析\n"
"1.  パース\n"
"1.  リンク\n"
"1.  検証"

msgid ""
"1.  Now let's answer the question how we determine the file name of the Java c"
"lass that each *Entity* should yield. This information should be derived from "
"the qualified name of the *Entity* since Java enforces this pattern. The quali"
"fied name itself has to be obtained from a special service that is available f"
"or each language. Fortunately, Xtend allows to reuse that one easily. We simpl"
"y inject the [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse.xtex"
"t/src/org/eclipse/xtext/naming/IQualifiedNameProvider.java) into the generator"
"."
msgstr ""

msgid ""
"1.  Since a *Domainmodel* no longer contains types but also packages, the entr"
"y rule has to be modified. Furthermore, a common super type for *PackageDeclar"
"ations* and *Types* should be introduced: the *AbstractElement*."
msgstr ""
"1.  *Domainmodel* は型とパッケージは含まれているので、エントリールールを変更する必要があります。さらに、*PackageDeclarati"
"ons* と *Types* に対する上位の共通型(*AbstractElement*)も導入する必要があります。"

msgid "1.  The first rule in a grammar is always used as the start rule."
msgstr "1.  文法の最初のルールは常にスタートルールとして使用されます。"

msgid ""
"1.  The next step is to write the actual template code for an entity. For now,"
" the function `Entity.compile` does not exist, but it is easy to create it:"
msgstr ""

msgid ""
"1.  The rule *DataType* starts with a keyword `'datatype'`, followed by an ide"
"ntifier which is parsed by a rule called *ID*. The rule *ID* is defined in the"
" super grammar *org.eclipse.xtext.common.Terminals* and parses a single word, "
"a.k.a identifier. You can navigate to the declaration by using *F3* on the rul"
"e call. The value returned by the call to *ID* is assigned (`=`) to the featur"
"e `name`."
msgstr ""
"1.  *DataType* ルールは `'datatype'`キーワードから始まり、*ID* と呼ばれるルールによってパースされる識別子が続きます。*ID"
"* ルールは上位文法 *org.eclipse.xtext.common.Terminals* で定義され、一つの単語(識別子)をパースします。 ルールの呼"
"び出し箇所で *F3* を押すことで、宣言箇所にジャンプできます。*ID* の戻り値は 特性`name`に割り当てられます(`=`)。"

msgid ""
"1.  The rule *Entity* again starts with the definition of a keyword followed b"
"y a name."
msgstr "1.  *Entity* ルールもキーワードの定義から始まり、次に名前が続きます。"

msgid ""
"1.  The simple equal sign `=` is the straightforward assignment, and is used f"
"or features which take only one element.\n"
"1.  The `+=` sign (the add operator) expects a multi-valued feature and adds t"
"he value on the right hand side to that feature, which is a list feature.\n"
"1.  The `?=` sign (boolean assignment operator) expects a feature of type [EBo"
"olean]({{site.javadoc.java}}/java/lang/Boolean.html) and sets it to true if th"
"e right hand side was consumed, independently from the concrete value of the r"
"ight hand side."
msgstr ""

msgid ""
"1.  This small template is basically the first shot at a Java-Beans generator."
" However, it is currently rather incomplete and will fail if the *Entity* is n"
"ot contained in a package. A small modification fixes this. The `package` decl"
"aration has to be wrapped in an `IF` expression:"
msgstr ""

msgid ""
"1.  Types: only instances of *MyRule* and *MySubRule* are allowed for this rul"
"e. Subtypes are prohibited, since the parser never instantiates unknown subtyp"
"es.\n"
"1.  Features: In case the *MyRule* and *MySubRule* have [EStructuralFeatures]("
"{{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EStru"
"cturalFeature.java) besides *strVal* and *intVal*, only *strVal* and *intVal* "
"may have [non-transient values](#transient-values).\n"
"1.  Quantities: The following condition must be true: `strVal.size() == intVal"
".size()`.\n"
"1.  Values: It must be possible to [convert all values](#value-converter) to v"
"alid tokens for the used terminal rules *ID* and *INT*."
msgstr ""

msgid ""
"1.  Validating the semantic model. This is optional, enabled by default, done "
"by the [concrete syntax validator](#concrete-syntax-validation) and can be tur"
"ned off in the [save options](#save-options).\n"
"1.  Matching the model elements with the grammar rules and creating a stream o"
"f tokens. This is done by the [parse tree constructor](#parse-tree-constructor"
").\n"
"1.  Associating comments with semantic objects. This is done by the [comment a"
"ssociator](#comment-associater).\n"
"1.  Associating existing nodes from the node model with tokens from the token "
"stream.\n"
"1.  [Merging existing white space](#hidden-token-merger) and line-wraps into t"
"he token stream.\n"
"1.  Adding further needed white space or replacing all white space using a [fo"
"rmatter](#formatting)."
msgstr ""

msgid ""
"1.  [Groups](301_grammarlanguage.html#groups)\n"
"1.  [Alternatives](301_grammarlanguage.html#alternatives)\n"
"1.  [Keywords](301_grammarlanguage.html#keywords)\n"
"1.  [Rule Calls](301_grammarlanguage.html#rule-calls)"
msgstr ""

msgid ""
"1.  ```xtend\n"
"    def dispatch void infer(Entity element,\n"
"            IJvmDeclaredTypeAcceptor acceptor,\n"
"            boolean isPrelinkingPhase) {\n"
"    ```"
msgstr ""

msgid ""
"1.  `as`\n"
"1.  `case`\n"
"1.  `catch`\n"
"1.  `default`\n"
"1.  `do`\n"
"1.  `else`\n"
"1.  `extends`\n"
"1.  `extension`\n"
"1.  `false`\n"
"1.  `finally`\n"
"1.  `for`\n"
"1.  `if`\n"
"1.  `import`\n"
"1.  `instanceof`\n"
"1.  `new`\n"
"1.  `null`\n"
"1.  `return`\n"
"1.  `static`\n"
"1.  `super`\n"
"1.  `switch`\n"
"1.  `throw`\n"
"1.  `true`\n"
"1.  `try`\n"
"1.  `typeof`\n"
"1.  `val`\n"
"1.  `var`\n"
"1.  `while`"
msgstr ""

msgid ""
"1.  exactly one (the default, no operator)\n"
"1.  zero or one (operator `?`)\n"
"1.  zero or more (operator `*`)\n"
"1.  one or more (operator `+`)"
msgstr ""

msgid ""
"1.  for each rule (`{languageName}.{RuleName}`) and\n"
"1.  for each keyword (`{languageName}.kw_{keyword}`)."
msgstr ""

msgid ""
"1.  in the case of `||` the operand on the right hand side is not evaluated if"
" the left operand evaluates to `true`.\n"
"1.  in the case of `&&` the operand on the right hand side is not evaluated if"
" the left operand evaluates to `false`."
msgstr ""

msgid ""
"1. *Simple* Actions\n"
"1. *Assigned* Actions"
msgstr ""

msgid ""
"1. Declaration of a [cross-reference in the grammar](301_grammarlanguage.html#"
"cross-references) (or at least in the Ecore model)\n"
"1. Specification of linking semantics (usually provided via the [scoping API]("
"#scoping))"
msgstr ""

msgid ""
"1. The core of the test infrastructure is the [XtextRunner]({{site.src.xtext_c"
"ore}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/XtextRunner.java"
") (for JUnit 4) and the language-specific [IInjectorProvider]({{site.src.xtext"
"_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvi"
"der.java). Both have to be provided by means of class annotations. An example "
"test class should have already been generated by the Xtext code generator, nam"
"ed *org.example.domainmodel.tests.DomainmodelParsingTest*:"
msgstr ""

msgid ""
"1. The utility class [ParseHelper]({{site.src.xtext_core}}/org.eclipse.xtext.t"
"esting/src/org/eclipse/xtext/testing/util/ParseHelper.java) allows to parse an"
" arbitrary string into a *Domainmodel*. The model itself can be traversed and "
"checked afterwards. A static import of [Assert]({{site.javadoc.junit}}/org/jun"
"it/Assert.html) leads to concise and readable test cases. You can rewrite the "
"generated test case as follows:"
msgstr ""

msgid ""
"1. context sensitive and\n"
"1. allow to use of hidden tokens."
msgstr ""

msgid ""
"3. The [CompilationTestHelper]({{site.src.xtext_extras}}/org.eclipse.xtext.xba"
"se.testing/src/org/eclipse/xtext/xbase/testing/CompilationTestHelper.java) uti"
"lity class comes in handy while unit testing the custom generators:"
msgstr ""

msgid ""
"4. After saving the Xtend file, it is time to run the tests. Select *Run As &r"
"arr; JUnit Test* from the editor's context menu. All implemented test cases sh"
"ould succeed."
msgstr ""

msgid ""
"<table class=\"table table-bordered\">\n"
"\t<thead>\n"
"\t\t<tr>\n"
"\t\t\t<th><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#version_3_16_0\"> LSP 3.16.0 </a> (released on 202"
"0-12-14) <br> <a href=\"https://github.com/eclipse/lsp4j/blob/master/CHANGELOG."
"md#v0100-nov-2020\"> LSP4J 0.10.0 </a>(released on 2020-11-05)</th>\n"
"\t\t\t<th><a href=\"https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/"
"2020/12/01/version-2-24-0\"> Xtext 2.24.0 </a> <br> (released on 2020-12-01)</t"
"h>\n"
"\t\t</tr>\n"
"\t</thead>\n"
"\t<tbody>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#diagnostic\">Diagnostic</a> (aka Validation)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_completion\">Completion</a> (aka Cont"
"ent Assist)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#snippet_syntax\">Snippets</a> (aka Template Propos"
"als)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_hover\">Hover</a></td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_signatureHelp\">Signature Help</a></t"
"d>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_declaration\">Goto Declaration</a> (a"
"ka Hyperlinking)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_definition\">Goto Definition</a> (aka"
" Hyperlinking)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_typeDefinition\">Goto Type Defintion<"
"/a> (aka Hyperlinking)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_implementation\">Goto Implementation<"
"/a> (aka Hyperlinking)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_references\">Find References</a></td>"
"\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentHighlight\">Document Highligh"
"t</a> (aka Marking Occurrences)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentSymbol\">Document Symbols</a>"
" (aka Model Elements, Outline View)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_codeAction\">Code Action</a> (aka Qui"
"ckAssist, QuickFixes)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_codeLens\">Code Lens</a> (aka Code Mi"
"ning)</td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentLink\">Document Link</a> (aka"
" Hyperlinking)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentColor\">Document Color</a></t"
"d>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_formatting\">Document Formatting</a> "
"(aka Formatting)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_rangeFormatting\">Document Range Form"
"atting</a> (aka Formatting)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_onTypeFormatting\">Document on Type F"
"ormatting</a> (aka Auto Editing)</td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_rename\">Rename</a> (aka Rename Refac"
"toring)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_foldingRange\">Folding Range</a> (aka"
" Folding)</td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_selectionRange\">Selection Range</a> "
"(aka Double Click Text Selection)</td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_prepareCallHierarchy\">Call Hierarchy"
"</a> </td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_semanticTokens\">Semantic Tokens</a> "
"(aka Semantic Highlighting)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_linkedEditingRange\">Linked Editing R"
"ange</a> (aka Rename Refactoring)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t</tbody>\n"
"</table>"
msgstr ""
"<table class=\"table table-bordered\">\n"
"\t<thead>\n"
"\t\t<tr>\n"
"\t\t\t<th><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#version_3_16_0\"> LSP 3.16.0 </a> (released on 202"
"0-12-14) <br> <a href=\"https://github.com/eclipse/lsp4j/blob/master/CHANGELOG."
"md#v0100-nov-2020\"> LSP4J 0.10.0 </a>(released on 2020-11-05)</th>\n"
"\t\t\t<th><a href=\"https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/"
"2020/12/01/version-2-24-0\"> Xtext 2.24.0 </a> <br> (released on 2020-12-01)</t"
"h>\n"
"\t\t</tr>\n"
"\t</thead>\n"
"\t<tbody>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#diagnostic\">Diagnostic</a> (aka 検証)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_completion\">補完</a> (aka コンテントアシスト)</"
"td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#snippet_syntax\">スニペット</a> (aka テンプレート提案)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_hover\">ホバー</a></td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_signatureHelp\">署名補助</a></td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_declaration\">宣言へ移動</a> (aka ハイパーリンキン"
"グ)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_definition\">定義へ移動</a> (aka ハイパーリンキング"
")</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_typeDefinition\">型定義へ移動</a> (aka ハイパー"
"リンキング)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_implementation\">実装へ移動</a> (aka ハイパーリ"
"ンキング)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_references\">参照の検索</a></td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentHighlight\">ドキュメントハイライト</a> ("
"aka 強調表示)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentSymbol\">ドキュメントシンボル</a> (aka "
"モデル要素、アウトラインビュー)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_codeAction\">コードアクション</a> (aka クイックアシ"
"スト、クイックフィックス)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_codeLens\">コードレンス</a> (aka コードマイニング)<"
"/td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentLink\">ドキュメントリンク</a> (aka ハイパ"
"ーリンキング)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_documentColor\">ドキュメントカラー</a></td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_formatting\">ドキュメントフォーマッティング</a> (aka"
" フォーマッティング)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_rangeFormatting\">選択範囲のフォーマット</a> (ak"
"a フォーマッティング)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_onTypeFormatting\"> タイピング中のフォーマット</a>"
" (aka 自動編集)</td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_rename\">リネーム</a> (aka リネームリファクタリング)<"
"/td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_foldingRange\">範囲折り畳み</a> (aka 折り畳み)<"
"/td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_selectionRange\">範囲選択</a> (aka ダブルクリッ"
"クテキスト選択)</td>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_prepareCallHierarchy\">呼び出し階層</a> </t"
"d>\n"
"\t\t\t<td><div class=\"not-supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_semanticTokens\">セマンティックトークン</a> (aka"
" セマンティックハイライト)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t\t<tr>\n"
"\t\t\t<td><a href=\"https://microsoft.github.io/language-server-protocol/specifica"
"tions/specification-current/#textDocument_linkedEditingRange\">編集範囲のリンク</a> (ak"
"a リネームリファクタリング)</td>\n"
"\t\t\t<td><div class=\"supported\"></div></td>\n"
"\t\t</tr>\n"
"\t</tbody>\n"
"</table>"

msgid ""
"<table class=\"table table-bordered\">\n"
"  <thead>\n"
"    <tr>\n"
"      <th></th>\n"
"      <th>Orion</th>\n"
"      <th>Ace</th>\n"
"      <th>CodeMirror</th>\n"
"    </tr>\n"
"  </thead>\n"
"  <tbody>\n"
"    <tr>\n"
"      <td><a href=\"#content-assist\">Content assist</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"303_runtime_concepts.html#validation\">Validation</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#syntax-highlighting\">Syntax highlighting</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#semantic-highlighting\">Semantic highlighting</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"not-supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#mark-occurrences\">Mark occurrences</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#hover-info\">Hover information</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"not-supported\"></div></td>\n"
"      <td><div class=\"not-supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"303_runtime_concepts.html#formatting\">Formatting</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"303_runtime_concepts.html#code-generation\">Code generator</"
"a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#persistence\">Persistence</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"  </tbody>\n"
"</table>"
msgstr ""
"<table class=\"table table-bordered\">\n"
"  <thead>\n"
"    <tr>\n"
"      <th></th>\n"
"      <th>Orion</th>\n"
"      <th>Ace</th>\n"
"      <th>CodeMirror</th>\n"
"    </tr>\n"
"  </thead>\n"
"  <tbody>\n"
"    <tr>\n"
"      <td><a href=\"#content-assist\">コンテンツアシスト</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"303_runtime_concepts.html#validation\">検証</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#syntax-highlighting\">シンタックスハイライト</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#semantic-highlighting\">セマンティックハイライト</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"not-supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#mark-occurrences\">強調表示</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#hover-info\">ホバー</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"not-supported\"></div></td>\n"
"      <td><div class=\"not-supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"303_runtime_concepts.html#formatting\">フォーマット</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"303_runtime_concepts.html#code-generation\">コード生成</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"    <tr>\n"
"      <td><a href=\"#persistence\">永続化</a></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"      <td><div class=\"supported\"></div></td>\n"
"    </tr>\n"
"  </tbody>\n"
"</table>"

msgid ""
"@Check\n"
"public void checkNameStartsWithCapital(Entity entity) {\n"
"    if (!Character.isUpperCase(entity.getName().charAt(0))) {\n"
"        warning(\"Name should start with a capital\",\n"
"            DomainmodelPackage.Literals.TYPE__NAME,\n"
"            INVALID_NAME);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid "@Inject ParseHelper<Domainmodel> parser"
msgstr ""

msgid ""
"@Inject extension ParseHelper\n"
"@Inject extension ValidationTestHelper"
msgstr ""

msgid "@Inject private Provider<IEvaluationContext> contextProvider;"
msgstr ""

msgid ""
"@InjectWith(DomainmodelInjectorProvider)\n"
"@ExtendWith(InjectionExtension)\n"
"class ParserTest {\n"
"    @Test def void simple() {\n"
"        assertTrue(true)\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"@InjectWith(DomainmodelInjectorProvider)\n"
"@RunWith(XtextRunner)\n"
"class ParserTest {\n"
"    @Test def void simple() {\n"
"        assertTrue(true)\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"@Override\n"
"public Class<? extends IResourceSetProvider> bindIResourceSetProvider() {\n"
"    return SimpleResourceSetProvider.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"@Test\n"
"def void parseDomainmodel() {\n"
"    val model = parser.parse('''\n"
"        entity MyEntity {\n"
"            parent: MyEntity\n"
"        }\n"
"    ''')\n"
"    val entity = model.elements.head as Entity\n"
"    assertSame(entity, entity.features.head.type)\n"
"}\n"
"```"
msgstr ""

msgid ""
"@Test\n"
"def void testLowercaseName() {\n"
"    val model = \"entity foo {}\".parse\n"
"    model.assertWarning(DomainmodelPackage.Literals.ENTITY, null,\n"
"            \"Name should start with a capital\")\n"
"}\n"
"```"
msgstr ""

msgid ""
"A [URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/eclipse/emf/co"
"mmon/util/URI.java) (Uniform Resource Identifier) provides a simple and extens"
"ible means for identifying an abstract or physical resource. It is also possib"
"le to import EPackages using resource URIs, but it is strongly recommended to "
"use the namespace URI instead because it is independent from the concrete loca"
"tion in the file system, much more portable across different machines, easier "
"to configure in the workflow, and works better with language mixins. The impor"
"t via platform URIs or file URIs can be considered deprecated and is only supp"
"orted for backwards compatibility."
msgstr ""
"[URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/eclipse/emf/comm"
"on/util/URI.java) (Uniform Resource Identifier)は、抽象もしくは物理的なリソースを特定するための拡張可能かつシ"
"ンプルな手段を提供します。リソースURIを用いてEPackageをインポートすることも可能だが、ネームスペースURIを用いることを強く進めます。なぜなら、ネ"
"ームスペースURIはファイルシステムの具体的な位置から独立しているため、他のマシーンへの移植やワークフローの構築がやりやすく、そして言語のミックスインがより"
"よく動作します。プラットフォームURIもしくはファイルURI経由のインポートは非推奨とみなされ、下位互換性のためだけにサポートされます。"

msgid ""
"A [simple implementation]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/linking/impl/DefaultLinkingService.java) of the linking service is"
" shipped with Xtext and used for any grammar as default. Usually any necessary"
" customization of the linking behavior can best be described using the [scopin"
"g API](#scoping)."
msgstr ""

msgid ""
"A block expression is surrounded by curly braces and contains at least one exp"
"ression. It can optionally be terminated by a semicolon."
msgstr ""

msgid "A character range can be declared using the `..` operator. Example:"
msgstr ""

msgid ""
"A common case when developing languages is the requirement to refer to existin"
"g concepts of other languages. Xtext makes this very easy for other self defin"
"ed DSLs. However, it is often very useful to have access to the available type"
"s of the Java Virtual Machine as well. The [JVM types Ecore model]({{site.src."
"xtext_extras}}/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore) enables"
" clients to do exactly this. It is possible to create cross-references to clas"
"ses, interfaces, and their fields and methods. Basically every information abo"
"ut the structural concepts of the Java type system is available via the JVM ty"
"pes. This includes annotations and their specific values and enumeration liter"
"als, too."
msgstr ""

msgid ""
"A diagram editor in GMF by default manages two resources: One for the semantic"
" model, that is the model we're actually interested in for further processing."
" In our example it is a model representing entities and data types. The second"
" resource holds the notation model. It represents the shapes you see in the di"
"agram and their graphical properties. Notation elements reference their semant"
"ic counterparts. An entity's name would be in the semantic model, while the fo"
"nt to draw it in the diagram would be stored the notation model. Note that in "
"the integration example we're only trying to represent the semantic resource a"
"s text."
msgstr ""

msgid ""
"A do-while loop `do expression while (predicate)` is used to execute a certain"
" expression until the predicate is evaluated to `false`. The difference to the"
" [while loop](#xbase-expressions-while-expression) is that the execution start"
"s by executing the block once before evaluating the predicate for the first ti"
"me. The type of a do-while loop is `void`."
msgstr ""

msgid ""
"A feature call is used to access members of objects, such as fields and method"
"s, but it can also refer to local variables and parameters, which are made ava"
"ilable by the current expression's scope."
msgstr ""

msgid ""
"A floating-point literal creates a `double` (suffix `D` or omitted), a `float`"
" (suffix `F`) or a [BigDecimal]({{site.javadoc.java}}/java/math/BigDecimal.htm"
"l) (suffix `BD`). If you use a `.` sign you have to specify both, the integer "
"and the fractional part of the mantissa. There are only decimal floating-point"
" literals."
msgstr ""

msgid "A fragment is a part of an EMF URI and needs to be unique per resource."
msgstr ""

msgid ""
"A keyword can have any length, e.g. `'entity'`, and contain arbitrary characte"
"rs. The following standard Java notations for special characters are allowed: "
"`\n"
msgstr ""

msgid ""
"A lambda expression is a literal that defines an anonymous function. Xbase' la"
"mbda expressions are allowed to access variables of the declarator. Any final "
"variables and parameters visible at construction time can be referred to in th"
"e lambda expression's body. These expressions are also known as closures."
msgstr ""

msgid ""
"A language is configured with default implementations of [IResourceDescription"
".Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/reso"
"urce/IResourceDescription.java) and [DefaultResourceDescriptionStrategy]({{sit"
"e.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/impl/Defau"
"ltResourceDescriptionStrategy.java), which are responsible to compute the list"
" of exported [IEObjectDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/"
"src/org/eclipse/xtext/resource/IEObjectDescription.java). The Manager iterates"
" over the whole EMF model for each [Resource]({{site.src.emf}}/plugins/org.ecl"
"ipse.emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java) and asks the "
"ResourceDescriptionStrategy to compute an IEObjectDescription for each EObject"
". The ResourceDescriptionStrategy applies the `getQualifiedName(EObject obj)` "
"from [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/or"
"g/eclipse/xtext/naming/IQualifiedNameProvider.java) on the object, and if it h"
"as a qualified name an IEObjectDescription is created and passed back to the M"
"anager which adds it to the list of exported objects. If an EObject doesn't ha"
"ve a qualified name, the element is considered to be not referable from outsid"
"e the resource and consequently not indexed. If you don't like this behavior, "
"you can implement and bind your own implementation of [IDefaultResourceDescrip"
"tionStrategy]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/"
"resource/IDefaultResourceDescriptionStrategy.java)."
msgstr ""

msgid ""
"A list of all default terminals such as `WS` can be found in [Common Terminals"
"](#common-terminals)."
msgstr ""

msgid ""
"A literal denotes a fixed unchangeable value. Literals for strings, numbers, b"
"ooleans, `null` and Java types are supported. Additionally, there exists a lit"
"eral syntax for collections and arrays."
msgstr ""

msgid ""
"A serialized document represents the state of the semantic model. However, if "
"there is a node model available (i.e. the semantic model has been created by t"
"he parser), the serializer"
msgstr ""

msgid ""
"A simple type reference only consists of a *qualified name*. A qualified name "
"is a name made up of identifiers which are separated by a dot (like in Java)."
msgstr ""

msgid ""
"A single [IScope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xt"
"ext/scoping/IScope.java) represents an element of a linked list of scopes. Tha"
"t means that a scope can be nested within an outer scope. Each scope works lik"
"e a symbol table or a map where the keys are strings and the values are so-cal"
"led [IEObjectDescription]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/resource/IEObjectDescription.java), which is effectively an abstra"
"ct description of a real EObject. In order to create IEObjectDescriptions for "
"your model elements, the class [Scopes]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/scoping/Scopes.java) is very useful."
msgstr ""

msgid ""
"A test class for JUnit 5 looks quite similar. Instead of runners JUnit 5 has a"
" notion of [Extensions](https://junit.org/junit5/docs/current/user-guide/#exte"
"nsions). While there can only be one runner per test class for JUnit 4 there c"
"ould be multiple extensions for JUnit 5. The replacement for the XtextRunner i"
"s the new [InjectionExtension]({{site.src.xtext_core}}/org.eclipse.xtext.testi"
"ng/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java). Still ne"
"eded is the language specific [IInjectorProvider]({{site.src.xtext_core}}/org."
"eclipse.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvider.java). I"
"nstead of `org.junit.Test` you have to annotate your cases with [org.junit.jup"
"iter.api.Test](https://github.com/junit-team/junit5/blob/master/junit-jupiter-"
"api/src/main/java/org/junit/jupiter/api/Test.java) and import the methods from"
" [org.junit.jupiter.api.Assertions](https://github.com/junit-team/junit5/blob/"
"master/junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java)."
" A simple test class for JUnit 5 will then look like this:"
msgstr ""

msgid "A typical example for using `var` is a counter in a loop."
msgstr ""

msgid ""
"A unique feature of Xtext is the ability to declare cross-references in the gr"
"ammar. In traditional compiler construction such cross-references are not esta"
"blished during parsing but in a later linking phase. This is the same in Xtext"
", but we allow to specify cross-reference information in the grammar. This inf"
"ormation is used by the [linker](303_runtime_concepts.html#linking)."
msgstr ""

msgid ""
"A variable declaration starting with the keyword `val` denotes an unchangeable"
" value, which is essentially a final variable. In rare cases, one needs to upd"
"ate the value of a reference. In such situations the variable needs to be decl"
"ared with the keyword `var`, which stands for variable."
msgstr ""

msgid ""
"A very common use case is to group the children by categories first, e.g. show"
" the imports before the types in a package declaration, and sort the categorie"
"s separately. That is why the [DefaultComparator]({{site.src.xtext_eclipse}}/o"
"rg.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/outline/actions/SortOutlin"
"eContribution.java) has a method `getCategory(IOutlineNode)` that allows to sp"
"ecify such categories. The example shows how to use such categories:"
msgstr ""

msgid ""
"A very simple implementation of a code generator for the [state machine exampl"
"e]({{site.src.xtext_eclipse}}/org.eclipse.xtext.xtext.ui.examples/projects/fow"
"lerdsl/org.eclipse.xtext.example.fowlerdsl/src/org/eclipse/xtext/example/fowle"
"rdsl/Statemachine.xtext) could be the following:"
msgstr ""

msgid ""
"A while loop `while (predicate) expression` is used to execute a certain expre"
"ssion unless the predicate is evaluated to `false`. The type of a while loop i"
"s `void`."
msgstr ""

msgid ""
"AbstractElement:\n"
"    PackageDeclaration | Entity;"
msgstr ""

msgid ""
"AbstractElement:\n"
"    PackageDeclaration | Type | Import;"
msgstr ""
"AbstractElement:\n"
"    PackageDeclaration | Type | Import;"

msgid ""
"AbstractElement:\n"
"  PackageDeclaration | Entity\n"
";"
msgstr ""

msgid ""
"Actions however allow to make this explicit. Thereby they can improve the read"
"ability of grammars."
msgstr ""

msgid ""
"Additionally, the [StatemachineFoldingRegionProvider]({{site.src.xtext_eclipse"
"}}/org.eclipse.xtext.xtext.ui.examples/projects/fowlerdsl/org.eclipse.xtext.ex"
"ample.fowlerdsl.ui/src/org/eclipse/xtext/example/fowlerdsl/ui/folding/Statemac"
"hineFoldingRegionProvider.java) class has to be bound in the [StatemachineUiMo"
"dule]({{site.src.xtext_eclipse}}/org.eclipse.xtext.xtext.ui.examples/projects/"
"fowlerdsl/org.eclipse.xtext.example.fowlerdsl.ui/src/org/eclipse/xtext/example"
"/fowlerdsl/ui/StatemachineUiModule.java):\n"
"```java\n"
"public class StatemachineUiModule extends AbstractStatemachineUiModule {"
msgstr ""

msgid ""
"After regenerating your language, it will be allowed to define a type `Date` t"
"hat maps to the [Date]({{site.javadoc.java}}/java/util/Date.html) like this:"
msgstr ""

msgid ""
"After running the Xtext generator you get several different modules for your l"
"anguage: one for the base project, one for the generic ide project, and one fo"
"r each platform integration project. For instance, for a language named *Domai"
"nmodel* we would have a *DomainmodelRuntimeModule*, a *DomainmodelIdeModule* ("
"IDE independent UI services), a *DomainmodelUiModule* (for the Eclipse integra"
"tion), and a *DomainmodelWebModule*. The bindings from the runtime module are "
"shared by all integration projects."
msgstr ""

msgid ""
"After running the workflow, a stub implementation of `AbstractIndentationToken"
"Source` is generated in the `parser.antlr` subpackage, e.g. [RuleEngineTokenSo"
"urce]({{site.src.xtext_eclipse}}/org.eclipse.xtext.xtext.ui.examples/projects/"
"homeautomation/org.eclipse.xtext.example.homeautomation/src/org/eclipse/xtext/"
"example/homeautomation/parser/antlr/RuleEngineTokenSource.java). Here you can "
"specify which terminal rule should be applied to your synthetic tokens. For th"
"e Xtext Home Automation language the `WS` (whitespace) rule is selected, which"
" brings the indentation awareness as seen above."
msgstr ""

msgid "After that you have to bind the new *IProjectCreator*"
msgstr ""

msgid ""
"After the [parse tree constructor](#parse-tree-constructor) has done its job t"
"o create a stream of tokens which are to be written to the textual representat"
"ion, and the [comment associator](#comment-associater) has done its work, the "
"existing white spaces from the node model are merged into the stream."
msgstr ""

msgid ""
"After the traversal of all grammar rules the model inference algorithm examine"
"s all generated EClasses and lifts up similar features to supertypes if there "
"is more than one subtype and the feature is defined in all subtypes. This work"
"s even for multiple super types."
msgstr ""

msgid ""
"After you have created your first DSL and had a look at the editor, the langua"
"ge should be refined and incrementally enhanced. The domainmodel language shou"
"ld support the notion of *Packages* in order to avoid name clashes and to bett"
"er fit with the target environment Java. A *Package* may contain *Types* and o"
"ther packages. In order to allow for names in references, we will also add a w"
"ay to declare imports."
msgstr ""
"最初のDSLを生成しエディターの表示を確認したので、言語の改良、機能追加をしていきましょう。domainmodel言語は名前の衝突を避けることとJavaとの"
"親和性を高めるために*Packages*の概念をサポートする必要があります。*Package* は *Types* と他のパッケージを含みます。さらに名前に"
"よる参照を実現するため、imports宣言も追加します。"

msgid ""
"After you have developed your first own DSL, the question arises how the behav"
"ior and the semantics of the language can be customized. Here you find a few m"
"ini-tutorials that illustrate common use cases when crafting your own DSL. The"
"se lessons are independent from each other. Each of them will be based on the "
"language that was built in the previous [domainmodel tutorial](102_domainmodel"
"walkthrough.html)."
msgstr ""

msgid ""
"After you have installed Xtext on your machine, start Eclipse and set up a fre"
"sh workspace."
msgstr "あなたのマシーンにXtextをインストールした後、Eclipseを起動し、新規workspaceをセットアップします。"

msgid ""
"After you have successfully finished the wizard, you will find five new projec"
"ts in your workspace."
msgstr "ウィザードを正常に終了した後、ワークスペースには5つの新しいプロジェクトが作成されます。"

msgid ""
"All EClasses, EEnums, and EDataTypes are added to the EPackage referred to by "
"the alias provided in the type reference they were created from."
msgstr ""

msgid ""
"All Xtext components are assembled by means of dependency injection (DI). This"
" means basically that whenever some code is in need for functionality (or stat"
"e) from another component, one just declares the dependency rather than statin"
"g how to resolve it, i.e. obtaining that component."
msgstr ""

msgid ""
"All of the projects are aggregated in a parent pom in the root directory. If y"
"ou import the projects into Eclipse the imported project is called `my.maveniz"
"ed.herolanguage.parent`. Information defined in the parent pom is automaticall"
"y inherited by the aggregated child projects, so you don't need to reconfigure"
" the same information over and over again. Here we have configured two additio"
"nal plug-ins:"
msgstr ""
"全てのプロジェクトはルートディレクトリにある親pomにて集約されます。もし、プロジェクトをEclipseにインポートする場合、インポートしたプロジェクトは`"
"my.mavenized.herolanguage.parent`と呼ばれます。親pomに定義された情報は自動的に集約された子プロジェクトに継承されるので、"
"子プロジェクトで同じ情報を何度も構築する必要はありません。ここでは、2つのプラグインを構築します:"

msgid ""
"All the tokens explained above can be inverted using a preceding exclamation m"
"ark:"
msgstr ""

msgid ""
"Almost all label providers in the Xtext framework inherit from the base class "
"[AbstractLabelProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/or"
"g/eclipse/xtext/ui/label/AbstractLabelProvider.java) which unifies both approa"
"ches. Subclasses can either return a styled string or a string in the `doGetTe"
"xt(Object)` method. The framework will automatically convert it to a styled te"
"xt (with default styles) or to a plain text in the respective methods."
msgstr ""

msgid ""
"Alternatively the type can be left out and will be inferred from the initializ"
"ation expression:"
msgstr ""

msgid "Alternatively you can wrap it in a `@Fixes` container."
msgstr ""

msgid ""
"Alternatively, if `createEditor` is used, options can be set as attributes of "
"the HTML element into which the editor is created. The attribute name is deriv"
"ed from the JavaScript option name by converting CamelCase to hyphen-separated"
" and prefixing with `data-editor-`, e.g. `resourceId` becomes `data-editor-res"
"ource-id`:"
msgstr ""
"または `createEditor`を用いる場合、エディターが生成されたHTML要素内のアトリビュートにてオプションを設定することができます。アトリビュート"
"名はJavaScriptオプション名をキャメルケースからハイフンセパレートに変換し接頭語`data-editor-`をつけてものが生成されます。例えば、`r"
"esourceId`は`data-edirot-resource-id`になります:"

msgid ""
"Alternatives allow to define multiple valid options in the input file. For ins"
"tance, the white space rule uses alternatives like this:"
msgstr ""

msgid ""
"Although an explicit return is often not necessary, it is supported. In a lamb"
"da expression for instance a return expression is always implied if the expres"
"sion itself is not of type `void`. Anyway you can make it explicit:"
msgstr ""

msgid ""
"Although arbitrary Java classes can be used, the standard root element for MWE"
"2 files is [Workflow]({{site.src.mwe}}/plugins/org.eclipse.emf.mwe2.runtime/sr"
"c/org/eclipse/emf/mwe2/runtime/workflow/Workflow.java), which is part of the v"
"ery slim runtime model shipped with MWE2. It accepts *beans* and *components*."
msgstr ""

msgid ""
"Although the runtime aspects of an Xtext language is not dependent on Eclipse "
"or its OSGi container, an Xtext language is developed in the form of OSGi bund"
"les. For this kind of builds most people rely on [Tycho](http://eclipse.org/ty"
"cho/), which is an OSGi/P2 adapter plug-in for Maven builds. Tycho obtains muc"
"h information from the OSGi bundle's manifest. Additionally needed information"
" is configured through the pom.xml file which sits at the root of each project"
"."
msgstr ""
"Xtext言語の実行時の側面はEclipseやそのOSGIコンテナに依存していませんが、Xtext言語はOSGIバンドルの形式で開発されます。この手のビルド"
"では、多くの人がMavenビルド用のOSGI/P2アダプタープライグインである[Tycho](http://eclipse.org/tycho/)に頼ること"
"になると思います。TychoはOSGIバンドルのマニュフェストから多くの情報を得ます。加えて、必要な情報は各プロジェクトのルートにあるpom.xmlファイル"
"を介して構成されます。"

msgid "Among other things, the code generator will generate"
msgstr ""

msgid ""
"An IResourceDescription contains information about the resource itself, which "
"primarily its [URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/ec"
"lipse/emf/common/util/URI.java), a list of exported [EObjects]({{site.src.emf}"
"}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) in the"
" form of [IEObjectDescription]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/resource/IEObjectDescription.java)s, as well as information a"
"bout outgoing cross-references and qualified names it references. The cross-re"
"ferences contain only resolved references, while the list of imported qualifie"
"d names also contains the names that couldn't be resolved. This information is"
" leveraged by the indexing infrastructure of Xtext in order to compute the tra"
"nsitive hull of dependent resources."
msgstr ""

msgid ""
"An Xbase lambda expression is a Java object of one of the *Function* interface"
"s that are part of the runtime library of Xbase. There is an interface for eac"
"h number of parameters (up to six parameters). The names of the interfaces are"
msgstr ""

msgid ""
"An [EObjectNode]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclip"
"se/xtext/ui/editor/outline/impl/EObjectNode.java) represents a model element. "
"By default, Xtext creates an [EObjectNode]({{site.src.xtext_eclipse}}/org.ecli"
"pse.xtext.ui/src/org/eclipse/xtext/ui/editor/outline/impl/EObjectNode.java) fo"
"r each model element in the node of its container. Nodes are created by callin"
"g the method `createNode(parentNode, modelElement)` which delegates to `create"
"EObjectNode(..)` if not specified differently."
msgstr ""

msgid ""
"An [ILabelProvider]({{site.javadoc.eclipse-platform}}/org/eclipse/jface/viewer"
"s/ILabelProvider.html) has two methods: `getText(Object)` returns the text in "
"an object's label, while `getImage(Object)` returns the icon. In addition, the"
" Eclipse UI framework offers the [IStyledLabelProvider]({{site.javadoc.eclipse"
"-platform}}/org/eclipse/jface/viewers/DelegatingStyledCellLabelProvider.IStyle"
"dLabelProvider.html), which returns a [StyledString]({{site.javadoc.eclipse-pl"
"atform}}/org/eclipse/jface/viewers/StyledString.html) (i.e. with custom fonts,"
" colors etc.) in the `getStyledText(Object)` method."
msgstr ""

msgid ""
"An [IScopeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/"
"xtext/scoping/IScopeProvider.java) is responsible for providing an [IScope]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/IScope.j"
"ava) for a given context [EObject]({{site.src.emf}}/plugins/org.eclipse.emf.ec"
"ore/src/org/eclipse/emf/ecore/EObject.java) and [EReference]({{site.src.emf}}/"
"plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EReference.java). The "
"returned [IScope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xt"
"ext/scoping/IScope.java) should contain all target candidates for the given ob"
"ject and cross-reference."
msgstr ""

msgid ""
"An [XtextResource]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/resource/XtextResource.java) keeps track of it's concrete syntax represen"
"tation by means of a so called node model (see [parser rules section](301_gram"
"marlanguage.html#parser-rules) for a more detailed description). The node mode"
"l represents the parse tree and provides information on the offset, length and"
" text that has been parsed to create a semantic model element. The nodes are a"
"ttached to their semantic elements by means of a node adapter."
msgstr ""

msgid ""
"An [XtextResource]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/resource/XtextResource.java) uses the [IEncodingProvider]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parser/IEncodingProvider.java"
") of your language by default. You can override that by passing an option on l"
"oad and save, e.g."
msgstr ""

msgid ""
"An example grammar is shown in the [15 Minutes Tutorial](102_domainmodelwalkth"
"rough.html#write-your-own-grammar)"
msgstr ""
"文法の例は [15分チュートリアル](102_domainmodelwalkthrough.html#write-your-own-grammar)で確認す"
"ることができます。"

msgid ""
"An expression `if (p) e1 else e2` results in either the value `e1` or `e2` dep"
"ending on whether the predicate `p` evaluates to `true` or `false`. The else p"
"art is optional which is a shorthand for a default value, e.g `else null` if t"
"he type of the `if` expression is a reference type. If the type is a primitive"
" type, its default value is assumed accordingly, e.g. `else false` for `boolea"
"n` or `else 1` for numbers."
msgstr ""

msgid ""
"An if expression is used to choose two different values based on a predicate. "
"While it has the syntax of Java's if statement it behaves like Java's ternary "
"operator (`predicate ? thenPart : elsePart`), i.e. it is an expression that re"
"turns a value. Consequently, you can use if expressions deeply nested within o"
"ther expressions."
msgstr ""

msgid ""
"An interpreter is essentially an external visitor, that recursively processes "
"a model based on the model element's types. In the [XbaseInterpreter]({{site.s"
"rc.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpre"
"ter/impl/XbaseInterpreter.java), the method *doEvaluate(XExpression, IEvaluati"
"onContext, CancelIndicator)* delegates to more specialised implementations e.g"
"."
msgstr ""

msgid "An simple example template might look like this:"
msgstr ""

msgid ""
"And this is how it works: The root element is a plain Java class name. As this"
" MWE2 module is a sibling to the class *com.mycompany.Person* it is not necess"
"ary to use fully qualified name. The constructed objects are furthermore confi"
"gured according to the declaration in the module, i.e. a second instance of Pe"
"rson is created and added to the list of children of \"Grandpa\" while the third"
" person becomes a child of \"Father\". All three instances will have their respe"
"ctive *name* assigned via a reflective invocation of the *setName* method. Not"
"e that in this example the *Person* type for \"Father\" is given explicitly, whi"
"le for \"Son\" it is inferred from the assigned feature *child*."
msgstr ""

msgid ""
"Another alternative is to have them looked up by a certain naming convention. "
"Also for more general languages it is possible to let users add extension meth"
"ods using imports or similar mechanisms. This approach can be seen in the lang"
"uage [Xtend](https://www.eclipse.org/xtend/), where extension methods are lexi"
"cally imported through static imports or dependency injection."
msgstr ""

msgid ""
"Another frequently used feature of MWE2 is *variables*, which can be declared "
"with `var` as shown below. Such a variable can be reset from outside when call"
"ing the module, e.g. allowing to use different settings when calling it from a"
" Maven build. You can refer the variables inside strings using the `${variable"
"-name}` notation."
msgstr ""

msgid ""
"Another use case for lambda expressions is to store function objects in variab"
"les:"
msgstr ""

msgid ""
"Any broken cross-references can be checked generically. As cross-reference res"
"olution is done lazily (see [linking](#linking)), any broken links are resolve"
"d lazily as well. If you want to validate whether all links are valid, you wil"
"l have to navigate through the model so that all installed EMF proxies get res"
"olved. This is done automatically in the editor."
msgstr ""

msgid ""
"Any name for the method will do. The important thing is the [Check]({{site.src"
".xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/Check.java) a"
"nnotation that advises the Xtext framework to use the method as a validation r"
"ule. If the name starts with a lower case letter, a warning will be attached t"
"o the name of the *Entity*."
msgstr ""

msgid ""
"Appending the lambda expression parameters and prepending the parent parameter"
"s using extension syntax yields"
msgstr ""

msgid ""
"Arrays cannot be instantiated arbitrarily, but there are a couple of useful li"
"brary functions that allow to create arrays with a fixed length or an initial "
"value set. Besides this restriction, they can be passed around and they are tr"
"ansparently converted to a List of the component type on demand."
msgstr ""

msgid ""
"As JDT is an Eclipse feature, this JDT-based container management is only avai"
"lable in the UI scenario. It assumes so called [IPackageFragmentRoots]({{site."
"javadoc.eclipse-jdt}}/org/eclipse/jdt/core/IPackageFragmentRoot.html) as conta"
"iners. An IPackageFragmentRoot in JDT is the root of a tree of Java model elem"
"ents. It usually refers to"
msgstr ""

msgid ""
"As Java elements and your concepts are now represented as JVM model elements, "
"other models can now transparently link to Java or your DSL. In other words, y"
"ou can use a mapped element of your DSL in the same places as the correspondin"
"g Java type."
msgstr ""

msgid ""
"As Xbase implements the type system of Java it also fully supports the conform"
"ance rules defined in the [Java Language Specification](http://docs.oracle.com"
"/javase/specs/jls/se7/html/jls-5.html)."
msgstr ""

msgid ""
"As Xtext is about textual modeling, it allows to tweak the encoding in various"
" places."
msgstr ""

msgid ""
"As `AbstractToken` could possibly return an instance of *TokenA*, *TokenB* or "
"*TokenC*. Its type must be a super type for all these types. Since the return "
"value of the called rule becomes the result of the current rule, it is possibl"
"e to further change the state of the AST element by assigning additional featu"
"res."
msgstr ""

msgid ""
"As `this` is bound to the surrounding object in Java, `it` can be used in fine"
"r-grained constructs such as function parameters. That is why `it.myProperty` "
"has higher precedence than `this.myProperty`. `it` is also the [default parame"
"ter name in lambda expressions](#xbase-expressions-implicit-parameter)."
msgstr ""

msgid ""
"As a result given the method [Collections.sort(List\\<T\\>, Comparator\\<? super "
"T\\>)]({{site.javadoc.java}}/java/util/Collections.html) is available as an ext"
"ension method, it can be invoked like this"
msgstr ""

msgid ""
"As a result the rule would now return an instance of *Addition* which has a *N"
"umberLiteral* set to its property left. Next up the parser consumes the '+' op"
"erator. The operator itself is not stored in the AST because there is an expli"
"cit Addition type. It implicitly contains this information. The assignment `ri"
"ght=Multiplication` calls the rule *Multiplication* another time and assigns i"
"ts result object (a NumberLiteral of value=20) to the property `right`. The cl"
"osing parenthesis is matched afterwards, consumed and the parser stack is redu"
"ced once more."
msgstr ""

msgid ""
"As a result, not only the `state`, but also the `events`, `resetEvents` and `c"
"ommands` regions become foldable:\n"
"![](images/folding_customized.png)"
msgstr ""

msgid ""
"As already mentioned, the default implementation strategy exports every model "
"element that the IQualifiedNameProvider can provide a name for. This is a good"
" starting point, but when your models become bigger and you have a lot of them"
" the index will become larger and larger. In most scenarios only a small part "
"of your model should be visible from outside, hence only that small part needs"
" to be in the index. In order to do this, bind a custom implementation of [IDe"
"faultResourceDescriptionStrategy]({{site.src.xtext_core}}/org.eclipse.xtext/sr"
"c/org/eclipse/xtext/resource/IDefaultResourceDescriptionStrategy.java) and cre"
"ate index representations only for those elements that you want to reference f"
"rom outside the resource they are contained in. From within the resource, refe"
"rences to those filtered elements are still possible as long as they have a na"
"me."
msgstr ""

msgid ""
"As always, you have to declare a binding for your custom implementation in you"
"r *MyDslUiModule*:"
msgstr ""

msgid ""
"As each language could handle the encoding problem differently, Xtext offers a"
" service here. The [IEncodingProvider]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/parser/IEncodingProvider.java) has a single method `g"
"etEncoding(URI)` to define the encoding of the resource with the given URI. Us"
"ers can implement their own strategy, but keep in mind that this is not intend"
"ed to be a long running method. If the encoding is stored within the model fil"
"e itself, it should be extractable in an easy way, like from the first line in"
" an XML file. The default implementation returns the default Java character se"
"t in a standalone scenario."
msgstr ""

msgid ""
"As explained in the [grammar language reference](301_grammarlanguage.html#epac"
"kage-import) it is possible to import existing metamodels into your language d"
"efinition."
msgstr ""

msgid ""
"As for the lexical highlighting the interface to register the available styles"
" is the [IHighlightingConfiguration]({{site.src.xtext_eclipse}}/org.eclipse.xt"
"ext.ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/IHighlightingConfigurati"
"on.java). The [ISemanticHighlightingCalculator]({{site.src.xtext_core}}/org.ec"
"lipse.xtext.ide/src/org/eclipse/xtext/ide/editor/syntaxcoloring/ISemanticHighl"
"ightingCalculator.java) is the primary hook to implement the logic that will c"
"ompute the to-be-highlighted ranges based on the model elements."
msgstr ""

msgid ""
"As mentioned above, in order to compute an [IResourceDescription]({{site.src.x"
"text_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescript"
"ion.java) for a resource the framework asks the [IResourceDescription.Manager]"
"({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IRes"
"ourceDescription.java) which delegates to the IDefaultResourceDescriptionStrat"
"egy. To convert between a [QualifiedName]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/naming/QualifiedName.java) and its String represen"
"tation you can use the [IQualifiedNameConverter]({{site.src.xtext_core}}/org.e"
"clipse.xtext/src/org/eclipse/xtext/naming/IQualifiedNameConverter.java). Here "
"is some Xtend code showing how to do that:"
msgstr ""

msgid ""
"As soon as the parser hits an assignment it checks whether an AST node for the"
" current rule was already created. Otherwise it will create one based on the r"
"eturn type of the current rule, which is *NumberLiteral*. The Xtext generator "
"created the EClass 'NumberLiteral' before which can now be instantiated. That "
"type will also have a property called value of type int, which will get the va"
"lue '1' set. This is what the Java equivalent looks like:"
msgstr ""

msgid ""
"As soon as you generate the Xtext artifacts from the grammar, a code generator"
" stub is put into the runtime project of your language. Let's dive into [Xtend"
"](https://www.eclipse.org/xtend/) and see how you can integrate your own code "
"generator with Eclipse."
msgstr ""

msgid ""
"As the Java VM types expose a lot of information about visibility, parameter t"
"ypes and return types, generics, available annotations or enumeration literals"
", it is very easy to define constraints for the referred types."
msgstr ""

msgid ""
"As the [IRenameStrategy]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/o"
"rg/eclipse/xtext/ui/refactoring/IRenameStrategy.java) is a stateful object, yo"
"u have to bind a custom [Provider]({{site.src.xtext_eclipse}}/org.eclipse.xtex"
"t.ui/src/org/eclipse/xtext/ui/refactoring/IRenameStrategy.java) to create it."
msgstr ""

msgid ""
"As the default generated [IInjectorProvider]({{site.src.xtext_core}}/org.eclip"
"se.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvider.java) of your"
" main language (e.g. DomainmodelInjectorProvider) does not know about any othe"
"r dependent languages, they must be initialized explicitly. The recommended pa"
"ttern for this is to create a new subclass of the generated *MyLanguageInjecto"
"rProvider* in your *\\*.test* project and make sure the dependent language is i"
"ntizialized properly. Then you can use this new injector provider instead of t"
"he original one in your test's *@InjectWith*:"
msgstr ""

msgid ""
"As the default strategy is a best effort it may not always result in the selec"
"tion you want. If that's the case you can [override](302_configuration.html#gu"
"icemodules) the [ILocationInFileProvider]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/resource/ILocationInFileProvider.java) binding in "
"the UI module as in the following example:"
msgstr ""

msgid ""
"As this strategy allows to reuse a lot of nice Java things like jars, OSGi, ma"
"ven, etc. it is part of the default: You should not have to reconfigure anythi"
"ng to make it work. Nevertheless, if you messed something up, make sure you bi"
"nd"
msgstr ""

msgid "As we changed the grammar, we have to regenerate the language now."
msgstr ""

msgid ""
"As you can see the main difference is that it uses three rules instead of one,"
" and if you look a bit closer you see that there's a certain delegation patter"
"n involved. The rule *Addition* doesn't call itself but calls *Multiplication*"
" instead. The operator precedence is defined by the order of delegation. The l"
"ater the rule is called the higher is its precedence. This is at least the cas"
"e for the first two rules which are of a left recursive nature (but we've left"
"-factored them now). The last rule is not left recursive which is why you can "
"implement it without applying this pattern."
msgstr ""

msgid ""
"As you can see, it supports all kinds of advanced features such as Java generi"
"cs and full expressions, even including lambda expressions. Don't panic, you w"
"ill not have to implement these concepts on your own but will reuse a lot of h"
"elpful infrastructure to build the language."
msgstr ""

msgid ""
"Assignments are used to assign the consumed information to a feature of the cu"
"rrently produced object. The type of the current object, its [EClass]({{site.s"
"rc.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java),"
" is specified by the return type of the parser rule. If it is not explicitly s"
"tated it is implied that the type's name equals the rule's name. The type of t"
"he assigned feature is inferred from the right hand side of the assignment."
msgstr ""

msgid ""
"Assuming you want to define a rule to consume Java-like qualified names (e.g. "
"`foo.bar.Baz`) you could write:"
msgstr ""

msgid ""
"Automated UI tests are crucial for the maintainability and the quality of a so"
"ftware product. That's why it is strongly recommended to write not only automa"
"ted unit tests for your language, but also automated UI tests for your languag"
"e editor. The `org.eclipse.xtext.ui.testing` package contains some base classe"
"s that come in handy when implementing automated UI tests:"
msgstr ""

msgid ""
"Automated tests are crucial for the maintainability and the quality of a softw"
"are product. That is why it is strongly recommended to write unit tests for yo"
"ur language, too. The Xtext project wizard creates test projects for that purp"
"ose, which simplify the setup procedure for the basic language implementation "
"as well as platform-specific integrations. It supports an option to either cre"
"ate your tests for JUnit 4 or JUnit 5. Depending on your choice your test layo"
"ut will vary in some details."
msgstr ""

msgid ""
"Automated tests are crucial for the maintainability and the quality of a softw"
"are product. That is why it is strongly recommended to write unit tests for yo"
"ur language. The Xtext project wizard creates two test projects for that purpo"
"se. These simplify the setup procedure for testing the basic language features"
" and the Eclipse UI integration."
msgstr ""

msgid "Basically all kinds of JVM types are available and referable."
msgstr ""

msgid "Basically parsing can be separated in the following phases:"
msgstr "基本的に、パースは以下のフェーズに分割することができます:"

msgid ""
"Because of type inference Xbase sometimes needs to compute the most common sup"
"er type of a given set of types."
msgstr ""

msgid ""
"Because parser rules describe not a single token, but a sequence of patterns i"
"n the input, it is necessary to define the important parts of the input. Xtext"
" introduces the concept of hidden tokens to handle semantically irrelevant thi"
"ngs like white spaces, comments, etc. in the input sequence gracefully. It is "
"possible to define a set of terminal symbols that are hidden from the parser r"
"ules and automatically skipped when they are recognized. Nevertheless, they ar"
"e transparently woven into the node model, but not relevant for the semantic m"
"odel."
msgstr ""

msgid ""
"Because we can express all kinds of Java type references directly now, an indi"
"rection for *DataTypes* as in the previous section is no longer necessary. If "
"we start from the [domain model example in the tutorial](103_domainmodelnextst"
"eps.html) again, we have to replace all cross-references to *Types* by calls t"
"o the production rule *JvmTypeReference*. The rules *DataType*, *Type*, and *Q"
"ualifiedName* become obsolete (the latter is already defined in Xbase). As we "
"now have all kinds of generic Java collections at hand, *Feature.many* is obso"
"lete, too. The whole grammar now reads concisely:"
msgstr ""

msgid ""
"Being able to parse a Java type reference is already nice, but we also have to"
" write them back to their string representation when we generate Java code. Un"
"fortunately, a generic type reference with fully qualified class names can bec"
"ome a bit bulky. Therefore, the [ImportManager]({{site.src.xtext_extras}}/org."
"eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/ImportManager.java) s"
"hortens fully qualified names, keeps track of imported namespaces, avoids name"
" collisions, and helps to serialize [JvmTypeReferences]({{site.src.xtext_extra"
"s}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmT"
"ypeReference.java) by means of the [TypeReferenceSerializer]({{site.src.xtext_"
"extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TypeRefe"
"renceSerializer.java). This utility encapsulates how type references may be se"
"rialized depending on the concrete context in the output."
msgstr ""

msgid ""
"Beside the exported elements the index contains [IReferenceDescription]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IReferenceD"
"escription.java)s that contain the information who is referencing who. They ar"
"e created through the IResourceDescription.Manager and IDefaultResourceDescrip"
"tionStrategy, too. If there is a model element that references another model e"
"lement, the IDefaultResourceDescriptionStrategy creates an IReferenceDescripti"
"on that contains the URI of the referencing element (*sourceEObjectURI*) and t"
"he referenced element (*targetEObjectURI*). These IReferenceDescriptions are v"
"ery useful to find references and calculate affected resources."
msgstr ""

msgid ""
"Besides the already mentioned advanced features like [content assist](#content"
"-assist) and [code formatting](303_runtime_concepts.html#formatting) the power"
"ful editor for your DSL is capable to mark up your model-code to improve the o"
"verall readability. It is possible to use different colors and fonts according"
" to the meaning of the different parts of your input file. One may want to use"
" some unintrusive colors for large blocks of comments while identifiers, keywo"
"rds and strings should be colored differently to make it easier to distinguish"
" between them. This kind of text decorating markup does not influence the sema"
"ntics of the various sections but helps to understand the meaning and to find "
"errors in the source code."
msgstr ""

msgid ""
"But as the first token in the sample expression is an opening parenthesis '(',"
" the parser will take the second alternative in *Primary*: it consumes the '('"
" and calls the rule *Addition*. Now the value '1' is the lookahead token and a"
"gain *Addition* calls *Multiplication* and *Multiplication* calls *Primary*. T"
"his time the parser takes the first alternative because '1' was consumed by th"
"e *INT* rule."
msgstr ""

msgid ""
"By default Xtext registers *context types* that follow certain patterns. A con"
"text type will be created"
msgstr ""

msgid ""
"By default every language will have a single outlet, which points to `<project"
"-root>/src-gen/`. The files that go here are treated as fully derived and will"
" be erased by the compiler automatically when a new file should be generated. "
"If you need additional outlets or want to have a different default configurati"
"on, you need to implement the interface [IOutputConfigurationProvider]({{site."
"src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/generator/IOutputConf"
"igurationProvider.java). It's straightforward to understand and the default im"
"plementation gives you a good idea about how to implement it."
msgstr ""

msgid ""
"By default, the generated wizard will create a Plug-in project. If you want a "
"General project you need to set the following property to false: `pluginProjec"
"t=false`, for example"
msgstr ""

msgid ""
"By default, the inferred model is [indexed](303_runtime_concepts.html#global-s"
"copes), so it can be cross referenced from other models."
msgstr ""

msgid ""
"By mapping your language concepts to Java elements, you implicitly tell Xtext "
"in what kind of scopes the various expressions live and what return types are "
"expected from them. Xtext also comes with a code generator which can translate"
" that Java model into readable Java code, including the expressions."
msgstr ""

msgid ""
"By using the correct signature (see below) and annotating the method with the "
"@[Fix]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/u"
"i/editor/quickfix/Fix.java) annotation referencing the previously specified is"
"sue code from the validator, Xtext knows that this method implements a fix for"
" the problem. This also allows us to annotate multiple methods as fixes for th"
"e same problem."
msgstr ""

msgid ""
"Checking for null references can make code very unreadable. In many situations"
" it is ok for an expression to return `null` if a receiver was `null`. Xbase s"
"upports the safe navigation operator `?.` to make such code more readable."
msgstr ""

msgid "Choose a meaningful project name, language name and file extension, e.g."
msgstr "意味のあるプロジェクト名、言語名、そしてファイル拡張子を選びます。例えば"

msgid "Click on *Finish* to create the projects"
msgstr ""

msgid "Click on *Finish* to create the projects."
msgstr "プロジェクトを作成するため *Finish* を押してください。"

msgid ""
"Clients have to implement the `createCodeMinings()` method, compute text and p"
"osition of meta information that should be presented in the text editor. Final"
"ly instances of `ICodeMining` are created with that information and passed to "
"the `acceptor`."
msgstr ""

msgid ""
"Clients who want to customize the behavior may override the methods from the ["
"AbstractJavaBasedContentProposalProvider]({{site.src.xtext_eclipse}}/org.eclip"
"se.xtext.ui/src/org/eclipse/xtext/ui/editor/contentassist/AbstractJavaBasedCon"
"tentProposalProvider.java) or introduce new methods with a specialized first p"
"arameter. The framework inspects the type of the model object and dispatches m"
"ethod calls to the most concrete implementation that can be found."
msgstr ""

msgid ""
"Code Mining shows inline annotations in the text editor that are not part of t"
"he text itself, but derived from its contents. It can be very helpful to lever"
"age code minings for example to show inferred types, parameter names for liter"
"als and other kind of meta information."
msgstr ""

msgid ""
"Code minings come in two flavors: \"header annotations\" are printed in a separa"
"te line above the mined text, \"inline annotations\" are shown in-line. The foll"
"owing screenshot shows both flavors:"
msgstr ""

msgid ""
"Coming back to our example, one possible scenario for the FilteringScope could"
" be to exclude the context element from the list of candidates as it should no"
"t be a super-element of itself."
msgstr ""

msgid ""
"Compound assignment operators can be used as a shorthand for the assignment of"
" a binary expression."
msgstr ""

msgid ""
"Compound assignments work automatically if the binary operator is declared. Th"
"e following compound assignment operators are supported:"
msgstr ""

msgid ""
"Conceptually and syntactically, Xbase is very close to Java statements and exp"
"ressions, but with a few differences:"
msgstr ""

msgid ""
"Consequently it is possible to access the members of a type reflectively by us"
"ing its plain name `String.getDeclaredFields`."
msgstr ""

msgid ""
"Consequently, the information which container a resource belongs to depends on"
" the referencing context. Therefore an [IResourceServiceProvider]({{site.src.x"
"text_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceServiceP"
"rovider.java) provides another interesting service, which is called [IContaine"
"r.Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/res"
"ource/IContainer.java). For a given [IResourceDescription]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescription.jav"
"a), the Manager provides you the [IContainer]({{site.src.xtext_core}}/org.ecli"
"pse.xtext/src/org/eclipse/xtext/resource/IContainer.java) as well as a list of"
" all IContainers which are visible from there. Note that the [index]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescr"
"iptions.java) is globally shared between all languages while the Manager, whic"
"h adds the semantics of containers, can be very different depending on the lan"
"guage. The following method lists all resources visible from a given [Resource"
"]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/res"
"ource/Resource.java):"
msgstr ""

msgid ""
"Consider the expression a ~ b ~ c. If the operator ~ has left associativity, t"
"his expression would be interpreted as (a ~ b) ~ c and evaluated left-to-right"
". If the operator has right associativity, the expression would be interpreted"
" as a ~ (b ~ c) and evaluated right-to-left. If the operator is non-associativ"
"e, the expression might be a syntax error, or it might have some special meani"
"ng. The most common variant is left associativity:"
msgstr ""

msgid ""
"Considering e.g the Xtext Statemachine example, the framework provides folding"
" capabilities for the `state` regions:"
msgstr ""

msgid ""
"Construction of objects is done by invoking Java constructors. The syntax is e"
"xactly as in Java."
msgstr ""

msgid ""
"Content assist proposals for cross-references are created by [IdeCrossrefPropo"
"salProvider]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/org/eclipse/xte"
"xt/ide/editor/contentassist/IdeCrossrefProposalProvider.java), while for other"
" grammar elements [IdeContentProposalProvider]({{site.src.xtext_core}}/org.ecl"
"ipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentPropos"
"alProvider.java) is used. In order to customize the proposals, create subclass"
"es of these providers and register them in your IDE Guice module."
msgstr ""
"クロスリファレンスのコンテンツアシスト提案は[IdeCrossrefProposalProvider]({{site.src.xtext_core}}/or"
"g.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossref"
"ProposalProvider.java)によって生成され、その他の文法要素は[IdeContentProposalProvider]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contenta"
"ssist/IdeContentProposalProvider.java) が使用されます。提案のカスタマイズのためには、これらのプロバイダーのサブクラス"
"を作成し、IDEガイドモジュールにそれらを登録します。"

msgid ""
"Continuing with the `INVALID_TYPE_NAME` problem from the domain model example "
"we add a method with which the problem can be fixed (have a look at the *Domai"
"nmodelQuickfixProvider* for details):"
msgstr ""

msgid ""
"Creates one or more editor instances and initializes Xtext services for them. "
"The available options are described below. The return value is the created edi"
"tor if exactly one was created, or an array of editors otherwise:"
msgstr ""
"エディターインスタンスを1つかそれ以上作成し、それぞれに対してXtextサービスを初期化します。利用可能なオプションは以下で説明します。作成したエディターが"
"1つの場合、戻り値は作成したエディターです。複数作成した場合、戻り値はエディターの配列です:"

msgid "Currently, Xtext supports the following LSP language features:"
msgstr "現在、Xtextは以下のLSP言語機能をサポートしています:"

msgid ""
"Customization can happen by either extending the [DefaultOccurrenceComputer]({"
"{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor"
"/occurrences/DefaultOccurrenceComputer.java) class or even providing a complet"
"e implementation of the [IOccurrenceComputer]({{site.src.xtext_eclipse}}/org.e"
"clipse.xtext.ui/src/org/eclipse/xtext/ui/editor/occurrences/IOccurrenceCompute"
"r.java) interface."
msgstr ""

msgid ""
"Data type rules create instances of [EDataType]({{site.src.emf}}/plugins/org.e"
"clipse.emf.ecore/src/org/eclipse/emf/ecore/EDataType.java) instead of [EClass]"
"({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/ECla"
"ss.java). They are quite similar to terminal rules, but they are actually pars"
"er rules and are therefore"
msgstr ""

msgid ""
"DataType:\n"
"    'datatype' name=ID;"
msgstr ""
"DataType:\n"
"    'datatype' name=ID;"

msgid ""
"Dealing with images can be cumbersome, too, as image handles tend to be scarce"
" system resources. The [AbstractLabelProvider]({{site.src.xtext_eclipse}}/org."
"eclipse.xtext.ui/src/org/eclipse/xtext/ui/label/AbstractLabelProvider.java) he"
"lps you managing the images: In your implementation of `doGetImage(Object)` yo"
"u can as well return an [Image]({{site.javadoc.eclipse-platform}}/org/eclipse/"
"swt/graphics/Image.html), an [ImageDescriptor]({{site.javadoc.eclipse-platform"
"}}/org/eclipse/jface/resource/ImageDescriptor.html) or a string, representing "
"a path in the *icons/* folder of the containing plug-in. This path is actually"
" configurable by Google Guice. Have a look at the [PluginImageHelper]({{site.s"
"rc.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/PluginImageHe"
"lper.java) to learn about the customizing possibilities."
msgstr ""

msgid ""
"Declared terminal rules always get a higher priority than imported terminal ru"
"les."
msgstr ""

msgid ""
"Defining what is visible from outside the current resource is the responsibili"
"ty of global scopes. As the name suggests, global scopes are provided by insta"
"nces of the [IGlobalScopeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/s"
"rc/org/eclipse/xtext/scoping/IGlobalScopeProvider.java). The data structures ("
"called index) used to store its elements are described in the next section."
msgstr ""

msgid ""
"Developing DSLs has become incredibly easy with Xtext. Structural languages wh"
"ich introduce new coarse-grained concepts, such as services, entities, value o"
"bjects or state-machines can be developed in minutes. However, software system"
"s do not consist of structures solely. At some point a system needs to have so"
"me behavior, which is usually specified using so called *expressions*. Express"
"ions are the heart of every programming language and are not easy to get right"
". On the other hand, expressions are well understood and many programming lang"
"uages share a common set and understanding of expressions."
msgstr ""

msgid "Device Heater can be on, off, error"
msgstr ""

msgid ""
"Domainmodel:\n"
"    (elements+=AbstractElement)*;"
msgstr ""
"Domainmodel:\n"
"    (elements+=AbstractElement)*;"

msgid ""
"Domainmodel:\n"
"    (elements+=Type)*;"
msgstr ""
"Domainmodel:\n"
"    (elements+=Type)*;"

msgid ""
"Domainmodel:\n"
"    importSection=XImportSection?\n"
"    elements+=AbstractElement*;"
msgstr ""

msgid ""
"Domainmodel:\n"
"  importSection=XImportSection?\n"
"  (elements += AbstractElement)*\n"
";"
msgstr ""

msgid ""
"EClasses can have *EAttributes* for their simple properties. These are shown i"
"nside the EClasses nodes. The example contains two EAttributes *name* and one "
"EAttribute *multi*. The domain of values for an EAttribute is defined by its *"
"EDataType*. Ecore ships with some predefined *EDataTypes*, which essentially r"
"efer to Java primitive types and other immutable classes like [String]({{site."
"javadoc.java}}/java/lang/String.html). To make a distinction from the Java typ"
"es, the *EDataTypes* are prefixed with an *E*. In our example, that is *EStrin"
"g* and *EBoolean*."
msgstr ""

msgid ""
"EMF also ships with a code generator that generates Java classes from your Eco"
"re model. The code generators input is the so called *EMF generator model*. It"
" decorates (references) the Ecore model and adds additional information for th"
"e Ecore &rarr; Java transformation. Xtext will automatically generate a genera"
"tor model with reasonable defaults for all generated meta-models, and run the "
"EMF code generator on them."
msgstr ""

msgid ""
"Each Xtext grammar starts with a header that defines some properties of the gr"
"ammar."
msgstr "各Xtext文法は文法の特徴を定義したヘッダーから開始します。"

msgid ""
"Each [EAttribute]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclip"
"se/emf/ecore/EAttribute.java) or [EReference]({{site.src.emf}}/plugins/org.ecl"
"ipse.emf.ecore/src/org/eclipse/emf/ecore/EReference.java) takes its name from "
"the assignment or action that caused it. Multiplicities are `0..1` for assignm"
"ents with the `=` operator and `0..*` for assignments with the `+=` operator."
msgstr ""

msgid ""
"Each node in the outline tree is an instance of [IOutlineNode]({{site.src.xtex"
"t_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/outline/IOutl"
"ineNode.java). The outline tree is always rooted in a [DocumentRootNode]({{sit"
"e.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/out"
"line/impl/DocumentRootNode.java). This node is automatically created for you. "
"Its children are the root nodes in the displayed view."
msgstr ""

msgid ""
"Each terminal rule returns an atomic value (an [EDataType]({{site.src.emf}}/pl"
"ugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EDataType.java)). By def"
"ault, it's assumed that an instance of `ecore::EString` should be returned. Ho"
"wever, if you want to provide a different type you can specify it. For instanc"
"e, the rule *INT* is defined as:"
msgstr ""

msgid ""
"Element:\n"
"    'element' name=ID ('extends' superElement=[Element])?;"
msgstr ""

msgid ""
"Encoding, aka. *character set*, describes the way characters are encoded into "
"bytes and vice versa. Famous standard encodings are *UTF-8* or *ISO-8859-1*. T"
"he list of available encodings can be determined by calling [Charset.available"
"Charsets()]({{site.javadoc.java}}/java/nio/charset/Charset.html). There is als"
"o a list of encodings and their canonical Java names in the [API docs](http://"
"download.oracle.com/javase/1.5.0/docs/guide/intl/encoding.doc.html)."
msgstr ""

msgid ""
"Entity:\n"
"    'entity' name=ID ('extends' superType=[Entity])? '{'\n"
"        (features+=Feature)*\n"
"    '}';"
msgstr ""
"Entity:\n"
"    'entity' name=ID ('extends' superType=[Entity])? '{'\n"
"        (features+=Feature)*\n"
"    '}';"

msgid ""
"Entity:\n"
"    'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'\n"
"        (features+=Feature)*\n"
"    '}';"
msgstr ""
"Entity:\n"
"    'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'\n"
"        (features+=Feature)*\n"
"    '}';"

msgid ""
"Entity:\n"
"    'entity' name=ValidID ('extends' superType=JvmTypeReference)? '{'\n"
"        features+=Feature*\n"
"    '}';"
msgstr ""

msgid ""
"Entity:\n"
"  'entity' name = ID \n"
"              ('extends' superType = JvmTypeReference)?\n"
"  '{'\n"
"    (features += Feature)*\n"
"  '}'\n"
";"
msgstr ""

msgid ""
"Enum rules return enumeration literals from strings. They can be seen as a sho"
"rtcut for data type rules with specific value converters. The main advantage o"
"f enum rules is their simplicity, type safety and therefore nice validation. F"
"urthermore it is possible to infer enums and their respective literals during "
"the Ecore model transformation."
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
"Expressions are the main language constructs which are used to express behavio"
"r and compute values. The concept of statements is not supported, but instead "
"powerful expressions are used to handle situations in which the imperative nat"
"ure of statements would be helpful. An expression always results in a value (i"
"t might be the value `null` or of type `void` though). In addition, every reso"
"lved expression is of a static type."
msgstr ""

msgid ""
"Feature calls are directly translated to their Java equivalent with the except"
"ion, that access to properties follows similar rules as described in [the prev"
"ious section](#xbase-expressions-property-assignment). That is, for the expres"
"sion"
msgstr ""

msgid ""
"Feature:\n"
"    (many?='many')? name=ID ':' type=[Type];\n"
"```"
msgstr ""
"Feature:\n"
"    (many?='many')? name=ID ':' type=[Type];\n"
"```"

msgid ""
"Feature:\n"
"    (many?='many')? name=ID ':' type=[Type|QualifiedName];\n"
"```"
msgstr ""
"Feature:\n"
"    (many?='many')? name=ID ':' type=[Type|QualifiedName];\n"
"```"

msgid ""
"Feature:\n"
"    Property | Operation;"
msgstr ""

msgid ""
"Feature:\n"
"  name = ID ':' type = JvmTypeReference\n"
"; \n"
"```"
msgstr ""

msgid ""
"Finally, if you put tokens one after another, the whole sequence is referred t"
"o as a group. Example:"
msgstr ""

msgid ""
"First of all, locate the file *DomainmodelGenerator.xtend* in the package *org"
".example.domainmodel.generator*. This Xtend class is used to generate code for"
" your models in the standalone scenario and in the interactive Eclipse environ"
"ment. Let's make the implementation more meaningful and start writing the code"
" generator. The strategy is to find all entities within a resource and trigger"
" code generation for each one."
msgstr ""

msgid ""
"First we will investigate the generated `Abstract{MyLang}ProposalProvider` wit"
"h methods that look like this:"
msgstr ""

msgid "For Orion the editor is not returned directly, but through a _promise_:"
msgstr "Orionではエディターが直接戻り値になることはなく、_promise_を介して返されます:"

msgid ""
"For a set *\\[T1,T2,...Tn\\]* of types the common super type is computed by usin"
"g the linear type inheritance sequence of *T1* and is iterated until one type "
"conforms to each *T2,..,Tn*. The linear type inheritance sequence of *T1* is c"
"omputed by ordering all types which are part in the type hierarchy of *T1* by "
"their specificity. A type *T1* is considered more specific than *T2* if *T1* i"
"s a subtype of *T2*. Any types with equal specificity will be sorted by the ma"
"ximal distance to the originating subtype. *CharSequence* has distance 2 to *S"
"tringBuilder* because the super type *AbstractStringBuilder* implements the in"
"terface, too. Even if *StringBuilder* implements *CharSequence* directly, the "
"interface gets distance 2 in the ordering because it is not the most general c"
"lass in the type hierarchy that implements the interface. If the distances for"
" two classes are the same in the hierarchy, their qualified name is used as th"
"e compare-key to ensure deterministic results."
msgstr ""

msgid ""
"For a uniform encoding, bind the plain [IEncodingProvider]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/parser/IEncodingProvider.java) to"
" the same implementation in all modules. In the Eclipse UI module you can use "
"similar code as above, but with *DispatchingProvider.Ui* instead of *Runtime*."
msgstr ""

msgid "For an implementation reference, have a look at the Xtext Domainmodel example."
msgstr ""

msgid ""
"For case insensitive element names, use the *ignoreCase* option in the scoping"
", too :"
msgstr ""

msgid ""
"For case insensitive keywords, open your MWE workflow and enable the ignoreCas"
"e property:"
msgstr ""

msgid ""
"For each alternative defined in an enum rule, the transformer creates an enum "
"literal, as long as no other literal with the same name can be found. The *lit"
"eral* property of the generated enum literal is set to the right hand side of "
"the declaration. If it is omitted, an enum literal with equal *name* and *lite"
"ral* attributes is inferred."
msgstr ""

msgid ""
"For each language there is an implementation of [ISetup]({{site.src.xtext_core"
"}}/org.eclipse.xtext/src/org/eclipse/xtext/ISetup.java) generated. It implemen"
"ts a method called `createInjectorAndDoEMFRegistration()`, which can be called"
" to do the initialization of the language infrastructure."
msgstr ""

msgid "For example the following template (taken from the Xtext Domainmodel example):"
msgstr ""

msgid ""
"For example, Features in the [domainmodel tutorial](102_domainmodelwalkthrough"
".html) contain a cross-reference pointing to a Type:"
msgstr ""

msgid ""
"For instance when some code wants to use a scope provider, it just declares a "
"field (or method or constructor) and adds the [Inject]({{site.javadoc.guice}}/"
"com/google/inject/Inject.html) annotation:"
msgstr ""

msgid "For instance, given the following Java method signature:"
msgstr ""

msgid ""
"For more elaborate templates it is also possible to group parameters together,"
" enable/disable parameters, have parameter values be changed in response of th"
"e change of a different parameter and add validations to the wizard if the sel"
"ected parameters are correct. This can be done by implementing the provided me"
"thods `updateVariables` and `validate`. The Xtext Statemachine example contain"
"s a more sophisticated implementation of the new project wizard."
msgstr ""

msgid ""
"For more information on lambda expressions see [the corresponding section](#xb"
"ase-expressions-lambda)."
msgstr ""

msgid ""
"For performance reasons it is usually a good idea to navigate the resource bas"
"ed on the fragment information instead of traversing it completely. If you kno"
"w that your fragment is computed from qualified names and your model contains "
"something like *NamedElements*, you should split your fragment into those part"
"s and query the root elements, the children of the best match and so on."
msgstr ""

msgid ""
"For serialization to succeed, the parse tree constructor must be able to *cons"
"ume* every non-transient element of the to-be-serialized EMF model. To *consum"
"e* means, in this context, to write the element to the textual representation "
"of the model. This can turn out to be a not-so-easy-to-fulfill requirement, si"
"nce a grammar usually introduces implicit constraints to the EMF model as expl"
"ained for the [concrete syntax validator](#concrete-syntax-validation)."
msgstr ""

msgid ""
"For the following part we will refer to the Xtext Examples shipped with the Xt"
"ext framework to describe the different aspects of Xtext's UI features."
msgstr ""

msgid ""
"For users, and especially in the context of scoping, the most important inform"
"ation is the list of exported EObjects. An IEObjectDescription stores the URI "
"of the actual EObject, its [QualifiedName]({{site.src.xtext_core}}/org.eclipse"
".xtext/src/org/eclipse/xtext/naming/QualifiedName.java), as well as its [EClas"
"s]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EC"
"lass.java). In addition one can export arbitrary information using the *user d"
"ata* map. The following diagram gives an overview on the description classes a"
"nd their relationships."
msgstr ""

msgid ""
"For validations written using the [AbstractDeclarativeValidator](303_runtime_c"
"oncepts.html#custom-validation) it is possible to provide corresponding quick "
"fixes in the editor. To be able to implement a quick fix for a given diagnosti"
"c (a warning or error) the underlying *cause* of the diagnostic must be known "
"(i.e. what actual problem does the diagnostic represent), otherwise the fix do"
"esn't know what needs to be done. As we don't want to deduce this from the dia"
"gnostic's error message we associate a problem specific *code* with the diagno"
"stic."
msgstr ""

msgid ""
"Formatting (aka. pretty printing) is the process of rearranging the text in a "
"document to improve the readability without changing the semantic value of the"
" document. Therefore a formatter is responsible for arranging line-wraps, inde"
"ntation, whitespace, etc. in a text to emphasize its structure, but it is not "
"supposed to alter a document in a way that impacts the semantic model."
msgstr ""

msgid ""
"From the GMF side, we followed the default procedure and created a gmfgraph mo"
"del, a gmftool model and a gmfmap model referring to the Ecore model derived f"
"orm the Xtext grammar. We changed some settings in the gmfgen model derived by"
" GMF from the gmfmap model, namely to enable printing and to enable validation"
" and validation decorators. Then we generated the diagram editor."
msgstr ""

msgid ""
"Fullname:\n"
"    (firstname=ID)? lastname=ID;\n"
"```"
msgstr ""

msgid ""
"Furthermore it's a good idea to have some kind of conflict resolution strategy"
" to be able to distinguish between equally named elements that actually are di"
"fferent, e.g. properties may have the very same qualified name as entities."
msgstr ""

msgid ""
"Furthermore, each type that is added to the currently possible return types au"
"tomatically extends the current return type of the parser rule. You can specif"
"y additional common super types by means of \"artificial\" parser rules that are"
" never called, e.g."
msgstr ""

msgid ""
"GMF's generated parser for the labels is a bit poor: It will work on attribute"
"s only, and will fail for cross-references, e.g. an attribute's type. So why n"
"ot use the Xtext parser to process the user's input?"
msgstr ""

msgid ""
"Generally speaking, the instance is created as soon as the parser hits the fir"
"st assignment. However, actions allow to explicitly instantiate any [EObject]("
"{{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObje"
"ct.java). The notation `{TypeB}` will create an instance of *TypeB* and assign"
" it to the result of the parser rule. This allows to define parser rules witho"
"ut any assignment and to create objects without the need to introduce unnecess"
"ary delegate rules."
msgstr ""

msgid "Given the following simple Java class (POJO):"
msgstr ""

msgid ""
"Greeting:\n"
"    'Hello' name=ID '!';\n"
"```"
msgstr ""
"Greeting:\n"
"    'Hello' name=ID '!';\n"
"```"

msgid ""
"Guice of course needs to know how to instantiate real objects for declared dep"
"endencies. This is done in so-called Modules. A [Module]({{site.javadoc.guice}"
"}/com/google/inject/Module.html) defines a set of mappings from types to eithe"
"r existing instances, instance providers or concrete classes. Modules are impl"
"emented in Java. Here's an example:"
msgstr ""

msgid "Have fun!"
msgstr ""

msgid ""
"Having an Xtext editor and a canonical GMF editor on the same resource can the"
"refore lead to loss of notational information, as a change in the Xtext editor"
" will remove a subtree in the AST, causing the *CanonicalEditPolicy* to remove"
" all notational elements, even though it was customized by the user. Xtext reb"
"uilds the AST and the notation model is restored using the default mapping. It"
" is therefore not recommended to let an Xtext editor and a canonical GMF edito"
"r work on the same resource."
msgstr ""

msgid ""
"Having one method per binding allows to deactivate individual bindings by over"
"riding the corresponding methods and either change the binding by returning a "
"different target type or removing that binding completely by returning null."
msgstr ""

msgid ""
"Hence, there is the [ISyntaxErrorMessageProvider]({{site.src.xtext_core}}/org."
"eclipse.xtext/src/org/eclipse/xtext/parser/antlr/ISyntaxErrorMessageProvider.j"
"ava) to assign issue codes to syntactical errors."
msgstr ""

msgid ""
"Here all code that is specific to Eclipse is located. All the additions that y"
"ou place for the UI of the language, all editors, wizards and preferences, are"
" to be placed inside this project. Regarding the maven build the `pom.xml` is "
"not very special."
msgstr ""
"Eclipse固有の全てのコードはここに配置されます。追加する言語、すべてのエディタ、ウィザードそして設定のUIはこのプロジェクトの中に配置されます。Mav"
"enのビルドに関しては`pom.xml`は特別なものではありません。"

msgid ""
"Here is a left-factored grammar (not yet working with Xtext) for the expressio"
"n language above:"
msgstr ""

msgid ""
"Hidden terminals may optionally appear between any other terminals in any card"
"inality. They can be described per rule or for the whole grammar. When [reusin"
"g a single grammar](301_grammarlanguage.html#grammar-mixins) its definition of"
" hidden tokens is reused, too. The grammar `org.eclipse.xtext.common.Terminals"
"` comes with a reasonable default and hides all comments and white spaces from"
" the parser rules."
msgstr ""

msgid ""
"How to Test the Website\n"
"======================="
msgstr ""
"Websiteをテストする方法\n"
"======================="

msgid ""
"However in the case of the expression grammar above, all rules need to return "
"the same type since they are recursive. In order to make the grammar valid, a "
"common return type has to be added explicitly (but the grammar is still missin"
"g some bits):"
msgstr ""

msgid ""
"However with a textual concrete syntax we want to be able to compute fragments"
" out of the human readable information. We don't want to force people to use U"
"UIDs (i.e. synthetic identifiers) or fragile, relative, generic paths in order"
" to refer to [EObjects]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org"
"/eclipse/emf/ecore/EObject.java)."
msgstr ""

msgid ""
"Identifiers are used to name all constructs, such as types, methods and variab"
"les. Xbase uses the default identifier-syntax from Xtext - compared to Java, t"
"hey are slightly simplified to match the common cases while having less ambigu"
"ities. They start with a letter *a*-*z*, *A*-*Z* or an underscore/dollar symbo"
"l followed by more of these characters or any digit *0*-*9*."
msgstr ""

msgid ""
"Identifiers must not have the same spelling as any reserved keyword. However, "
"this limitation can be avoided by escaping identifiers with the prefix `^`. Es"
"caped identifiers are used in cases when there is a conflict with a reserved k"
"eyword. Imagine you have introduced a keyword `service` in your language but w"
"ant to call a Java property *service*. In such cases you can use the escaped i"
"dentifier `^service` to reference the Java property."
msgstr ""

msgid ""
"If a lambda expression has a single parameter whose type can be inferred, the "
"declaration of the parameter can be omitted. Use `it` to refer to the paramete"
"r inside the lambda expression's body."
msgstr ""

msgid ""
"If a lambda expression implements an abstract SAM type that offers additional "
"methods, those can be accessed on the receiver `self`:"
msgstr ""

msgid ""
"If a model can not be serialized, an [XtextSerializationException]({{site.src."
"xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parsetree/reconstr/XtextS"
"erializationException.java) is thrown. Possible reasons are listed below:"
msgstr ""

msgid ""
"If a rule defines hidden symbols, you can think of a kind of scope that is aut"
"omatically introduced. Any rule that is called transitively by the declaring r"
"ule uses the same hidden terminals as the calling rule, unless it defines hidd"
"en tokens itself."
msgstr ""

msgid ""
"If in addition to the main language your tests require using other languages f"
"or references from/to your main language, you'll have to parse and load depend"
"ent resources into the same ResourceSet first for cross-reference resolution t"
"o work."
msgstr ""

msgid ""
"If none of the guards matches the default expression is evaluated and returned"
". If no default expression is specified the expression evaluates to the defaul"
"t value of the common type of all available case expressions."
msgstr ""

msgid ""
"If the class path based mechanism doesn't work for your case, Xtext offers an "
"alternative container manager based on plain Eclipse projects: Each project ac"
"ts as a container and the project references (*Properties &rarr; Project Refer"
"ences*) are the visible containers."
msgstr ""

msgid ""
"If the current scope contains a variable named `this` or `it`, the compiler wi"
"ll make all its members available implicitly. That is if one of"
msgstr ""

msgid ""
"If the last argument of a method call is a lambda expression, it can be append"
"ed to the method call. Thus,"
msgstr ""

msgid ""
"If the operators `||` and `&&` are used in a context where the left hand opera"
"nd is of type boolean, the operation is evaluated in short circuit mode, which"
" means that the right hand operand is not evaluated at all in the following ca"
"ses:"
msgstr ""

msgid ""
"If the parent element for the editor is not specified through the options, thi"
"s function looks for an element with `id=\"xtext-editor\"`. If none exists, the "
"function looks for elements with `class=\"xtext-editor\"`."
msgstr ""
"エディターの親要素がオプションで指定されていない場合、この関数は`id=\"xtext-editor\"`の要素を検索します。もし、`id=\"xtext-edi"
"tor\"`の要素がない場合、この関数は`class=\"xtext-editor\"`の要素を検索します。"

msgid ""
"If there are calls of data type rules or terminal rules that do not reside in "
"an assignment, the serializer by default doesn't know which value to use for s"
"erialization."
msgstr ""

msgid ""
"If there is no accessible field on the left operand's type, a method called `s"
"etMyProperty(OneArg)` (JavaBeans setter method) is looked up. It has to take o"
"ne argument of the type (or a super type) of the right hand operand. The retur"
"n value of the assignment will be the return value of the setter method (which"
" is usually of type `void` and therefore the value `null`). As a result the co"
"mpiler translates to:"
msgstr ""

msgid ""
"If you already have an existing EPackage, you can import it using its namespac"
"e URI:"
msgstr "すでにEPackageを持っている場合、ネームスペースURIを用いることでインポートすることができます:"

msgid ""
"If you are done with that, everything will work out of the box. Since each exp"
"ression is now logically contained in an [operation]({{site.src.xtext_extras}}"
"/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmOper"
"ation.java), all the scoping rules and visibility constraints are implied from"
" that context. The framework will take care that the operation's parameters ar"
"e visible inside the operation's body and that the declared return types are v"
"alidated against the actual expression types."
msgstr ""

msgid ""
"If you are importing more than one metamodel, you can add more `referencedReso"
"urce` declarations as required."
msgstr ""

msgid ""
"If you are unsure which entry point to choose for your expressions, consider t"
"he *XBlockExpression*."
msgstr ""

msgid ""
"If you don't like these defaults you'll have to subclass [XtextTemplateContext"
"TypeRegistry]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/"
"xtext/ui/editor/templates/XtextTemplateContextTypeRegistry.java) and configure"
" it via [Guice](302_configuration.html#guicemodules)."
msgstr ""

msgid ""
"If you don't use actions, you'll have to define an alternative and delegate ru"
"les to guide the parser to the right types for the to-be-instantiated objects:"
msgstr ""

msgid ""
"If you go with the default MWE workflow for your language and you haven't used"
" Xbase, you are provided with a callback stub that implements [IGenerator2]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/generator/IGener"
"ator2.java) by extending the [AbstractGenerator]({{site.src.xtext_core}}/org.e"
"clipse.xtext/src/org/eclipse/xtext/generator/AbstractGenerator.java) base clas"
"s. It has three methods that are called from the builder infrastructure whenev"
"er a DSL file has changed or should be translated otherwise. The three paramet"
"ers passed in to those method are:"
msgstr ""

msgid ""
"If you have a look at the example, you'll find seven different projects of whi"
"ch six are for the various aspects of the language and its build. First we hav"
"e the language's runtime project, UI project and test project. In addition we "
"need a feature project, an update site project and a project where we put the "
"parent pom. The seventh project is called `example-project` and is really a sm"
"all application project that uses the built language and triggers the code gen"
"erator through a dedicated maven plug-in. Let's first have a look at how to bu"
"ild the language."
msgstr ""
"プロジェクトを見ると、7つのプロジェクトが存在しているのがわかります。そのうち6つは言語とそのビルドの様々な側面を表しています。まず、言語のランタイムプロジ"
"ェクト、UIプロジェクトとテストプロジェクトがあります。さらに、アップデートサイトプロジェクト、フィーチャープロジェクトとそれらの親pomが格納されたプロジ"
"ェクトを必要とします。この7つのプロジェクトを`example-project`とよび、これは非常に小さいアプリケーションプロジェクトであり専用のMaven"
"プラグインを介して言語のビルドやコード生成のトリガーをかけます。ではさっそく、言語のビルド方法についてみていきましょう。"

msgid ""
"If you have already triggered the 'Generate Xtext Artifacts' action, you shoul"
"d find a stub called *org/example/domainmodel/jvmmodel/DomainmodelJvmModelInfe"
"rrer.xtend* in the src folder. Please replace its contents with the following "
":"
msgstr ""

msgid ""
"If you have stuck to the defaults with regard to naming, cross-referencing, an"
"d indexing, the rename refactoring should not need any customization. Give it "
"a try."
msgstr ""

msgid ""
"If you have the [LabelProviderFragment2]({{site.src.xtext_core}}/org.eclipse.x"
"text.xtext.generator/src/org/eclipse/xtext/xtext/generator/ui/labeling/LabelPr"
"oviderFragment2.xtend) in the list of generator fragments in the MWE2 workflow"
" of your language, it will automatically create stubs and bindings for an [`{M"
"yLang}EObjectLabelProvider`](#eobject-label-provider) and an [`{MyLang}Descrip"
"tionLabelProvider`](#description-label-provider) which you can implement manua"
"lly."
msgstr ""

msgid ""
"If you know EBNF a bit and wouldn't think about avoiding left recursion, opera"
"tor precedence or associativity, you'ld probably write a grammar like this:"
msgstr ""

msgid ""
"If you need an [IContainer.Manager]({{site.src.xtext_core}}/org.eclipse.xtext/"
"src/org/eclipse/xtext/resource/IContainer.java) that is independent of Eclipse"
" projects, you can use the [ResourceSetBasedAllContainersState]({{site.src.xte"
"xt_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/Resource"
"SetBasedAllContainersState.java). This one can be configured with a mapping of"
" container handles to resource URIs."
msgstr ""

msgid ""
"If you prefer to implement the quick fix in terms of the semantic model use an"
" [ISemanticModification]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/o"
"rg/eclipse/xtext/ui/editor/model/edit/ISemanticModification.java) instead. Its"
" `apply(EObject, IModificationContext)` method will be invoked inside a modify"
"-transaction and the first argument will be the erroneous semantic element. Th"
"is makes it very easy for the fix method to modify the model as necessary. Aft"
"er the method returns the model as well as the Xtext editor's content will be "
"updated accordingly. If the method fails (throws an exception) the change will"
" not be committed. The following snippet shows a semantic quick fix for a simi"
"lar problem."
msgstr ""

msgid ""
"If you specify a value for the `resourceId` option, the language may be identi"
"fied from the file extension included in that id. In this case it is not neces"
"sary to provide the `xtextLang` option. Another effect of using `resourceId` i"
"s that the server will try to load the respective resource from its persistenc"
"e layer. The Xtext server does not define any default persistence, so you have"
" to customize it as described in the [Persistence](#persistence) section in or"
"der to use this approach."
msgstr ""
"`resourceId`オプションに値を指定した場合、言語はidに含まれるファイル拡張子から識別される。この場合、`xtextLang`オプションを提供する"
"必要はありません。`resourceId`の使用によるもう1つの効果は、サーバーが永続化層からそれぞれのリソースのロードを試みることです。Xtextサーバー"
"はデフォルトの永続化を定義していないので、この方法を用いるためには[Persistence](#persistence)節に記載に従ってカスタマイズをする必"
"要があります。"

msgid ""
"If you use the common terminals grammar `org.eclipse.xtext.common.Terminals` y"
"ou should extend the [DefaultTerminalConverters]({{site.src.xtext_core}}/org.e"
"clipse.xtext/src/org/eclipse/xtext/common/services/DefaultTerminalConverters.j"
"ava) and override or add value converters by adding the respective methods. In"
" addition to the explicitly defined converters in the default implementation, "
"a delegating converter is registered for each available [EDataType]({{site.src"
".emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EDataType.java)"
". The delegating converter reuses the functionality of the corresponding EMF ["
"EFactory]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/e"
"core/EFactory.java)."
msgstr ""

msgid ""
"If you want to allow any character you can simply write the wildcard operator "
"`.` (dot). Example:"
msgstr ""

msgid ""
"If you want to define a `ChangeKind` from [org.eclipse.emf.ecore.change/model/"
"Change.ecore](https://github.com/eclipse/emf/blob/master/plugins/org.eclipse.e"
"mf.ecore.change/model/Change.ecore) with *ADD*, *MOVE* and *REMOVE* you could "
"write:"
msgstr ""

msgid ""
"If you want to define the scope for the *superElement* cross-reference, the fo"
"llowing Java code is one way to go."
msgstr ""

msgid ""
"If you want to enforce the creation of an instance with specific type you can "
"use simple actions. In the following example *TypeB* must be a subtype of *Typ"
"eA*. An expression `A ident` should create an instance of *TypeA*, whereas `B "
"ident` should instantiate *TypeB*."
msgstr ""

msgid ""
"If you want to implement your own communication channel to provide the languag"
"e-specific services without using XtextServlet, you can do so by injecting an "
"instance of [XtextServiceDispatcher]({{site.src.xtext_web}}/org.eclipse.xtext."
"web/src/main/java/org/eclipse/xtext/web/server/XtextServiceDispatcher.java) an"
"d calling `getService(IServiceContext)`. The input to this method is an [IServ"
"iceContext]({{site.src.xtext_web}}/org.eclipse.xtext.web/src/main/java/org/ecl"
"ipse/xtext/web/server/IServiceContext.java), which must be implemented to prov"
"ide the request parameters and the client session. The return value is a descr"
"iptor that can be used to invoke the actual service. Furthermore, [XtextServic"
"eDispatcher]({{site.src.xtext_web}}/org.eclipse.xtext.web/src/main/java/org/ec"
"lipse/xtext/web/server/XtextServiceDispatcher.java) can be subclassed in order"
" to add custom services with access to the document AST and all related Xtext "
"APIs."
msgstr ""
"Xtextサーブレットを用いずに言語固有サービスを提供するための独自の通信チャンネルを実装する場合、[XtextServiceDispatcher]({{s"
"ite.src.xtext_web}}/org.eclipse.xtext.web/src/main/java/org/eclipse/xtext/web/"
"server/XtextServiceDispatcher.java)インターフェースをインジェクトし、`getService(IServiceContex"
"t)`を呼び出すことで実現できます。引数である[IServiceContext]({{site.src.xtext_web}}/org.eclipse.xt"
"ext.web/src/main/java/org/eclipse/xtext/web/server/IServiceContext.java)は要求パラメ"
"ータとクライアントセッションを提供するために実装しなければなりません。さらに、[XtextServiceDispatcher]({{site.src.xte"
"xt_web}}/org.eclipse.xtext.web/src/main/java/org/eclipse/xtext/web/server/Xtex"
"tServiceDispatcher.java)をサブクラス化して、ドキュメントASTと関連する全てのXtext APIにアクセスするためのカスタムサービス"
"を追加することもできます。"

msgid ""
"If you want to play around with Xtend, you can try to use the Xtend tutorial w"
"hich can be materialized into your workspace. Simply choose *New &rarr; Exampl"
"e &rarr; Xtend Examples &rarr; Xtend Introductory Examples* and have a look at"
" the features of Xtend. As a small exercise, you could implement support for t"
"he *many* attribute of a *Feature* or enforce naming conventions, e.g. generat"
"ed field names should start with an underscore."
msgstr ""

msgid ""
"If you want to refer to [EClassifiers]({{site.src.emf}}/plugins/org.eclipse.em"
"f.ecore/src/org/eclipse/emf/ecore/EClassifier.java) from the Xbase model, you "
"need to import Xbase first:"
msgstr ""

msgid ""
"If you want to use multiple EPackages you need to specify aliases in the follo"
"wing way:"
msgstr "もし複数のEPackageを使用するのであれば、次の方法でエイリアスを指定する必要があります:"

msgid ""
"If you would like to see what's in the index, you could use the 'Open Model El"
"ement' dialog from the navigation menu entry."
msgstr ""

msgid ""
"If you would like to specify a `resourceId` without using the persistence serv"
"ices shipped with Xtext, you can do so by setting the option `loadFromServer` "
"to `false`."
msgstr ""
"もしXtext付属の永続化サービスを使用せずに`resourceId`を指定したい場合、`loadFromServer`オプションを`false`に設定して"
"ください。"

msgid ""
"If your grammar uses an imported [EPackage]({{site.src.emf}}/plugins/org.eclip"
"se.emf.ecore/src/org/eclipse/emf/ecore/EPackage.java), there may be an existin"
"g *edit*-plug-in generated by EMF that also provides label providers for model"
" elements. To use this as a fallback, your label provider should call the cons"
"tructor with the delegate parameter and use dependency injection for its initi"
"alization, e.g."
msgstr ""

msgid ""
"If your workflow defines the [OutlineTreeProviderFragment2]({{site.src.xtext_c"
"ore}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/"
"ui/outline/OutlineTreeProviderFragment2.xtend), Xtext generates a stub for you"
"r own [IOutlineTreeProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/s"
"rc/org/eclipse/xtext/ui/editor/outline/IOutlineTreeProvider.java) that allows "
"you to customize every aspect of the outline by inheriting the powerful custom"
"ization methods of [DefaultOutlineTreeProvider]({{site.src.xtext_eclipse}}/org"
".eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/outline/impl/DefaultOutlineT"
"reeProvider.java). The following sections show how to fill this stub with life"
"."
msgstr ""

msgid ""
"Implementations of the [ITokenScanner]({{site.javadoc.eclipse-platform}}/org/e"
"clipse/jface/text/rules/ITokenScanner.html) are responsible for splitting the "
"content of a document into various parts, the so called tokens, and return the"
" highlighting information for each identified range. It is critical that this "
"is done very fast because this component is used on each keystroke. Xtext ship"
"s with a default implementation that is based on the lexer that is generated b"
"y ANTLR which is very lightweight and fast. This default implementation can be"
" customized by clients easily. They simply have to bind another implementation"
" of the [AbstractAntlrTokenToAttributeIdMapper]({{site.src.xtext_eclipse}}/org"
".eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/AbstractAntlr"
"TokenToAttributeIdMapper.java). To get an idea about it, have a look at the [D"
"efaultAntlrTokenToAttributeIdMapper]({{site.src.xtext_eclipse}}/org.eclipse.xt"
"ext.ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/DefaultAntlrTokenToAttri"
"buteIdMapper.java)."
msgstr ""

msgid ""
"Implementors of a formatter should extend [AbstractFormatter2]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/AbstractFormatter"
"2.java) and add dispatch methods for the model elements that should be formatt"
"ed. The format routine has to be invoked recursively if the children of an obj"
"ect should be formatted, too."
msgstr ""

msgid ""
"Import:\n"
"    'import' importedNamespace=QualifiedNameWithWildcard;"
msgstr ""
"Import:\n"
"    'import' importedNamespace=QualifiedNameWithWildcard;"

msgid ""
"In OSGi you provide configuration by creating a fragment for *org.apache.log4j"
"*. In this case you need to make sure that there is not any second fragment co"
"ntributing a *log4j.properties* file."
msgstr ""

msgid ""
"In Xtext you define the precedence implicitly when left-factoring such a gramm"
"ar. Left-factoring means you get rid of left recursion by applying a certain i"
"diom, which is described in the following."
msgstr ""

msgid "In Xtext, the process of serialization is split into the following steps:"
msgstr ""

msgid ""
"In a project template the method `generateProjects(IProjectGenerator)` needs t"
"o be overridden. The parameter instance offers a single `generate` method that"
" takes an instance of [ProjectFactory]({{site.src.xtext_eclipse}}/org.eclipse."
"xtext.ui/src/org/eclipse/xtext/ui/util/ProjectFactory.java). Using this class,"
" or available subclasses, all kind of projects can be generated by the templat"
"e. The following illustrates a simple example to generate a plugin project wit"
"h a template:"
msgstr ""

msgid ""
"In addition to the afore mentioned kinds of validation, which are more or less"
" done automatically, you can specify additional constraints specific for your "
"Ecore model. The Xtext language generator will provide you two Java classes. T"
"he first is an abstract class generated to *src-gen/* which extends the librar"
"y class [AbstractDeclarativeValidator]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/validation/AbstractDeclarativeValidator.java). This o"
"ne just registers the EPackages for which this validator introduces constraint"
"s. The other class is a subclass of that abstract class and is generated to th"
"e *src/* folder in order to be edited by you. That is where you put the constr"
"aints in."
msgstr ""

msgid ""
"In addition to the case guards one can add a so called *Type Guard* which is s"
"yntactically just a [type reference](#xbase-types-type-references) preceding t"
"he optional case keyword. The compiler will use that type for the switch expre"
"ssion in subsequent expressions. Example:"
msgstr ""

msgid ""
"In addition to the standard template proposal extension mechanism, Xtext ships"
" with a predefined set of [TemplateVariableResolvers]({{site.javadoc.eclipse-p"
"latform}}/org/eclipse/jface/text/templates/TemplateVariableResolver.html) to r"
"esolve special variable types in templates. Besides the standard template vari"
"ables available in [GlobalTemplateVariables]({{site.javadoc.eclipse-platform}}"
"/org/eclipse/jface/text/templates/GlobalTemplateVariables.html) like `${user}`"
", `${date}`, `${time}`, `${cursor}`, etc., these [TemplateVariableResolvers]({"
"{site.javadoc.eclipse-platform}}/org/eclipse/jface/text/templates/TemplateVari"
"ableResolver.html) support the automatic resolution of cross references enumer"
"ation values. Both resolvers are explained in the following sections."
msgstr ""

msgid ""
"In addition to these elements, there are some expressions used to direct how t"
"he AST is constructed. They are listed and explained in the following."
msgstr ""

msgid ""
"In addition, by defining the *QualifiedName* as a data type rule, it is allowe"
"d to use hidden tokens such as `/* comment */` between the segment IDs and dot"
"s (e.g. `foo/* comment */. bar . Baz`)."
msgstr ""

msgid ""
"In an Eclipse workspace, files, folders, projects can have individual encoding"
"s, which are stored in the hidden file *.settings/org.eclipse.core.resources.p"
"refs* in each project. If a resource does not have an explicit encoding, it in"
"herits the one from its parent recursively. Eclipse chooses the native platfor"
"m encoding as the default for the workspace root. You can change the default w"
"orkspace encoding in the Eclipse preferences *Preferences &rarr; Workspace &ra"
"rr; Default text encoding*. If you develop on different platforms, you should "
"consider choosing an explicit common encoding for your text or code files, esp"
"ecially if you use special characters."
msgstr ""

msgid ""
"In an Xtext editor, changes in the text are transferred to the underlying [Xte"
"xtResource]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/re"
"source/XtextResource.java) by a call to the method [XtextResource.update(int, "
"int, String)]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/"
"resource/XtextResource.java), which will trigger a partial parsing of the dirt"
"y text region and a replacement of the corresponding subtree in the AST model "
"(semantic model)."
msgstr ""

msgid ""
"In case of a whitespace-aware language, the [formatter](303_runtime_concepts.h"
"tml#formatting) must be either adapted to produce whitespace that correctly re"
"flects the document structure, or it must be deactivated. Otherwise automatic "
"formatting might produce code with different semantics or even syntax errors. "
"See how we [customized the formatter]({{site.src.xtext_eclipse}}/org.eclipse.x"
"text.xtext.ui.examples/projects/homeautomation/org.eclipse.xtext.example.homea"
"utomation/src/org/eclipse/xtext/example/homeautomation/formatting2/RuleEngineF"
"ormatter.xtend) in the Xtext Home Automation example."
msgstr ""

msgid ""
"In contrast to EAttributes, *EReferences* point to other EClasses. The *contai"
"nment* flag indicates whether an EReference is a *containment reference* or a "
"*cross-reference*. In the diagram, references are edges and containment refere"
"nces are marked with a diamond. At the model level, each element can have at m"
"ost one container, i.e. another element referring to it with a containment ref"
"erence. This infers a tree structure to the models, as can be seen in the samp"
"le model diagram. On the other hand, *cross-references* refer to elements that"
" can be contained anywhere else. In the example, *elements* and *properties* a"
"re containment references, while *type* and *extends* are cross-references. Fo"
"r reasons of readability, we skipped the cross-references in the sample model "
"diagram. Note that in contrast to other parser generators, Xtext creates ASTs "
"with linked cross-references."
msgstr ""

msgid ""
"In contrast to Java, equal string literals within the same class do not necess"
"arily refer to the same instance at runtime, especially in the interpreted mod"
"e."
msgstr ""

msgid ""
"In contrast to [semantic highlighting](#semantic-highlighting), syntax highlig"
"hting can be computed purely in JavaScript without requiring a connection to t"
"he server. This is realized with the highlighting capabilities of the employed"
" editor libraries. All three libraries offer a JavaScript API for specifying h"
"ighlighting rules. The `WebIntegrationFragment` of the Xtext language generato"
"r is able to generate a highlighting specification that includes keywords and "
"some basic tokens such as numbers and comments (see [The Language Generator](3"
"02_configuration.html#generator)). If the highlighting generated in this way i"
"s not sufficient, you can still implement the specification yourself following"
" the documentation of the chosen editor library."
msgstr ""
"[セマンティックハイライト](#semantic-highlighting)と対照的に、シンタックスハイライトはサーバーへの接続要求なく純粋にJavascr"
"ipt内で計算できます。これは使っているエディターライブラリーのハイライト機能を用いて実現されます。3つの全てのライブラリーはハイライトルールを指定するため"
"のJavaScript APIを提供しています。Xtext言語ジェネレーターの`WebIntegrationFragment`は、数値やコメントといった基礎"
"的なトークンやキーワードを含むハイライト仕様を生成することができます。 ([言語ジェネレーター](302_configuration.html#genera"
"tor)参照)もし、Xtext言語ジェネレーターが生成したものが不十分であるならば、選択したエディターライブラリーのドキュメントに従い、自身で仕様を実装する"
"ことができます。"

msgid ""
"In contrast to a terminal rule this is only valid in certain contexts, i.e. it"
" won't conflict with the rule *ID*. If you had defined it as a terminal rule, "
"it would possibly hide the simple *ID* rule."
msgstr ""

msgid "In contrast, the parser refuses to accept these input lines:"
msgstr ""

msgid ""
"In every application wired up with Guice there is usually one point where you "
"initialize an [Injector]({{site.javadoc.guice}}/com/google/inject/Injector.htm"
"l) using the modules declared. Usually this is done with the static methods of"
" [Guice]({{site.javadoc.guice}}/com/google/inject/Guice.html). In Xtext, howev"
"er, you should never instantiate the injector of your language yourself."
msgstr ""

msgid ""
"In fact the class path scope should also reflect the order of class path entri"
"es. For instance:"
msgstr ""

msgid "In in this case just remove the JDT stuff in this way:"
msgstr ""

msgid ""
"In its default implementation, the outline view shows the containment hierarch"
"y of your model. This should be sufficient in most cases. If you want to adjus"
"t the structure of the outline, i.e. by omitting a certain kind of node or by "
"introducing additional nodes, you can customize the outline by implementing yo"
"ur own [IOutlineTreeProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/"
"src/org/eclipse/xtext/ui/editor/outline/IOutlineTreeProvider.java)."
msgstr ""

msgid ""
"In many cases, you will want your DSLs concepts to be usable as Java elements,"
" e.g. an *Entity* will become a Java class and should be usable as such. In th"
"e domain model example, you can write"
msgstr ""

msgid ""
"In order to allow seamless integration with existing Java libraries such as th"
"e JDK or Google Guava (formerly known as Google Collect) lambda expressions ar"
"e auto coerced to expected types if those types declare only one abstract meth"
"od (methods from `java.lang.Object` don't count)."
msgstr ""

msgid ""
"In order to be able to find the referenced package in the language generator, "
"its Ecore generator model has to be mentioned in the language configuration:"
msgstr ""

msgid ""
"In order to get started we first need to create some Eclipse projects. Use the"
" Eclipse wizard to do so:"
msgstr "まず初めに、Eclipseプロジェクトを作る必要があります。Eclipseウィザードから以下の操作を行います。"

msgid ""
"In order to know what is available in the \"world\", a global scope provider whi"
"ch relies on external configuration needs to read that configuration in and be"
" able to find all candidates for a certain [EReference]({{site.src.emf}}/plugi"
"ns/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EReference.java). If you do"
"n't want to force users to have a folder and file name structure reflecting th"
"e actual qualified names of the referenceable [EObjects]({{site.src.emf}}/plug"
"ins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java), you'll have"
" to load all resources up front and either keep holding them in memory or reme"
"mber all information which is needed for the resolution of cross-references. I"
"n Xtext that information is provided by a so-called [IEObjectDescription]({{si"
"te.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IEObjectD"
"escription.java)."
msgstr ""

msgid ""
"In order to make `events`, `resetEvents` and `commands` foldable too, a custom"
" implementation of the [DefaultFoldingRegionProvider]({{site.src.xtext_eclipse"
"}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/folding/DefaultFolding"
"RegionProvider.java) is necessary:"
msgstr ""

msgid ""
"In order to make elements of one file referable from another file, you need to"
" export them as part of a so called [IResourceDescription]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescription.jav"
"a)."
msgstr ""

msgid ""
"In order to obtain a [Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/resource/IResourceDescription.java) it is best to ask the cor"
"responding [IResourceServiceProvider]({{site.src.xtext_core}}/org.eclipse.xtex"
"t/src/org/eclipse/xtext/resource/IResourceServiceProvider.java) as shown above"
". That is because each language might have a totally different implementation,"
" and as you might refer from one language to a different language you cannot r"
"euse the [Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/resource/IResourceDescription.java) of the first language."
msgstr ""

msgid ""
"In other words, the return type of a Java method that returns an array of ints"
" (`int[]`) can be directly assigned to a variable of type [List\\<Integer\\>]({{"
"site.javadoc.java}}/java/util/List.html). Due to type inference this conversio"
"n happens implicitly. The conversion is bi-directional: Any method that takes "
"an array as argument can be invoked with an argument that has the type `List<C"
"omponentType>` instead."
msgstr ""

msgid ""
"In practice this is always the same pattern and therefore not too difficult. H"
"owever, by simply applying the Xtext AST construction features we've covered s"
"o far, a grammar such as"
msgstr ""

msgid ""
"In rule *Addition* there is a similar group but this time it expects the corre"
"ct operator. The parser steps into the group. The first element in the group i"
"s an assigned action. It will create a new instance of type *Addition* and ass"
"igns what was the to-be-returned object to the feature 'left'. In Java this wo"
"uld have been something like:"
msgstr ""

msgid ""
"In some cases you may want to be able to reference an [EObject]({{site.src.emf"
"}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) of an"
" Xtext model from another EMF artifact that is not managed by Xtext. In those "
"cases URIs are used, which are made up of a part identifying the resource and "
"a second part that points to an object. Each [EObject]({{site.src.emf}}/plugin"
"s/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) contained in a"
" resource can be identified by a so called *fragment*."
msgstr ""

msgid ""
"In some cases, e.g. if your *SHIFT* key is broken, you might want to design a "
"case insensitive language. Xtext offers options on some of its [generator frag"
"ments](302_configuration.html#generator-fragment) for this purpose."
msgstr ""

msgid ""
"In some occasions this simple way of referencing metamodels is not sufficient;"
" you can then use the [StandaloneSetup]({{site.src.mwe}}/plugins/org.eclipse.e"
"mf.mwe.utils/src/org/eclipse/emf/mwe/utils/StandaloneSetup.java) as a Workflow"
" bean for fine-tuning your EMF setup. Example:"
msgstr ""

msgid ""
"In such cases, the right hand expression's type must [conform](#xbase-types-co"
"nformance-rules) to the type on the left hand side."
msgstr ""

msgid ""
"In the *UIModule* of your language you have to overwrite two bindings. First, "
"remove the bindings to components with support for the *'classpath:'* URI prot"
"ocol, i.e."
msgstr ""

msgid ""
"In the Eclipse UI scenario, when there is a workspace, users will expect the e"
"ncoding of the model files to be settable the same way as for other files in t"
"he workspace. The default implementation of the [IEncodingProvider]({{site.src"
".xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parser/IEncodingProvider"
".java) in the Eclipse context therefore returns the file's workspace encoding "
"for files in the workspace and delegates to the runtime implementation for all"
" other resources, e.g. models in a jar or from a deployed plug-in. Keep in min"
"d that you are going to lose the workspace encoding information as soon as you"
" leave this workspace, e.g. deploy your project."
msgstr ""

msgid ""
"In the [domainmodel tutorial](102_domainmodelwalkthrough.html) there are no ex"
"plicitly defined terminal rules, since it only uses the *ID* rule which is inh"
"erited from the grammar `org.eclipse.xtext.common.Terminals` (see [Common Term"
"inals](#common-terminals)). Therein the *ID* rule is defined as follows:"
msgstr ""

msgid ""
"In the `src` folder of the `ui` project a `MyDslProjectTemplateProvider` Xtend"
" file will be generated, where you can specify the templates the user can sele"
"ct from to generate new projects."
msgstr ""

msgid ""
"In the end we want to be able to split the previously used model into distinct"
" files:"
msgstr "最後に、これまで使っていたモデルを異なるファイルに分割します。"

msgid ""
"In the example above `{Operation.left=current}` is a so-called *tree rewrite a"
"ction*, which creates a new instance of the stated [EClass]({{site.src.emf}}/p"
"lugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java) *Operation"
"* and assigns the element currently to-be-returned (the `current` variable) to"
" a feature of the newly created object. The example uses the feature *left* of"
" the *Operation* instance to store the previously returned *Expression*. In Ja"
"va these semantics could be expressed as:"
msgstr ""

msgid ""
"In the example, we started with writing an Xtext grammar for an entity languag"
"e. As explained above, we preferred optional assignments and rather covered ma"
"ndatory attributes later in a validator. Into the bargain, we added some servi"
"ces to improve the EMF integration, namely a formatter, a fragment provider an"
"d an unloader. Then we let Xtext generate the language infrastructure. From th"
"e derived Ecore model and its generator model, we generated the edit plug-in ("
"needed by GMF) and added some fancier icons."
msgstr ""

msgid ""
"In the first stage called *lexing*, a sequence of characters (the text input) "
"is transformed into a sequence of so-called *tokens*. In this context, a token"
" is a sort of a strongly typed part or region of the input sequence. It consis"
"ts of one or more characters and is matched by a particular terminal rule or k"
"eyword and therefore represents an atomic symbol. Terminal rules are also refe"
"rred to as *token rules* or *lexer rules*. There is an informal naming convent"
"ion that names of terminal rules are all upper-case."
msgstr ""

msgid ""
"In the following example taken from the *DomainmodelValidator* the diagnostic'"
"s *code* is given by the third argument to the `warning()` method and it is a "
"reference to the static [String]({{site.javadoc.java}}/java/lang/String.html) "
"field `INVALID_TYPE_NAME` in the `IssueCodes` interface."
msgstr ""

msgid ""
"In the following the different concepts and syntactical constructs of the gram"
"mar language are explained."
msgstr "以下に、複数の概念と文法言語の構文構造を説明します。"

msgid ""
"In the following we see an exemplary language generator configuration written "
"in MWE2:"
msgstr ""

msgid ""
"In the new workbench, create a Java project (*File &rarr; New &rarr; Project.."
". &rarr; Java Project*). Xbase relies on a small runtime library on the class "
"path. To add this, right-click on the project and go to *Java Build Path &rarr"
"; Libraries &rarr; Add Library* and choose *Xtend Library*. Then create a new "
"file with the file extension you chose in the beginning (*\\*.dmodel*) in the s"
"ource folder of the Java project. This will open the generated entity editor. "
"Try it and discover the rich editor functionality it provides. You should also"
" have a look at the preferences of your language to find out what can be indiv"
"idually configured to your users needs."
msgstr ""

msgid ""
"In the simple scoping example above we don't have references across model file"
"s. Neither is there a concept like a namespace which would make scoping a bit "
"more complicated. Basically, every *Element* declared in the same resource is "
"visible by its name. However, in the real world things are most likely not tha"
"t simple: What if you want to reuse certain declared elements across different"
" files and you want to share those as library between different users? You wou"
"ld want to introduce some kind of cross-resource reference."
msgstr ""

msgid ""
"In this case an *INT* is comprised of one or more (note the `+` operator) char"
"acters between (and including) `'0'` and `'9'`."
msgstr ""

msgid ""
"In this case, your runtime module should use the StateBasedContainerManager as"
" shown above and the Eclipse UI module should bind"
msgstr ""

msgid ""
"In this example, we let each editor use its own memory instance of the model a"
"nd synchronize on file changes only. Both frameworks already synchronize with "
"external changes to the edited files out-of-the-box. In the glue code, a *org."
"eclipse.xtext.gmf.glue.concurrency.ConcurrentModificationObserver* warns the u"
"ser if he/she tries to edit the same file with two different model editors con"
"currently."
msgstr ""

msgid ""
"In this lesson you will generate Java Beans for entities that are defined in t"
"he domainmodel DSL. For each *Entity*, a Java class is generated and each *Fea"
"ture* will lead to a private field in that class including public getters and "
"setters. For the sake of simplicity, we will use fully qualified names all ove"
"r the generated code."
msgstr ""

msgid ""
"In this tutorial we will basically implement the [domain model language](https"
"://www.eclipse.org/Xtext/documentation/103_domainmodelnextsteps.html) again, b"
"ut this time we will make use of the special JVM support shipped with Xtext. T"
"his kind of language is really a sweet spot for DSLs, so feel free to use this"
" as a blueprint and add your project specific features later on."
msgstr ""

msgid ""
"In this tutorial we will implement a small domain-specific language to model e"
"ntities and properties similar to what you may know from Rails, Grails or Spri"
"ng Roo. The syntax is very suggestive:"
msgstr ""
"このチュートリアルでは、Rails、GrailsやSpring Rooのように、エンティティとプロパティをモデル化するための小さなドメイン固有言語を実装しま"
"す。この構文はとても示唆に富んでいます。"

msgid ""
"Initializes Xtext services for an already created editor. Use this variant if "
"you want full control over the editor creation."
msgstr "生成済みのエディターに対してXtextサービスを初期化します。エディターの生成を完全にコントロールしたい場合は、この変数を使ってください。"

msgid ""
"Instead of explicitly referring to imported resources, another option is to ha"
"ve some kind of external configuration in order to define what is visible from"
" outside a resource. Java for instance uses the notion of the class path to de"
"fine containers (jars and class folders) which contain referenceable elements."
" In the case of Java the order of such entries is also important."
msgstr ""

msgid "Instead of writing"
msgstr ""

msgid "Instead one has to rewrite such left-recursive rules by \"left-factoring\" them:"
msgstr ""

msgid ""
"It always starts with the first rule *Addition*. Therein the first element is "
"an unassigned rule call to *Multiplication* which in turn calls *Primary*. *Pr"
"imary* now has two alternatives. The first one is calling *NumberLiteral* whic"
"h consists only of one assignment to a feature called 'value'. The type of 'va"
"lue' has to be compatible to the return type of the *INT* rule."
msgstr ""

msgid ""
"It is also supported to put multiple EPackage imports into one alias. This is "
"no problem as long as there are not any two [EClassifiers]({{site.src.emf}}/pl"
"ugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.java) with t"
"he same name. In that case none of them can be referenced. It is even possible"
" to `import` multiple and `generate` one Ecore model and declare all of them w"
"ith the same alias. If you do so, for a reference to an [EClassifier]({{site.s"
"rc.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.j"
"ava) first the imported [EPackages]({{site.src.emf}}/plugins/org.eclipse.emf.e"
"core/src/org/eclipse/emf/ecore/EPackage.java) are scanned before it is assumed"
" that a type needs to be generated into the inferred package."
msgstr ""
"複数のEPckageインポートを1つのエイリアスに入れることもサポートされています。これは、[EClassifiers]({{site.src.emf}}/"
"plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.java)に同じ名前"
"のものが2つない限り問題ありません。同じ名前のものが存在する場合、どれも参照できません。複数のEcoreモデルを`import`し、1つのEcoreモデルを"
"`generate`し、そしてそれら全てを同じエイリアスを用いて宣言することも可能です。その場合、[EClassifier]({{site.src.emf}"
"}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.java)を参照"
"するため、最初にインポートされた[EPackages]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src"
"/org/eclipse/emf/ecore/EPackage.java)がスキャンされ、その後、推測されたパッケージから型を生成する必要があるとみなされま"
"す。"

msgid ""
"It is best practice to edit the templates in the preferences page, export them"
" into the *templates.xml* file and put the file into the *templates* folder of"
" your UI-plug-in. However, these templates will not be visible by default. To "
"fix it, you have to manually edit the xml-file and insert an `id` attribute fo"
"r each template element. Note that the attribute name is case sensitive. As al"
"ways in Eclipse Plug-In development, if the folder *templates* did not exist b"
"efore, you have to add it to the *bin.includes* in the *build.properties* file"
"."
msgstr ""

msgid ""
"It is even possible to use alternative literals for your enums or reference an"
" enum value twice:"
msgstr ""

msgid ""
"It is important to know that, for a given offset in a model file, many possibl"
"e grammar elements exist. The framework dispatches to the method declarations "
"for any valid element. This means that a bunch of *complete\\** methods may be "
"called."
msgstr ""

msgid ""
"It is important to understand that the text between the square brackets does n"
"ot refer to another rule, but to an [EClass]({{site.src.emf}}/plugins/org.ecli"
"pse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java) &ndash; which is a type a"
"nd not a parser rule. This can be sometimes confusing because one usually uses"
" the same name for the rules and for the returned types."
msgstr ""

msgid ""
"It is not possible to remove fragments from the [StandardLanguage]({{site.src."
"xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/gen"
"erator/StandardLanguage.java). If you need a language configuration where one "
"or more of the default fragments are omitted, you can do so by using [XtextGen"
"eratorLanguage]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/"
"org/eclipse/xtext/xtext/generator/XtextGeneratorLanguage.java) instead and lis"
"ting the required fragments explicitly. You can take the following configurati"
"on as a template:"
msgstr ""

msgid ""
"It is not the duty of the client code to care about where the [IScopeProvider]"
"({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/IScop"
"eProvider.java) implementation comes from or how it is created. When the above"
" class is instantiated, Guice sees that it requires an instance of IScopeProvi"
"der and assigns it to the specified field or method parameter. This of course "
"only works if the object itself is created by Guice. In Xtext almost every ins"
"tance is created that way and therefore the whole dependency net is controlled"
" and configured by the means of Guice."
msgstr ""

msgid ""
"It is possible to throw [Throwable]({{site.javadoc.java}}/java/lang/Throwable."
"html). The syntax is exactly the same as in Java."
msgstr ""

msgid ""
"It is sometimes not easily possible to define an `LL(*)` grammar for a given l"
"anguage that parses all possible valid input files and still produces abstract"
" syntax graphs that mimic the actual structure of the files. There are even ca"
"ses that cannot be described with an unambiguous grammar. There are solutions "
"that allow to deal with this problem:"
msgstr ""

msgid ""
"It says that a token *ID* starts with an optional `'^'` character (caret), fol"
"lowed by a letter `('a'..'z'|'A'..'Z')` or underscore `'_'` followed by any nu"
"mber of letters, underscores and numbers `('0'..'9')`."
msgstr ""

msgid ""
"It's almost in any case recommended to use [data type rules](#datatype-rules) "
"instead. Let's assume you want to add a rule to allow fully qualified names in"
" addition to simple IDs. Since a qualified name with only one segment looks li"
"ke a plain ID, you should implement it as a data type rule instead of adding a"
"nother terminal rule. The same rule of thumb applies to floating point literal"
"s, too."
msgstr ""

msgid ""
"Keywords are a kind of terminal rule literals. The *ID* rule in `org.eclipse.x"
"text.common.Terminals` for instance starts with a keyword:"
msgstr ""

msgid "Lambda expressions are surrounded by square brackets (\\`[]`):"
msgstr ""

msgid ""
"Lambda expressions produce function objects. The type is a [function type](#xb"
"ase-types-function-types), parameterized with the types of the lambda's parame"
"ters as well as the return type. The return type is never specified explicitly"
" but is always inferred from the expression. The parameter types can be inferr"
"ed if the lambda expression is used in a context where this is possible."
msgstr ""

msgid ""
"Languages extending Xbase might want to contribute to the feature scope. Besid"
"es that, one can of course change the whole implementation as it seems fit. Th"
"ere is a special hook, which can be used to add so-called extension methods to"
" existing types."
msgstr ""

msgid ""
"Let's go through the code to get an idea of what is going on. (Please also ref"
"er to the JavaDoc of the used API for details, especially the [JvmTypesBuilder"
"]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbas"
"e/jvmmodel/JvmTypesBuilder.java))."
msgstr ""

msgid "Let's have a look at parsing a simple arithmetic expression:"
msgstr ""

msgid "Let's have a more detailed look at what the different grammar rules mean:"
msgstr "文法ルールの意味を詳しく見ていきましょう。"

msgid ""
"Let's now just replace that grammar definition with the one for our entities l"
"anguage:"
msgstr "さっそく、文法定義をエンティティ言語で置き換えてみましょう。"

msgid "Let's start enhancing the grammar."
msgstr "文法を改良しましょう。"

msgid ""
"Locate the class *DomainmodelValidator* in the package *org.example.domainmode"
"l.validation* of the language project. Defining the constraint itself is only "
"a matter of a few lines of code:"
msgstr ""

msgid ""
"Looking at the syntax definition for cross-references, there is an optional pa"
"rt starting with a vertical bar (pipe) followed by *CrossReferenceableTerminal"
"*. This is the part describing the concrete text from which the cross-referenc"
"e should be established. If the terminal is omitted, it is expected to be the "
"rule with the name *ID* &ndash; if one can be found. The terminal is mandatory"
" for languages that do not define a rule with the name *ID*."
msgstr ""

msgid ""
"MWE2 (Modeling Workflow Engine) allows to compose object graphs declaratively "
"in a very compact manner. The nice thing about it is that it just instantiates"
" Java classes and the configuration is done through public setter and adder me"
"thods as known from Java Beans encapsulation principles. More in-depth informa"
"tion can be found in the [MWE2 documentation](https://github.com/eclipse/mwe/b"
"lob/master/documentation/mwe2.md)."
msgstr ""

msgid ""
"Many languages introduce a concept for qualified names, i.e. names composed of"
" namespaces separated by a delimiter. Since this is such a common use case, Xt"
"ext provides an extensible converter implementation for qualified names. The ["
"QualifiedNameValueConverter]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/conversion/impl/QualifiedNameValueConverter.java) handles comme"
"nts and white spaces gracefully and is capable to use the appropriate value co"
"nverter for each segment of a qualified name. This allows for individually quo"
"ted segments. The domainmodel example shows how to use it."
msgstr ""

msgid ""
"Mixing another grammar into a language makes the rules defined in that grammar"
" referable. It is also possible to overwrite rules from the used grammar. Exam"
"ple:"
msgstr ""

msgid ""
"Model:\n"
"    greetings+=Greeting*;"
msgstr ""
"Model:\n"
"    greetings+=Greeting*;"

msgid "Model: (ruleAs+=RuleA)*;"
msgstr ""

msgid ""
"More detailed information about the API is available as [JavaDoc on the org.ec"
"lipse.xtext.formatting2 package]({{site.src.xtext_core}}/org.eclipse.xtext/src"
"/org/eclipse/xtext/formatting2/package-info.java)."
msgstr ""

msgid ""
"Multiplication returns Expression:\n"
"  Primary ('*' Primary)*;"
msgstr ""

msgid ""
"Multiplication returns Expression:\n"
"  Primary ({Multiplication.left=current} '*' right=Primary)*;"
msgstr ""

msgid ""
"Multiplication:\n"
"  NumberLiteral ('*' NumberLiteral)*;"
msgstr ""

msgid ""
"Multiplication:\n"
"  Primary ('*' Primary)*;"
msgstr ""

msgid ""
"MyOtherRule returns TypeB:\n"
"    \"B\" name = ID;\n"
"```"
msgstr ""

msgid ""
"Non-associativity can be implemented in a similar way, but this time the final"
" rule call is not immediately recursive but delegates to the next precedence l"
"evel:"
msgstr ""

msgid ""
"Not all the expressions that are available in terminal rules can be used in pa"
"rser rules. Character ranges, wildcards, the until token and the negation as w"
"ell as the EOF token are only available for terminal rules."
msgstr ""

msgid ""
"Note that *the order of the terminal rules is crucial for your grammar*, as th"
"ey may shadow each other. This is especially important for newly introduced ru"
"les in connection with imported rules from used grammars."
msgstr ""

msgid ""
"Note that if you want an element of an unordered group to appear once or not a"
"t all, you have to choose a cardinality of `?`. In the example, the visibility"
" is mandatory, while `static` or `final` are optional. Elements with a cardina"
"lity of `*` or `+` have to appear continuously without interruption, i.e."
msgstr ""

msgid ""
"Note that rules that do not call other parser rules and do neither contain any"
" actions nor [assignments](301_grammarlanguage.html#assignments) are considere"
"d to be data type rules, and the data type [EString]({{site.javadoc.java}}/jav"
"a/lang/String.html) is implied if none has been explicitly declared."
msgstr ""

msgid ""
"Note that the method `_text(modelElement)` can return a [String]({{site.javado"
"c.java}}/java/lang/String.html) or a [StyledString]({{site.javadoc.eclipse-pla"
"tform}}/org/eclipse/jface/viewers/StyledString.html). The [StylerFactory]({{si"
"te.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/label/Sty"
"lerFactory.java) can be used to create [StyledStrings]({{site.javadoc.eclipse-"
"platform}}/org/eclipse/jface/viewers/StyledString.html), like in the following"
" example:"
msgstr ""

msgid ""
"Note that there still are synchronization issues, that's why we keep this one "
"marked as experimental."
msgstr ""

msgid ""
"Note that using the same alias for multiple EPackages is not recommended, beca"
"use it might cause problems that are hard to track down. For instance, a refer"
"ence to `classA` could mistakenly be linked to a newly created EClass instead "
"of an existing EClass `ClassA` because the latter is written with a capital le"
"tter."
msgstr ""
"複数のEPackageに対して同じエイリアスをつけることは追跡が困難である問題を引き起こすため非推奨です。例えば、`classA`への参照は既存のEClas"
"s `ClassA`が大文字で書かれているため、既存のEClass `ClassA`ではなく、新規に作成したEClassに誤ってリンクされることがあります。"

msgid ""
"Note: If a parser rule does not instantiate any object because it does not con"
"tain an Action and no mandatory Assignment, you'll likely end up with unexpect"
"ed situations for valid input files. Xtext detects this situation and will rai"
"se a warning (with a corresponding quickfix) for the parser rules in question."
msgstr ""

msgid ""
"Note: It is generally not a good idea to implement floating point literals wit"
"h terminal rules. You should use [data type rules](#datatype-rules) instead du"
"e to possible shadowing problems explained above."
msgstr ""

msgid ""
"Note: Please forgive us the overuse of the term *provider*. The [IScopeProvide"
"r]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/ISc"
"opeProvider.java) is not a Guice [Provider]({{site.javadoc.guice}}/com/google/"
"inject/Provider.html)."
msgstr ""

msgid ""
"Note: You will have to adapt the [IJvmModelInferrer]({{site.src.xtext_extras}}"
"/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/IJvmModelInferre"
"r.java) to these changes, i.e. rename *Feature* to *Property* and create a [Jv"
"mOperation]({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/o"
"rg/eclipse/xtext/common/types/JvmOperation.java) for each *Operation*. We leav"
"e that as an exercise :-)"
msgstr ""

msgid ""
"Now identify the location in your grammar where you want references to Java ty"
"pes and Xbase expressions to appear and call the appropriate rules of the supe"
"r grammar. Adding Xbase expression to the domainmodel example leads to the add"
"itional concept *Operation*: An *Operation*'s parameters are *FullJvmFormalPar"
"ameters*. The production rule for *FullJvmFormalParameters* expects both the n"
"ame and the type here. That is reasonable since the type of parameters should "
"not be inferred. The operation's return type is a *JvmTypeReference* and its *"
"body* is an *XBlockExpression*. The final parser rule reads as:"
msgstr ""

msgid ""
"Now that left recursion is avoided, the parser should produce a proper syntax "
"tree. In Xtext each rule returns a value. Production rules return AST nodes (i"
".e. instances of EObject), enum rules return enum literals and data type rules"
" as well as terminal rules return simple values like strings. Xtext can automa"
"tically infer whether some rule is a production rule, i.e. constructs and retu"
"rns an AST node, or if it is a data type rule that returns a value. The gramma"
"r above only consists of data type rules all of them returning plain strings. "
"In order to construct an AST we need to add assignments and actions to the gra"
"mmar."
msgstr ""

msgid ""
"Now that the rule has been completed the produced EObject is returned to the c"
"alling rule *Primary*, which in turn returns the object unchanged to its own c"
"aller. Within *Multiplication* the rule *Primary* has been successfully parsed"
" and returned an instance of *NumberLiteral*. The remainder of the rule (every"
"thing within the parentheses) is a so called group. The asterisk behind the cl"
"osing parenthesis states that this part can be consumed zero or more times. Th"
"e first token to consume in this group is the multiplication operator '\\*'. Un"
"fortunately in the current input the next token to accept is the plus sign '+'"
", so the group is not consumed at all and the rule returns the *NumberLiteral*"
" that was returned from the previous unassigned rule call."
msgstr ""

msgid ""
"Now that the validation has a unique code identifying the problem we can regis"
"ter quick fixes for it. We start by adding the [QuickfixProviderFragment2]({{s"
"ite.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/x"
"text/generator/ui/quickfix/QuickfixProviderFragment2.xtend) to our workflow an"
"d after regenerating the code we should find an empty class *MyDslQuickfixProv"
"ider* in our DSL's UI project and new entries in the *plugin.xml\\_gen* file."
msgstr ""

msgid ""
"Now that we can build our language we need to be able to integrate our languag"
"e compiler in the integration build of application projects. For this purpose "
"a dedicated maven-plugin is available in Maven central. We now refer to the pr"
"oject `example-project`, which is a standard Java-project that shouldn't conta"
"in any Eclipse plug-in specific information, nor should it be built with Tycho"
". Let's have a look at the pom.xml and therein the Xtext plug-in."
msgstr ""
"ここまでで言語をビルドできるようになったので、アプリケーションプロジェクトのビルドに言語コンパイラーを統合していきます。これにはMavenセントラルから利用"
"可能な専用のMavenプラグインが利用可能です。ここで、参照する `example-project`プロジェクトは標準的なJavaプロジェクトであり、Ecl"
"ipseプラグイン固有の情報を含むべきでなくさらに、Tychoでビルドするべきでもないです。さっそくpom.xmlとその中のXtextプラグインを見ていきま"
"しょう。"

msgid ""
"Now that we have the grammar in place we need to execute the code generator th"
"at will derive the various language components. To do so, right-click into the"
" grammar editor and select"
msgstr "文法の準備が整ったので、様々な言語要素を得るためコード生成を実行する必要があります。コード生成のためには、文法エディター上で右クリックし以下を選択します。"

msgid ""
"Now that we know how to export elements to be referable from other resources, "
"we need to learn how those exported [IEObjectDescriptions]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IEObjectDescription.java"
") can be made available to the referencing resources. That is the responsibili"
"ty of [global scoping]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclip"
"se/xtext/scoping/IGlobalScopeProvider.java) which is described in the followin"
"g section."
msgstr ""

msgid "Now your language and its IDE should now no longer depend on JDT."
msgstr ""

msgid ""
"NumberLiteral:\n"
"  INT;\n"
"```"
msgstr ""

msgid ""
"NumberLiteral:\n"
"  value=INT;\n"
"```"
msgstr ""

msgid ""
"Of course the declared elements within a package are as well referable by thei"
"r simple name:"
msgstr ""

msgid ""
"Of course you can add further custom types of nodes. For consistency, make sur"
"e to inherit from [AbstractOutlineNode]({{site.src.xtext_eclipse}}/org.eclipse"
".xtext.ui/src/org/eclipse/xtext/ui/editor/outline/impl/AbstractOutlineNode.jav"
"a). To instantiate these, you have to implement `_createNode(parentNode, seman"
"ticElement)` with the appropriate parameter types."
msgstr ""

msgid ""
"Often the default strategy only needs some guidance (e.g. selecting the text c"
"orresponding to another feature than *name*). In that case you can simply subc"
"lass the [DefaultLocationInFileProvider]({{site.src.xtext_core}}/org.eclipse.x"
"text/src/org/eclipse/xtext/resource/DefaultLocationInFileProvider.java) and ov"
"erride the methods `getIdentifierFeature()` or `useKeyword()` to guide the fir"
"st and last steps of the strategy as described above (see [XtextLocationInFile"
"Provider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/xtex"
"t/XtextLocationInFileProvider.java) for an example)."
msgstr ""

msgid ""
"Often, you want to allow users to filter the contents of the outline to make i"
"t easier to concentrate on the relevant aspects of the model. To add filtering"
" capabilities to your outline, you need to add a filter action to your outline"
". Filter actions must extend [AbstractFilterOutlineContribution]({{site.src.xt"
"ext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/outline/act"
"ions/AbstractFilterOutlineContribution.java) to ensure that the action toggle "
"state is handled correctly. Here is an example from the Xtext Domainmodel exam"
"ple:"
msgstr ""

msgid ""
"Once again: if you have some construct that recurses on the left hand side, yo"
"u need to put it into the delegation chain according to the operator precedenc"
"e. The pattern is always the same: the thing that recurses delegates to the ru"
"le with the next higher precedence."
msgstr ""

msgid ""
"Once you have a language you probably want to do something with it. There are "
"two options, you can either write an interpreter that inspects the AST and doe"
"s something based on that or you translate your language to another programmin"
"g language or configuration files. In this section we're going to show how to "
"implement a code generator for an Xtext-based language."
msgstr ""

msgid ""
"One can create a family tree with MWE2 easily by describing it in a declarativ"
"e manner without writing a single line of Java code and without the need to co"
"mpile classes:"
msgstr ""

msgid ""
"One can have multiple *type guards* and *cases* separated with a comma, to hav"
"e all of them share the same *then-expression*."
msgstr ""

msgid ""
"One of the main advantages of DSLs is the possibility to statically validate d"
"omain-specific constraints. Because this is a common use case, Xtext provides "
"a dedicated hook for this kind of validation rules. In this lesson, we want to"
" ensure that the name of an *Entity* starts with an upper-case letter and that"
" all features have distinct names across the inheritance relationship of an *E"
"ntity*."
msgstr ""

msgid ""
"One refactoring can trigger another: When renaming a rule in an Xtext grammar,"
" the returned [EClass]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/"
"eclipse/emf/ecore/EClass.java) should be renamed, too. For these cases, you ca"
"n register a [RenameParticipant]({{site.javadoc.eclipse-platform}}/org/eclipse"
"/ltk/core/refactoring/participants/RenameParticipant.html) by the common means"
" of LTK. If the target of the participant is Xtext based, you can use a [Abstr"
"actProcessorBasedRenameParticipant]({{site.src.xtext_eclipse}}/org.eclipse.xte"
"xt.ui/src/org/eclipse/xtext/ui/refactoring/impl/AbstractProcessorBasedRenamePa"
"rticipant.java)."
msgstr ""

msgid ""
"Only if the switch value passes a type guard, i.e. an `instanceof` test succee"
"ds, the case's guard expression is executed using the same semantics as explai"
"ned above. If the switch expression contains an explicit declaration of a loca"
"l variable or the expression references a local variable, the type guard works"
" like an automated cast. All subsequent references to the switch value will be"
" of the type specified in the type guard, unless it is reassigned to a new val"
"ue."
msgstr ""

msgid ""
"Operation:\n"
"    'op' name=ValidID \n"
"        '('(params+=FullJvmFormalParameter \n"
"        (',' params+=FullJvmFormalParameter)*)?')'\n"
"        ':' type=JvmTypeReference \n"
"    body=XBlockExpression;"
msgstr ""

msgid ""
"Options can be specified with an object passed to the `createEditor` or `creat"
"eServices` functions:"
msgstr "オプションは `createEditor`もしくは`createServices`関数に渡されるオブジェクトを通じて指定することができます。"

msgid ""
"Other than associations in UML, EReferences in Ecore are always owned by one E"
"Class and only navigable in the direction form the owner to the type. Bi-direc"
"tional associations must be modeled as two references, being *eOpposite* of ea"
"ch other and owned by one end of the associations."
msgstr ""

msgid ""
"Out of the inferred model the corresponding Java class gets generated. To ensu"
"re that this will work make sure that the binding in the rumtime module for [I"
"Generator]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/gen"
"erator/IGenerator.java) is pointing to [JvmModelGenerator]({{site.src.xtext_ex"
"tras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/JvmModelGe"
"nerator.xtend). This is the default case, but as we dealt with a custom implem"
"entation in the last section this may lead to problems."
msgstr ""

msgid ""
"PackageDeclaration:\n"
"    'package' name=QualifiedName '{'\n"
"        (elements+=AbstractElement)*\n"
"    '}';"
msgstr ""
"PackageDeclaration:\n"
"    'package' name=QualifiedName '{'\n"
"        (elements+=AbstractElement)*\n"
"    '}';"

msgid ""
"PackageDeclaration:\n"
"    'package' name=QualifiedName '{'\n"
"        elements+=AbstractElement*\n"
"    '}';"
msgstr ""

msgid ""
"PackageDeclaration:\n"
"  'package' name = QualifiedName '{'\n"
"    (elements += AbstractElement)*\n"
"  '}'\n"
";"
msgstr ""

msgid ""
"Parsing simple XML-like, structural languages with Xtext is a no-brainer. Howe"
"ver, parsing nested expressions is often considered complicated. This is the p"
"erception due to their recursive nature and the properties of the parser techn"
"ology used by Xtext. You have to avoid left recursive parser rules. As the und"
"erlying Antlr parser uses a top-down approach it would recurse endlessly if yo"
"u had a left recursive grammar."
msgstr ""

msgid ""
"Person {\n"
"  name = \"Grandpa\"\n"
"  child = Person {\n"
"    name = \"Father\"\n"
"    child = {\n"
"      name = \"Son\"\n"
"    }\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Person {\n"
"  name = \"John ${surname}\"\n"
"  child = {\n"
"    name = \"Jim ${surname}\"\n"
"  }\n"
"  child = {\n"
"    name = \"Jane ${surname}\"\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Please find the motivation behind this and some additional details in [this bl"
"og post](http://blog.efftinge.de/2009/01/xtext-scopes-and-emf-index.html)."
msgstr ""

msgid ""
"Please note that Ecore does not support unset values for enums. If you define "
"a grammar like"
msgstr ""

msgid ""
"Please note that when *org.eclipse.xtext.xbase.Xbase* is used the default bind"
"ing for the interface [IGenerator]({{site.src.xtext_core}}/org.eclipse.xtext/s"
"rc/org/eclipse/xtext/generator/IGenerator.java) is [JvmModelGenerator]({{site."
"src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compile"
"r/JvmModelGenerator.xtend). To use a custom one we have to bind our own implem"
"entation in *org.example.domainmodel.DomainmodelRuntimeModule* like this:"
msgstr ""

msgid ""
"Previous versions of Xbase used the dollar as the delimiter character for nest"
"ed types:"
msgstr ""

msgid ""
"Primary :\n"
"  NumberLiteral |\n"
"  '(' Addition ')';"
msgstr ""

msgid ""
"Primary returns Expression:\n"
"  NumberLiteral |\n"
"  '(' Addition ')';"
msgstr ""

msgid ""
"Property:\n"
"    name=ValidID ':' type=JvmTypeReference;"
msgstr ""

msgid ""
"Property:\n"
"  name = ID ':' type = JvmTypeReference\n"
";\n"
"```"
msgstr ""

msgid ""
"Qualified names with or without a wildcard at the end are supported. For an im"
"port of a qualified name the simple name is made available as we know from e.g"
". Java, where `import java.util.Set` makes it possible to refer to [java.util."
"Set]({{site.javadoc.java}}/java/util/Set.html) by its simple name *Set*. Contr"
"ary to Java, the import is not active for the whole file, but only for the nam"
"espace it is declared in and its child namespaces. That is why you can write t"
"he following in the example DSL:"
msgstr ""

msgid ""
"QualifiedName:\n"
"    ID ('.' ID)*;"
msgstr ""
"QualifiedName:\n"
"    ID ('.' ID)*;"

msgid ""
"QualifiedNameWithWildcard:\n"
"    QualifiedName '.*'?;"
msgstr ""
"QualifiedNameWithWildcard:\n"
"    QualifiedName '.*'?;"

msgid ""
"QualifiedNameWithWildcard:\n"
"    QualifiedName '.*'?;\n"
"```"
msgstr ""

msgid ""
"Remember, in Xbase everything is an expression and has to return something. In"
" the case of simple assignments the return value is the value returned from th"
"e corresponding Java expression, which is the assigned value."
msgstr ""

msgid ""
"Removes all services and associated listeners from the given editor. The JavaS"
"cript-based syntax highlighting is not affected by this operation."
msgstr "エディターから全てのサービスと関連するリスナーを削除します。この操作はJavascriptによるシンタックスハイライトには効果がありません。"

msgid "Return types can be specified in the same way as for terminal rules:"
msgstr ""

msgid ""
"Right associativity is done using a slightly modified pattern. Note the quanti"
"ty operator and the call to the rule itself in the group:"
msgstr ""

msgid ""
"Root:\n"
"    elements+=Element;"
msgstr ""

msgid ""
"Ruby Troubleshooting\n"
"--------------------"
msgstr ""
"Ruby トラブルシューティング\n"
"--------------------"

msgid ""
"Rule 'Save energy' when Window.open then\n"
"    fire(Heater.off)\n"
"    println('Another penny to the piggy bank!')\n"
"```"
msgstr ""

msgid ""
"RuleA: 'a' stuff=RuleB;\n"
"RuleB: '{' name=ID '}';\n"
"```"
msgstr ""

msgid ""
"Rules can refer to other rules. This is simply done by using the name of the r"
"ule to be called. We refer to this as *rule calls*. Rule calls in terminal rul"
"es can only point to terminal rules. Example:"
msgstr ""

msgid ""
"Second, configure the global scope provider to scan project root folders inste"
"ad of the class path of Java projects."
msgstr ""

msgid ""
"See [§ 3.10.5 String Literals](http://docs.oracle.com/javase/specs/jls/se7/htm"
"l/jls-3.html#jls-3.10.5)"
msgstr ""

msgid "See below for a [full list of available options](#options-reference)."
msgstr "[利用可能なすべてのオプション](#options-reference)は、以下を参照してください。"

msgid ""
"See the various *assert* methods in that helper class to explore the testing c"
"apabilities. You can either assert that a given model has specific issues as i"
"n the example above, or assert that it has no issues."
msgstr ""

msgid ""
"Serialization is invoked when calling [XtextResource.save(..)]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResource.java)."
" Furthermore, the [Serializer]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/parsetree/reconstr/Serializer.java) provides resource-indepen"
"dent support for serialization. Another situation that triggers serialization "
"is applying [quick fixes](310_eclipse_support.html#quick-fixes) with semantic "
"modifications. Serialization is *not* called when a textual editors contents i"
"s saved to disk."
msgstr ""

msgid ""
"Serialization is the process of transforming an EMF model into its textual rep"
"resentation. Thereby, serialization complements parsing and lexing."
msgstr ""

msgid ""
"Similar to the [Project Wizard](#projectwizard)  it is possible to generate a "
"wizard for new dsl files with the MWE2 workflow. The wizard will be generated "
"in the `.ui` project. If the language was generated before the `plugin.xml` wi"
"ll have to be manually merged with the `plugin.xml_gen`."
msgstr ""

msgid ""
"Similarly to syntax errors, any unresolvable cross-links will be reported and "
"can be obtained through the [`Resource.getErrors()`]({{site.src.emf}}/plugins/"
"org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java) and [`"
"Resource.getWarnings()`]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/or"
"g/eclipse/emf/ecore/resource/Resource.java) method invocations."
msgstr ""

msgid "Since `it` is implicit, this is the same as:"
msgstr ""

msgid ""
"Since in Xbase parentheses are optional for method calls, the same can be writ"
"ten as:"
msgstr ""

msgid ""
"Since setting all these parameters manually would be tedious and the structure"
" of most Xtext projects is quite similar, it is advisable to use the [Standard"
"ProjectConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/o"
"rg/eclipse/xtext/xtext/generator/model/project/StandardProjectConfig.java) as "
"shown in our example above. This specialized project configuration applies def"
"ault values to all parameters, so you only have to specify those where you wis"
"h to override the defaults. For example, given the configuration"
msgstr ""

msgid ""
"Since terminal rules are used in a stateless context, it's not easily possible"
" to reuse parts of their definition. Fragments solve this problem. They allow "
"the same EBNF elements as terminal rules do but may not be consumed by the lex"
"er. Instead, they have to be used by other terminal rules. This allows to extr"
"act repeating parts of a definition:"
msgstr ""

msgid ""
"Since version 2.9 Xtext offers an interface for integration of text editors in"
" web applications. The text editors are implemented in JavaScript, and the lan"
"guage-related services such as code completion are realized through HTTP reque"
"sts to a server-side component."
msgstr ""
"バージョン2.9からXtextはWebアプリケーション内のテキストエディター統合のためのインターフェースを提供しています。テキストエディターはJavaScr"
"iptにより実装されており、コード補完のような言語関連サービスはサーバーサイドコンポーネントへのHTTPリクエストにより実現されています。"

msgid ""
"So for an element to be referable, its resource must be on the class path of t"
"he caller's Java project and it must be exported (as described above)."
msgstr ""

msgid ""
"Some code examples in this chapter are given in the Xtend language, as it is m"
"uch better suited for these tasks than Java. Please refer to the [Xtend docume"
"ntation](http://www.xtend-lang.org) for further details. For Java developers i"
"t's extremely easy to learn, as the basics are similar and you only need to un"
"derstand the additional powerful concepts."
msgstr ""

msgid ""
"Some implementation aspects (e.g. the grammar, scoping) of a language have an "
"impact on what is required for a document or semantic model to be valid. Xtext"
" automatically takes care of this."
msgstr ""

msgid ""
"Some language designers prefer to use indentation to structure code blocks ins"
"tead of surrounding them with braces `{ ... }`, which are really hard to type "
"with certain kinds of keyboards. A well-known example of such a language is [P"
"ython](https://www.python.org). Another well-known example is the *Home Automa"
"tion* language shipped with Xtext, available through *File &rarr; New &rarr; E"
"xample &rarr; Xtext Examples &rarr; Xtext Home Automation Example*."
msgstr ""

msgid ""
"Some parts of this grammar are equal to the one in the [15 Minutes Tutorial](1"
"02_domainmodelwalkthrough.html), but other parts are different."
msgstr ""

msgid ""
"Some types in Xbase can be used synonymously even if they do not conform to ea"
"ch other in Java. An example for this are arrays and lists or function types w"
"ith compatible function parameters. Objects of these types are implicitly conv"
"erted by Xbase on demand."
msgstr ""

msgid ""
"Sometimes it is more convenient to interpret a model that uses Xbase than to g"
"enerate code from it. Xbase ships with the [XbaseInterpreter]({{site.src.xtext"
"_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl"
"/XbaseInterpreter.java) which makes this rather easy."
msgstr ""

msgid ""
"Sometimes it's more convenient to allow associativity on parser level, but for"
"bid it later using validation. This allows more descriptive diagnostics. Also "
"the whole parsing process won't rely on error recovery but the editor will gen"
"erally be more forgiving."
msgstr ""

msgid ""
"Sometimes you need to put a syntactic predicate on a more complex rule, e.g. a"
"n expression, which might be very long. For disambiguation it is often suffici"
"ent to look only at the first token set. In those cases one can use the `->` o"
"perator instead of `=>`, instructing the parser to just look at the first toke"
"n and make the decision based on that. This can heavily reduce the lookahead a"
"nd as a consequence make the parser faster and more robust to syntactic errors"
". This also affects the behavior of the IDE, such as content assist, in a posi"
"tive way."
msgstr ""

msgid ""
"Static analysis is one of the most interesting aspects when developing a progr"
"amming language. The users of your languages will be grateful if they get info"
"rmative feedback as they type. In Xtext there are basically three different ki"
"nds of validation."
msgstr ""

msgid ""
"Static feature calls use the same notation as in Java, e.g. it is possible to "
"write `Collections.emptyList()` in Xbase. To make the static invocation more e"
"xplicit, the double colon can be used as the delimiter. The following snippets"
" are fully equivalent:"
msgstr ""

msgid ""
"String literals can either use `'single quotes'` or `\"double quotes\"` as their"
" enclosing characters. When using double quotes all literals allowed by Java s"
"tring literals are supported. In addition new line characters are allowed, i.e"
". in Xbase string literals can span multiple lines. When using single quotes t"
"he only difference is that single quotes within the literal have to be escaped"
" while double quotes do not."
msgstr ""

msgid ""
"Terminal rules are described using *Extended Backus-Naur Form*-like (EBNF) exp"
"ressions. The different expressions are described in the following. Each of th"
"ese expressions allows to define a cardinality. There are four different possi"
"ble cardinalities:"
msgstr ""

msgid ""
"TerminalExpression returns Expression:\n"
"    '(' Expression ')' |\n"
"    {IntLiteral} value=INT;\n"
"```"
msgstr ""

msgid ""
"TerminalExpression:\n"
"    '(' Expression ')' |\n"
"    INT;\n"
"```"
msgstr ""

msgid ""
"Testing your validation is very simple with the [ValidationTestHelper]({{site."
"src.xtext_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/valid"
"ation/ValidationTestHelper.java):"
msgstr ""

msgid ""
"That binding tells Guice to instantiate *MyConcreteScopeProviderFactory* and i"
"nvoke get() in order to obtain an instance of [IScopeProvider]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/IScopeProvider.java) "
"for clients having declared a dependency to that type. Both mentioned binding "
"methods are allowed to return an instance instead of a type. This may be usefu"
"l if some global state should be shared in the application. For a simple insta"
"nce this would be"
msgstr ""

msgid ""
"That is why most people do not add support for expressions in their DSL but tr"
"y to solve this differently. The most often used workaround is to define only "
"the structural information in the DSL and add behavior by modifying or extendi"
"ng the generated code. It is not only unpleasant to write, read and maintain i"
"nformation which closely belongs together in two different places, abstraction"
" levels and languages. Also, modifying the generated source code comes with a "
"lot of additional problems. This has long time been the preferred solution sin"
"ce adding support for expressions (and a corresponding execution environment) "
"for your language has been hard - even with Xtext."
msgstr ""

msgid "That means"
msgstr ""

msgid ""
"That statement could actually be read as: generate an [EPackage]({{site.src.em"
"f}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPackage.java) wit"
"h the *name* `domainmodel` and the *nsURI* `\"http://www.example.org/domainmode"
"l/Domainmodel\"`. Xtext will then add [EClasses]({{site.src.emf}}/plugins/org.e"
"clipse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java) with [EAttributes]({{s"
"ite.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribu"
"te.java) and [EReferences]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/"
"org/eclipse/emf/ecore/EReference.java) for the different parser rules in your "
"grammar, as described in [Ecore model inference](301_grammarlanguage.html#meta"
"model-inference)."
msgstr ""
"この命令文は実際には次のように解釈されます:　*名前* `domainmodel`、*nsURI*  `\"http://www.example.org/do"
"mainmodel/Domainmodel\"` で、[EPackage]({{site.src.emf}}/plugins/org.eclipse.emf."
"ecore/src/org/eclipse/emf/ecore/EPackage.java)を生成する。Xtextは[Ecore model inferen"
"ce](301_grammarlanguage.html#metamodel-inference)に記述されている文法内の複数のパーサールールに対して、[E"
"Classes]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ec"
"ore/EClass.java)と[EReferences]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/"
"src/org/eclipse/emf/ecore/EReference.java)を含む[EAttributes]({{site.src.emf}}/pl"
"ugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribute.java)を追加します。"

msgid "That's all for the grammar. It should now read as"
msgstr "文法は以上です。最終的に以下のようになります。"

msgid ""
"The *AST* should contain the essence of your textual models. It abstracts over"
" syntactical information. It is used by later processing steps, such as valida"
"tion, compilation or interpretation. In EMF a model is made up of instances of"
" *EObjects* which are connected. An [EObject]({{site.src.emf}}/plugins/org.ecl"
"ipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) is an instance of an [E"
"Class]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecor"
"e/EClass.java). A set of *EClasses* can be contained in a so called [EPackage]"
"({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPac"
"kage.java), which are both concepts of *Ecore*. In Xtext, meta-models are eith"
"er inferred from the grammar or predefined by the user (see the section on [EP"
"ackage declarations](301_grammarlanguage.html#package-declarations) for detail"
"s). The next diagram shows the meta-model of our example:"
msgstr ""

msgid ""
"The *with* operator `=>` executes the [lambda expression](#xbase-expressions-l"
"ambda) with a single parameter on the right-hand side with a given argument on"
" its left-hand side. The result is the left operand after applying the lambda "
"expression. In combination with the [implicit parameter](#xbase-expressions-im"
"plicit-parameter)`it` this allows very convenient initialization of newly crea"
"ted objects. Example:"
msgstr ""

msgid ""
"The API for the file wizard is very similar to the one of the project wizard. "
"The templates are defined with the same widgets/parameters but instead of gene"
"rating whole projects one or many files are generated. To add new template pro"
"viders there is the extension point `org.eclipse.xtext.ui.fileTemplate` to reg"
"ister a [IFileTemplateProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.u"
"i/src/org/eclipse/xtext/ui/wizard/template/IFileTemplateProvider.java). To cre"
"ate instances of [AbstractFileTemplate]({{site.src.xtext_eclipse}}/org.eclipse"
".xtext.ui/src/org/eclipse/xtext/ui/wizard/template/AbstractFileTemplate.java) "
"one should use the active annotation [FileTemplate]({{site.src.xtext_eclipse}}"
"/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/FileTemplate.ja"
"va)."
msgstr ""

msgid ""
"The API is designed in a way that allows to describe the formatting in a decla"
"rative way by calling methods on the [IHiddenRegionFormatter]({{site.src.xtext"
"_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/IHiddenRegionForma"
"tter.java) which is made available inside invocations of `prepend`, `surround`"
" or `append` to specify the formatting rules. This can be done in arbitrary or"
"der &ndash; the infrastructure will reorder all the configurations to execute "
"them from top to bottom of the document. If the configuration-based approach i"
"s not sufficient for a particular use case, the [document]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/IFormattableDocument."
"java) also accepts imperative logic that is associated with a given range. The"
" [ITextReplacer]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/formatting2/ITextReplacer.java) that can be added directly to the document "
"allows to perform all kinds of modifications to the text in the region that it"
" is associated with."
msgstr ""

msgid ""
"The AST type inference mechanism of Xtext will infer two types: *Expression* a"
"nd *NumberLiteral*. Assignments and actions have to be added to store all the "
"important information in the AST and to create reasonable subtypes for the add"
"itive and multiplicative expressions. The fully working Xtext grammar is:"
msgstr ""

msgid ""
"The Check annotation has a parameter that can be used to declare when a check "
"should run: *FAST* will run whenever a file is modified, *NORMAL* checks will "
"run when saving the file, and *EXPENSIVE* checks will run when explicitly vali"
"dating the file via the menu option. Here is an example written in Java:"
msgstr ""

msgid ""
"The EObject label provider refers to actually loaded and thereby available mod"
"el elements. By default, Xtext binds the [DefaultEObjectLabelProvider]({{site."
"src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/label/Defaul"
"tEObjectLabelProvider.java) to all use cases, but you can change the binding i"
"ndividually for the Outline, Content Assist or other places. For that purpose,"
" there is a so called *binding annotation* for each use case. For example, to "
"use a custom *MyContentAssistLabelProvider* to display elements in the content"
" assist, you have to override `configureContentProposalLabelProvider(..)` in y"
"our language's UI module:"
msgstr ""

msgid ""
"The Ecore model (or meta-model) of a textual language describes the structure "
"of its abstract syntax trees (AST)."
msgstr ""

msgid ""
"The JavaScript integration of Xtext uses [RequireJS](http://requirejs.org) for"
" managing modules and their dependencies. The main module is `xtext/xtext-orio"
"n`, `xtext/xtext-ace`, or `xtext/xtext-codemirror`, depending on which editor "
"library is used. Examples for loading these libraries together with Xtext can "
"be generated by the `WebIntegrationFragment` by setting the option `generateHt"
"mlExample = true` (see [The Language Generator](302_configuration.html#generat"
"or)). A minimal setup based on [WebJars](https://www.webjars.org/) is shown in"
" the following listings."
msgstr ""
"XtextのJavascript統合ではモジュールとその依存関係の管理のため[RequireJS](http://requirejs.org)を使います。主"
"なモジュールは使用するエディターにより異なり `xtext/xtext-orion`、 `xtext/xtext-ace`もしくは `xtext/xtext"
"-codemirror`のどれかです。Xtextと一緒にこれらのライブラリーをロードする例は、`generateHtmlExample = true`とした"
"`WebIntegrationFragment`によって生成できます。([言語ジェネレーター](302_configuration.html#generat"
"or)参照)[WebJars](https://www.webjars.org/)に基づく最小の設定を以下に示します。"

msgid ""
"The MWE2 workflow can generate a wizard that clients of your language can use "
"to create model projects. This will be generated in the `.ui` project. If the "
"language was generated before the `plugin.xml` will have to be manually merged"
" with the `plugin.xml_gen`."
msgstr ""

msgid ""
"The Xbase framework will automatically switch between the JVM element or the D"
"SL element when needed, e.g. when following hyperlinks. The component allowing"
" to navigate between the source model and the JVM model is called [IJvmModelAs"
"sociations]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/"
"xtext/xbase/jvmmodel/IJvmModelAssociations.java), the read-only antagonist of "
"the [IJvmModelAssociator]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/sr"
"c/org/eclipse/xtext/xbase/jvmmodel/IJvmModelAssociator.java) that is used by t"
"he [JvmTypesBuilder]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org"
"/eclipse/xtext/xbase/jvmmodel/JvmTypesBuilder.java)."
msgstr ""

msgid ""
"The Xtext Statemachine example contains a more sophisticated implementation of"
" the new file wizard."
msgstr ""

msgid ""
"The Xtext editor provides hyperlinking support for any tokens corresponding to"
" cross-references in your grammar definition. You can either *CTRL-click* on a"
"ny of these tokens or hit *F3* while the cursor position is at the token in qu"
"estion and this will take you to the referenced model element. As you'd expect"
" this works for references to elements in the same resource as well as for ref"
"erences to elements in other resources. In the latter case the referenced reso"
"urce will first be opened using the corresponding editor."
msgstr ""

msgid ""
"The Xtext example projects (*File &rarr; New &rarr; Example &rarr; Xtext Examp"
"les*) contain UI test cases that make use of these framework classes. Feel fre"
"e to study the corresponding `org.eclipse.xtext.example.<language>.ui.tests` p"
"rojects to get some inspirations on how to implement automated UI test cases f"
"or your Xtext-based language editor."
msgstr ""

msgid ""
"The Xtext example projects (*File &rarr; New &rarr; Example &rarr; Xtext Examp"
"les*) contain further unit test cases, e.g. testing the formatter, serializer,"
" compiler, ...etc . Feel free to study the corresponding `org.eclipse.xtext.ex"
"ample.<language>.tests` projects to get some inspirations on how to implement "
"automated unit test cases for your Xtext-based language."
msgstr ""

msgid ""
"The Xtext generator needs to know the structure of your project in order to ge"
"nerate code into the correct paths. The base class for describing the project "
"structure is [XtextProjectConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xt"
"ext.generator/src/org/eclipse/xtext/xtext/generator/model/project/XtextProject"
"Config.java). It is composed of several descriptors for the individual subproj"
"ects:"
msgstr ""

msgid ""
"The Xtext generator, amongst other things, generates the following two content"
" assist related artifacts:"
msgstr ""

msgid ""
"The [AbstractTypeScopeProvider]({{site.src.xtext_extras}}/org.eclipse.xtext.co"
"mmon.types/src/org/eclipse/xtext/common/types/xtext/AbstractTypeScopeProvider."
"java) can be used to create scopes for members with respect to the override se"
"mantics of the Java language. Of course it is possible to use this implementat"
"ion to create scopes for types as well."
msgstr ""

msgid ""
"The [EnumTemplateVariableResolver]({{site.src.xtext_eclipse}}/org.eclipse.xtex"
"t.ui/src/org/eclipse/xtext/ui/editor/templates/EnumTemplateVariableResolver.ja"
"va) resolves a template variable to [EEnumLiterals]({{site.src.emf}}/plugins/o"
"rg.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EEnumLiteral.java) which are as"
"signment-compatible to the enumeration type declared as the first parameter of"
" the *Enum* template variable."
msgstr ""

msgid ""
"The [Graphical Modeling Framework (GMF)](http://www.eclipse.org/modeling/gmp/?"
"project=gmf) allows to create graphical diagram editors for Ecore models. To i"
"llustrate how to build a GMF editor on top of an [XtextResource]({{site.src.xt"
"ext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResource.java"
") we have provided an example. You must have the Helios version 2.3 of GMF Not"
"ation, Runtime and Tooling and their dependencies installed in your workbench "
"to run the example. With other versions of GMF it might work to regenerate the"
" diagram code."
msgstr ""

msgid ""
"The [ICommentAssociater]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecl"
"ipse/xtext/parsetree/reconstr/ICommentAssociater.java) associates comments wit"
"h semantic objects. This is important in case an element in the semantic model"
" is moved to a different position and the model is serialized, one expects the"
" comments to be moved to the new position in the document as well."
msgstr ""

msgid ""
"The [IConcreteSyntaxValidator]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/validation/IConcreteSyntaxValidator.java) validates all const"
"raints that are implied by a grammar. Meeting these constraints is mandatory f"
"or a model to be serialized."
msgstr ""

msgid ""
"The [IEvaluationContext]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src"
"/org/eclipse/xtext/xbase/interpreter/IEvaluationContext.java) keeps the state "
"of the running application, i.e. the local variables and their values. Additio"
"nally, it can be *fork*ed, thus allowing to shadow the elements of the origina"
"l context. Here is an example code snippet how to call the [XbaseInterpreter]("
"{{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/"
"interpreter/impl/XbaseInterpreter.java):"
msgstr ""

msgid ""
"The [IFileSystemAccess2]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecl"
"ipse/xtext/generator/IFileSystemAccess2.java) API abstracts over the different"
" file systems the code generator may run over. When the code generator is trig"
"gered within the incremental build infrastructure in Eclipse the underlying fi"
"le system is the one provided by Eclipse, and when the code generator is execu"
"ted outside Eclipse, say in a headless build, it is `java.io.File`."
msgstr ""

msgid ""
"The [IHighlightingConfiguration]({{site.src.xtext_eclipse}}/org.eclipse.xtext."
"ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/IHighlightingConfiguration.j"
"ava) is used to register any default style without a specific binding to a pat"
"tern in the model file. It is used to populate the preferences page and to ini"
"tialize the [ITextAttributeProvider]({{site.src.xtext_eclipse}}/org.eclipse.xt"
"ext.ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/ITextAttributeProvider.j"
"ava), which in turn is the component that is used to obtain the actual setting"
"s for a style's id. An implementation will usually be very similar to the [Def"
"aultHighlightingConfiguration]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui"
"/src/org/eclipse/xtext/ui/editor/syntaxcoloring/DefaultHighlightingConfigurati"
"on.java) and read like this:"
msgstr ""

msgid ""
"The [ITypesProposalProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.comm"
"on.types.ui/src/org/eclipse/xtext/common/types/xtext/ui/ITypesProposalProvider"
".java) can be used to provide optimized proposals based on various filter crit"
"eria. The most common selector can be used directly via `createSubTypeProposal"
"s(..)`. The implementation is optimized and uses the JDT Index directly to min"
"imize the effort for object instantiation. The class [TypeMatchFilters]({{site"
".src.xtext_eclipse}}/org.eclipse.xtext.common.types.ui/src/org/eclipse/xtext/c"
"ommon/types/xtext/ui/TypeMatchFilters.java) provides a comprehensive set of re"
"usable filters that can be easily combined to reduce the list of proposals to "
"a smaller number of valid entries."
msgstr ""

msgid ""
"The [ImportedNamespaceAwareLocalScopeProvider]({{site.src.xtext_core}}/org.ecl"
"ipse.xtext/src/org/eclipse/xtext/scoping/impl/ImportedNamespaceAwareLocalScope"
"Provider.java) looks up [EAttributes]({{site.src.emf}}/plugins/org.eclipse.emf"
".ecore/src/org/eclipse/emf/ecore/EAttribute.java) with name *importedNamespace"
"* and interprets them as import statements."
msgstr ""

msgid ""
"The [MapBasedScope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/"
"xtext/scoping/impl/MapBasedScope.java) comes with the efficiency of a map to l"
"ook up a certain name. If you prefer to deal with Multimaps the [MultimapBased"
"Scope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping"
"/impl/MultimapBasedScope.java) should work for you. For situations where some "
"elements should be filtered out of an existing scope, the [FilteringScope]({{s"
"ite.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/impl/Filt"
"eringScope.java) is the right way to go. As scopes can be nested, we strongly "
"recommend to use FilteringScope only for leaf scopes without nested scopes."
msgstr ""

msgid ""
"The [grammar language]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclip"
"se/xtext/Xtext.xtext) is the corner stone of Xtext. It is a domain-specific la"
"nguage, carefully designed for the description of textual languages. The main "
"idea is to describe the concrete syntax and how it is mapped to an in-memory r"
"epresentation &ndash; the semantic model. This model will be created by the pa"
"rser on-the-fly when it consumes an input file. Of course the Xtext grammar la"
"nguage itself is implemented with Xtext, so you will find parts of its syntax "
"described with its own means in this documentation."
msgstr ""
"[文法言語]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/Xtext.x"
"text)はXtextの基礎であり、テキスト言語の記述のために注意深く設計されたドメイン固有言語です。主な目的は、具象的な構文とメモリ内表現(つまり意味モデ"
"ル)がどのようにマッピングされるかを記述することです。このモデルはファイル入力を受けると即座にパーサーによって生成されます。もちろん、Xtext文法言語その"
"ものがXtextによって実装されているので、このドキュメント内に構文の説明を見つけることができます。"

msgid ""
"The [org.eclipse.xtext.findReferences.IReferenceFinder]({{site.src.xtext_core}"
"}/org.eclipse.xtext/src/org/eclipse/xtext/findReferences/IReferenceFinder.java"
") and the [org.eclipse.xtext.ui.editor.findrefs.IReferenceFinder]({{site.src.x"
"text_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/findrefs/I"
"ReferenceFinder.java) interfaces are responsible for this functionality. These"
" interfaces are implemented by the [ReferenceFinder]({{site.src.xtext_core}}/o"
"rg.eclipse.xtext/src/org/eclipse/xtext/findReferences/ReferenceFinder.java) an"
"d the [DelegatingReferenceFinder]({{site.src.xtext_eclipse}}/org.eclipse.xtext"
".ui/src/org/eclipse/xtext/ui/editor/findrefs/DelegatingReferenceFinder.java) c"
"lasses. As almost everything in the Xtext framework, these components can also"
" be customized if the default implementations do not satisfy your needs."
msgstr ""

msgid ""
"The [parse tree constructor](#parse-tree-constructor) and the [formatter](#for"
"matting) use an [ITokenStream]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/parsetree/reconstr/ITokenStream.java) for their output, and t"
"he latter for its input as well. This allows for chaining the two components. "
"Token streams can be converted to a [String]({{site.javadoc.java}}/java/lang/S"
"tring.html) using the [TokenStringBuffer]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/parsetree/reconstr/impl/TokenStringBuffer.java) an"
"d to a [Writer]({{site.javadoc.java}}/java/io/Writer.html) using the [WriterTo"
"kenStream]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/par"
"setree/reconstr/impl/WriterTokenStream.java)."
msgstr ""

msgid ""
"The `'Save energy'` rule contains a code block with two operations, which is i"
"ndicated by the equal indentation of these operations. Nested blocks are also "
"possible:"
msgstr ""

msgid ""
"The `@Fix` annotation is repeatable so you can specify it multiple times if a "
"method offers a quickfix for multiple issue codes."
msgstr ""

msgid ""
"The `AbstractProjectTemplate` offers methods to create check boxes, text field"
"s and combo boxes. These will be made available to the user in the wizard to c"
"onfigure the selected template. The values inserted by the user can then be us"
"ed to configure the templates. In the following example a check box is used to"
" control if a file is generated or not."
msgstr ""

msgid ""
"The `EOF` (End Of File) token may be used to describe that the end of the inpu"
"t stream is a valid situation at a certain point in a terminal rule. This allo"
"ws to consume the complete remaining input of a file starting with a special d"
"elimiter."
msgstr ""

msgid "The `EOF` token cannot be [negated](301_grammarlanguage.html#negated-tokens)."
msgstr ""

msgid ""
"The `createEditor` and `createServices` functions set up listeners for editor "
"events such that most services are invoked automatically while using the edito"
"r. However, all services can also be invoked programmatically using the `xtext"
"Services` object that is attached to each editor instance. For example, the fo"
"llowing code saves the resource associated with the editor when the button wit"
"h the id `save-button` is clicked:"
msgstr ""
"`createEditor` と `createServices`関数は、エディターを使用している間ほとんどのサービスを自動的に実行するためのエディターイベ"
"ントに対するリスナーを設定します。また、全てのサービスは各エディターインスタンスに割り当てている`xtextServices`オブジェクトを使用することでプ"
"ログラムで実行することも可能です。以下のコードはid `save-button`のボタンがクリックされたときにエディターに関連付けられているリソースを保存す"
"る例です:"

msgid ""
"The `pom.xml` for the language project contains information about how Maven sh"
"ould run the Xtext's code generator. The first plug-in invokes the MWE2 file t"
"hrough a standard Java process:"
msgstr ""
"言語プロジェクトに対する`pom.xml`は、Xtextのコード生成に関してMavenが実行すべき情報を含んでいます。最初のプラグインは標準的なJavaプロ"
"セスを介してMWE2ファイルを呼び出します。"

msgid ""
"The `resourceId` string may contain whatever information you need to identify "
"a specific text content on the server. Usually the [URI](https://en.wikipedia."
"org/wiki/Uniform_Resource_Identifier) syntax is used, but this is not mandator"
"y."
msgstr ""
"`resourceId`文字列はサーバー上でテキストコンテンツの識別に必要な情報を含んでいます。通常、 [URI](https://en.wikipedia"
".org/wiki/Uniform_Resource_Identifier)構文が用いられますが、これは必須ではありません。"

msgid ""
"The actual code generation is performed by [generator fragments]({{site.src.xt"
"ext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/gener"
"ator/IXtextGeneratorFragment.java), which can be added to a language configura"
"tion using the `fragment` property. The Xtext project wizard creates a workflo"
"w that employs the [StandardLanguage]({{site.src.xtext_core}}/org.eclipse.xtex"
"t.xtext.generator/src/org/eclipse/xtext/xtext/generator/StandardLanguage.java)"
", which specializes XtextGeneratorLanguage in a similar way as StandardProject"
"Config specializes XtextProjectConfig (see [Project Configuration](#project-co"
"nfiguration)). The main contribution of StandardLanguage is a default list of "
"generator fragments that includes all features of Xtext. These fragments autom"
"atically adapt their generated code to your language and project configuration"
". Some fragments offer their own configuration parameters, hence each fragment"
" can be accessed via a dedicated property in StandardLanguage. For instance, i"
"n the language configuration"
msgstr ""

msgid ""
"The actual formatting is done by constructing a list of text replacements. A t"
"ext replacement describes a new text which should replace an existing part of "
"the document, described by offset and length. Applying the text replacements t"
"urns the unformatted document into a formatted document."
msgstr ""

msgid ""
"The actual model modification is implemented in the [IModification]({{site.src"
".xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/model/ed"
"it/IModification.java). The [IModificationContext]({{site.src.xtext_eclipse}}/"
"org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/model/edit/IModificationC"
"ontext.java) provides access to the erroneous document. In this case, we're us"
"ing Eclipse's [IDocument]({{site.javadoc.eclipse-platform}}/org/eclipse/jface/"
"text/IDocument.html) API to replace a text region."
msgstr ""

msgid ""
"The base class `AbstractXtextCodeMiningProvider` provides some factory methods"
" for creating `ICodeMining` instances for convenience. Use `createNewLineHeade"
"rCodeMining()` and `createNewLineContentCodeMining()` for that purpose."
msgstr ""

msgid ""
"The base class for describing a language configuration is [XtextGeneratorLangu"
"age]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse"
"/xtext/xtext/generator/XtextGeneratorLanguage.java), whose most important para"
"meters are"
msgstr ""

msgid ""
"The block expression allows to have imperative code sequences. It consists of "
"a sequence of expressions, and returns the value of the last expression. The t"
"ype of a block is also the type of the last expression. Empty blocks return `n"
"ull`. [Variable declarations](#xbase-expressions-variable-declaration) are onl"
"y allowed within blocks and cannot be used as a block's last expression."
msgstr ""

msgid ""
"The caret is used to escape an identifier if there are conflicts with existing"
" keywords. It is removed by the *ID* rule's [ValueConverter](303_runtime_conce"
"pts.html#value-converter)."
msgstr ""

msgid ""
"The class [ParseHelper]({{site.src.xtext_core}}/org.eclipse.xtext.testing/src/"
"org/eclipse/xtext/testing/util/ParseHelper.java) allows to parse an arbitrary "
"string into an AST model. The AST model itself can be traversed and checked af"
"terwards."
msgstr ""

msgid ""
"The classical example for ambiguous language parts is the *dangling else probl"
"em*. A conditional in a programming language usually looks like this:"
msgstr ""

msgid ""
"The common super type of EDataType and EClass is *EClassifier*. An [EPackage]("
"{{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPack"
"age.java) acts as a namespace and container of EClassifiers."
msgstr ""

msgid ""
"The compiler first looks for an accessible Java Field called `myProperty` on t"
"he declared or inferred type of `myObj`. If such a field can be found, the exp"
"ressions translates to the following Java code:"
msgstr ""

msgid ""
"The configuration block of our generator workflow example above contains a [Co"
"deConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/ec"
"lipse/xtext/xtext/generator/CodeConfig.java) as sibling of [StandardProjectCon"
"fig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse"
"/xtext/xtext/generator/model/project/StandardProjectConfig.java). As the name "
"suggests, the parameters of CodeConfig influence the generated code:"
msgstr ""

msgid ""
"The conformance rules for casts are defined in the [Java Language Specificatio"
"n](http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.5)."
msgstr ""

msgid ""
"The container for the [StandardProjectConfig]({{site.src.xtext_core}}/org.ecli"
"pse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/"
"StandardProjectConfig.java) and [CodeConfig]({{site.src.xtext_core}}/org.eclip"
"se.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CodeConfig.java"
") is of type [DefaultGeneratorModule]({{site.src.xtext_core}}/org.eclipse.xtex"
"t.xtext.generator/src/org/eclipse/xtext/xtext/generator/DefaultGeneratorModule"
".java) and is assigned to the property `configuration` of the [XtextGenerator]"
"({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xte"
"xt/xtext/generator/XtextGenerator.xtend). The DefaultGeneratorModule is actual"
"ly a [Guice](https://github.com/google/guice) module, which can be subclassed "
"in a similar way as explained in [Dependency Injection](#dependency-injection)"
" for overriding default configurations. This allows to alter the configuration"
" in places that are not accessible through MWE2. For instance, you could bind "
"your own subclass of [XtextGeneratorNaming]({{site.src.xtext_core}}/org.eclips"
"e.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextGeneratorNa"
"ming.java) in order to influence the names of generated classes."
msgstr ""

msgid ""
"The contract of serialization says that a model which is saved (serialized) to"
" its textual representation and then loaded (parsed) again yields a new model "
"that is equal to the original model. Please be aware that this does *not* impl"
"y that loading a textual representation and serializing it back produces ident"
"ical textual representations. However, the serialization algorithm tries to re"
"store as much information as possible. That is, if the parsed model was not mo"
"dified in-memory, the serialized output will usually be equal to the previous "
"input. Unfortunately, this cannot be ensured for each and every case. A use ca"
"se where is is hardly possible, is shown in the following example:"
msgstr ""

msgid "The contribution must be bound in the *DomainmodelUiModule* like this"
msgstr ""

msgid ""
"The core of the test infrastructure for JUnit 4 is the [XtextRunner]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/XtextRu"
"nner.java) and the language specific [IInjectorProvider]({{site.src.xtext_core"
"}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvider.j"
"ava). Both have to be provided by means of class annotations. Your test cases "
"should be annotated with [org.junit.Test](https://github.com/junit-team/junit4"
"/blob/master/src/main/java/org/junit/Test.java). A static import [org.junit.As"
"sert](https://github.com/junit-team/junit4/blob/master/src/main/java/org/junit"
"/Assert.java) makes your tests more readable."
msgstr ""

msgid ""
"The cross-reference serializer specifies which values are to be written to the"
" textual representation for cross-references. This behavior can be customized "
"by implementing [ICrossReferenceSerializer]({{site.src.xtext_core}}/org.eclips"
"e.xtext/src/org/eclipse/xtext/parsetree/reconstr/ITokenSerializer.java). The d"
"efault implementation delegates to various other services such as the [IScopeP"
"rovider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scopi"
"ng/IScopeProvider.java) or the [LinkingHelper]({{site.src.xtext_core}}/org.ecl"
"ipse.xtext/src/org/eclipse/xtext/linking/impl/LinkingHelper.java) each of whic"
"h may be the better place for customization."
msgstr ""

msgid ""
"The default behavior of Xtext editors is to have no semantic highlighting (syn"
"tactic highlighting, e.g. for keywords and strings, is done on the client side"
" as described in [Syntax Highlighting](#syntax-highlighting)). In order to add"
" styling to your text, create a subclass of [DefaultSemanticHighlightingCalcul"
"ator]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/"
"editor/syntaxcoloring/DefaultSemanticHighlightingCalculator.java) and override"
" `highlightElement(...)`. Here you can mark text regions with CSS classes by s"
"ubmitting a text offset, a length, and the CSS class name to the given accepto"
"r. You can specify the actual text style in a CSS file that is included by the"
" web page containing the Xtext editor."
msgstr ""
"デフォルトのXtextエディタには、セマンティックハイライトはありません。(シンタックスハイライト、例えばキーワードと文字列は[シンタックスハイライト](#"
"syntax-highlighting)で示したようにクライアントサイドで処理される。)スタイルをテキストに追加する場合、[DefaultSemanticH"
"ighlightingCalculator]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/org/e"
"clipse/xtext/ide/editor/syntaxcoloring/DefaultSemanticHighlightingCalculator.j"
"ava)のサブクラスを作成し、 `highlightElement(...)`をオーバーライドします。ここで、アクセプターにテキストオフセット、長さそしてC"
"SSクラス名を与えることで提示されるCSSを用いてテキスト範囲をマークすることができます。Xtextエディターを含むWebページに含まれるCSSファイルによ"
"り実際のテキストスタイルを設定することができます。"

msgid ""
"The default implementation of the [ILabelProvider]({{site.javadoc.eclipse-plat"
"form}}/org/eclipse/jface/viewers/ILabelProvider.html) interface utilizes the p"
"olymorphic dispatcher idiom to implement an external visitor as the requiremen"
"ts of the label provider are kind of a best match for this pattern. It boils d"
"own to the fact that the only thing you need to do is to implement a method th"
"at matches a specific signature. It either provides an image filename or the t"
"ext to be used to represent your model element. Have a look at the following e"
"xample to get a more detailed idea about the [DefaultEObjectLabelProvider]({{s"
"ite.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/label/De"
"faultEObjectLabelProvider.java)."
msgstr ""

msgid ""
"The default implementation of this service is the [DefaultDescriptionLabelProv"
"ider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui"
"/label/DefaultDescriptionLabelProvider.java). It employs the same polymorphic "
"dispatch mechanism as the [DefaultEObjectLabelProvider](#default-eobject-label"
"-provider). The default text of an [IEObjectDescription]({{site.src.xtext_core"
"}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IEObjectDescription.java) "
"is its indexed name. The image is resolved by dispatching to `image(EClass)` w"
"ith the [EClass]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclips"
"e/emf/ecore/EClass.java) of the described object. This is likely the only meth"
"od you want to override. Instances of [IResourceDescription]({{site.src.xtext_"
"core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescription.j"
"ava) will be represented with their path and the icon registered for your lang"
"uage's editor."
msgstr ""

msgid ""
"The description part of the hover popup is determined by the [IEObjectDocument"
"ationProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext"
"/documentation/IEObjectDocumentationProvider.java). For this part the default "
"content is fetched from the comments in the document: if the definition of the"
" element is preceded by a multi-line comment (e.g. `/* ... */`), the content o"
"f that comment is used as description."
msgstr ""
"ホバーポップアップの説明部は[IEObjectDocumentationProvider]({{site.src.xtext_core}}/org.ecli"
"pse.xtext/src/org/eclipse/xtext/documentation/IEObjectDocumentationProvider.ja"
"va)にて決定されます。この部分のデフォルトコンテントはドキュメントのコメントから取得されます: もし、要素の定義の前に複数行のコメント(例 `/* ..."
" */`)がある場合、コメントのコンテンツが説明部として使用されます。"

msgid ""
"The easiest way to get started is to let Xtext infer the Ecore model from your"
" grammar. The `generate` declaration in the grammar advises the framework to d"
"o so:"
msgstr "最も簡単な開始方法は、あなたの文法からEcoreモデルをXtextに推論させることです。文法中の`生成`宣言はフレームワークに推論するよう通知します。"

msgid ""
"The easiest way to register additional value converters is to make use of [Abs"
"tractDeclarativeValueConverterService]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/conversion/impl/AbstractDeclarativeValueConverterServ"
"ice.java), which allows to declaratively register an [IValueConverter]({{site."
"src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueConv"
"erter.java) by means of an annotated method."
msgstr ""

msgid ""
"The elements of an unordered group can occur in any order, but each element mu"
"st appear once. Members of unordered groups are separated by `&`. The followin"
"g rule `Modifier` allows to parse simplified modifiers of the Java language:"
msgstr ""

msgid ""
"The elements that are available in parser rules as well as in terminal rules a"
"re"
msgstr ""

msgid ""
"The entry point for Xtext code generation is [XtextGenerator]({{site.src.xtext"
"_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generato"
"r/XtextGenerator.xtend), which is composed of a *general configuration* and a "
"set of *language configurations*. The general configuration describes the stru"
"cture of your project as well as general settings for generating code. Each la"
"nguage configuration corresponds to a specific grammar file and allows to conf"
"igure the generated code for the respective language. The actual code generati"
"on is performed by *generator fragments* contained in a language configuration"
"."
msgstr ""

msgid "The example consists of a number of plug-ins"
msgstr ""

msgid ""
"The final code generator is listed below. Now you can give it a try! Launch a "
"new Eclipse Application (*Run As &rarr; Eclipse Application* on the Xtext proj"
"ect) and create a *dmodel* file in a Java Project. Eclipse will ask you to tur"
"n the Java project into an Xtext project then. Simply agree and create a new s"
"ource folder *src-gen* in that project. Then you can see how the compiler will"
" pick up your sample *Entities* and generate Java code for them."
msgstr ""

msgid ""
"The first line declares the name of the language. Xtext leverages Java's class"
" path mechanism. This means that the name can be any valid Java qualifier. The"
" grammar file name needs to correspond to the language name and have the file "
"extension `.xtext`. This means that the name has to be e.g. *Domainmodel.xtext"
"* and must be placed in a package *org.example.domainmodel* on your project's "
"class path. In other words, your `.xtext` file has to reside in a Java source "
"folder to be valid."
msgstr ""
"最初の行は言語の名前を宣言しています。XtextはJavaのクラスパスメカニズムを利用しています。これは、名前にJavaの有効な修飾子を利用できるということ"
"を意味しています。文法ファイル名は言語名と拡張子`.xtext`がそれぞれ必要です。例えば、ファイル *Domainmodel.xtext* は、プロジェク"
"トクラスパス内のパッケージ *org.example.domainmodel* に配置されるべきであることを意味しています。言い換えると、`.xtext`フ"
"ァイルは、Javaソースフォルダとして有効な場所に存在すべきということです。"

msgid ""
"The first step for including whitespace-aware blocks in your language is to us"
"e  *synthetic tokens* in the grammar by writing terminals of the form `'synthe"
"tic:<terminal name>'`:"
msgstr ""

msgid ""
"The first three parameters given to the [IssueResolutionAcceptor]({{site.src.x"
"text_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/quickfix/I"
"ssueResolutionAcceptor.java) define the UI representation of the quick fix. As"
" the document is not necessarily loaded when the quick fix is offered, we need"
" to provide any additional data from the model that we want to refer to in the"
" UI when creating the issue in the validator above. In this case, we provided "
"the existing type name. The additional data is available as [Issue.getData()]("
"{{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/Iss"
"ue.java). As it is persisted in markers, only strings are allowed."
msgstr ""

msgid ""
"The following chapter demonstrates how to integrate your own DSL with Java. We"
" will do this in four stages: First, you will learn how to refer to existing J"
"ava elements from within your language. Then you will use Xbase to refer to ge"
"neric types. In the third step, you will map your own DSL's concepts to Java c"
"oncepts. Last but not least, you will use both Java types and your concepts wi"
"thin Xbase expressions and execute it."
msgstr ""

msgid "The following class `MyDslCodeMiningProvider` shows a simple example:"
msgstr ""

msgid "The following conditions cause an error"
msgstr ""

msgid ""
"The following example illustrates that pattern. An instance of PackageDeclarat"
"ion is passed to the format method along with the current [formattable documen"
"t]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2"
"/IFormattableDocument.java). In this scenario, the package name is surrounded "
"by a single space, the curly brace is followed by a new line and increased ind"
"entation etc. All elements within that package should be formatted, too, thus "
"`format(..)` is invoked on these as well."
msgstr ""

msgid ""
"The following functions are available, provided that the respective services a"
"re enabled and supported by the employed editor library. All functions return "
"a _promise_ that is eventually resolved to the requested data. Furthermore, al"
"l these functions can be supplied with an `options` parameter to override some"
" of the options declared when the editor was built."
msgstr ""
"採用したエディターライブラリーによって有効化そしてサポートされる各サービスは以下の関数によって提供されます。全ての関数は要求データを最終的に解決する_pro"
"mise_を返します。さらに、全ての関数に`options`パラメータを与えることで、エディタービルド時に宣言したオプションの一部を上書きすることができます"
"。"

msgid ""
"The following is an example target platform definition for Xtext 2.25.0 and Ec"
"lipse 4.19 alias 2021-03."
msgstr "Xtext 2.25.0 and Eclipse 4.19 alias 2021-03をターゲットプラットフォームとした場合の定義例は以下の通りです。"

msgid ""
"The following list of words are reserved keywords, thus reducing the set of po"
"ssible identifiers:"
msgstr ""

msgid ""
"The following section describes how you make your language independent of Ecli"
"pse's Java Development Toolkit (JDT)."
msgstr ""

msgid ""
"The following sections describe how to customize the standard services for web"
" editors."
msgstr "以降にWebエディタの標準サービスのカスタマイズ方法を示します。"

msgid "The following snippet shows how to use qualified names as fragments:"
msgstr ""

msgid ""
"The following snippet shows our code generator using an [ImportManager]({{site"
".src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compil"
"er/ImportManager.java) in conjunction with a [TypeReferenceSerializer]({{site."
"src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compile"
"r/TypeReferenceSerializer.java). We create a new instance and pass it through "
"the generation functions, collecting types on the way. As the import section i"
"n a Java file precedes the class body, we create the body into a String variab"
"le and assemble the whole file's content in a second step."
msgstr ""

msgid ""
"The for loop `for (T1 variable : iterableOfT1) expression` is used to execute "
"a certain expression for each element of an array of an instance of [Iterable]"
"({{site.javadoc.java}}/java/lang/Iterable.html). The local `variable` is final"
", hence cannot be updated."
msgstr ""

msgid ""
"The four keywords `extends, static, import, extension` can be used when invoki"
"ng operations. In case some of the other keywords have to be used as identifie"
"rs, the escape character for [identifiers](#xbase-syntax-escaped-identifiers) "
"comes in handy."
msgstr ""

msgid ""
"The fragment has an additional flag `useJdtRefactoring` which can be used to d"
"elegate to JDT's refactoring infrastructure for languages using [Xbase](305_xb"
"ase.html) and an [inferred JVM model](305_xbase.html#xbase-inferred-type) (i.e"
". the Xtext domain model example or Xtend)."
msgstr ""

msgid ""
"The framework will pass the current [XtextResource]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResource.java) and an [IHi"
"ghlightedPositionAcceptor]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/o"
"rg/eclipse/xtext/ide/editor/syntaxcoloring/IHighlightedPositionAcceptor.java) "
"to the calculator. It is ensured that the resource will not be altered externa"
"lly until the called method `provideHighlightingFor()` returns. However, the r"
"esource may be `null` in case of errors in the model. The implementor's task i"
"s to navigate the semantic model and compute various ranges based on the attac"
"hed node information and associate styles with them. This may read similar to "
"the following snippet:"
msgstr ""

msgid ""
"The general syntax for type references allows to take any number of type argum"
"ents. The semantics as well as the syntax is almost the same as in Java, so pl"
"ease refer to the third edition of the [Java Language Specification](http://do"
"cs.oracle.com/javase/specs/jls/se7/html/index.html)."
msgstr ""

msgid ""
"The generated classes are based on the EMF runtime library, which offers a lot"
" of infrastructure and tools to work with your models, such as persistence, re"
"flection, referential integrity, lazy loading etc."
msgstr ""

msgid ""
"The generator fragment [ResourceFactoryFragment2]({{site.src.xtext_core}}/org."
"eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/resourceFa"
"ctory/ResourceFactoryFragment2.xtend) registers a factory for the [XtextResour"
"ce]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/X"
"textResource.java) to EMF's resource factory registry, such that all tools usi"
"ng the default mechanism to resolve a resource implementation will automatical"
"ly get that resource implementation."
msgstr ""

msgid ""
"The generic resource shipped with EMF provides a generic path-like computation"
" of fragments. These fragment paths are unique by default and do not have to b"
"e serialized. On the other hand, they can be easily broken by reordering the e"
"lements in a resource."
msgstr ""

msgid ""
"The given *MyRule* reads *ID*- and *INT*-elements which may occur in an arbitr"
"ary order in the textual representation. However, when serializing the model a"
"ll *ID*-elements will be written first and then all *INT*-elements. If the ord"
"er is important it can be preserved by storing all elements in the same list -"
" which may require wrapping the *ID*- and *INT*-elements into other objects."
msgstr ""

msgid ""
"The grammar declares that for the reference *type* only instances of the type "
"*Type* are allowed. However, this simple declaration doesn't say anything abou"
"t where to find the type. That is the duty of scopes."
msgstr ""

msgid "The grammar rule for features looks like this:"
msgstr ""

msgid ""
"The guard of each case clause is evaluated until the switch value equals the r"
"esult of the case's guard expression or if the case's guard expression evaluat"
"es to `true`. Then the right hand expression of the case evaluated and the res"
"ult is returned."
msgstr ""

msgid ""
"The highlighting is done in two stages. This allows for sophisticated algorith"
"ms that are executed asynchronously to provide advanced coloring while simple "
"pattern matching may be used to highlight parts of the text instantaneously. T"
"he latter is called lexical highlighting while the first is based on the meani"
"ng of your different model elements and therefore called semantic highlighting"
"."
msgstr ""

msgid ""
"The hyperlinks are provided by the [HyperlinkHelper]({{site.src.xtext_eclipse}"
"}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/hyperlinking/HyperlinkH"
"elper.java) which will create links for cross-referenced objects by default. C"
"lients may want to override `createHyperlinksByOffset(XtextResource, int, IHyp"
"erlinkAcceptor)` to provide additional links or supersede the default implemen"
"tation."
msgstr ""

msgid ""
"The idea is that you translate your language concepts to any number of Java ty"
"pes ([JvmDeclaredType]({{site.src.xtext_extras}}/org.eclipse.xtext.common.type"
"s/emf-gen/org/eclipse/xtext/common/types/JvmDeclaredType.java)). Such a type c"
"an be a Java class, Java interface, Java annotation type or a Java enum and ma"
"y contain any valid members. In the end you as a language developer are respon"
"sible to create a correct model according to the Java language."
msgstr ""

msgid ""
"The implementation will be selected transparently depending on how the client "
"code is executed. If the environment is a plain stand-alone Java or OSGi envir"
"onment, the *java.lang.reflect* API will be used to deduce the necessary data."
" On the contrary, the type-model will be created from the live data of the JDT"
" in an interactive Eclipse environment. All this happens transparently for the"
" clients behind the scenes via different implementations that are bound to spe"
"cific interfaces by means of Google Guice."
msgstr ""

msgid ""
"The implementor of an [ISemanticHighlightingCalculator]({{site.src.xtext_core}"
"}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/syntaxcoloring/ISeman"
"ticHighlightingCalculator.java) should be aware of performance to ensure a goo"
"d user experience. It is probably not a good idea to traverse everything of yo"
"ur model when you will only register a few highlighted ranges that can be foun"
"d easier with some typed method calls. It is strongly advised to use purposefu"
"l ways to navigate your model. The parts of Xtext's core that are responsible "
"for the semantic highlighting are pretty optimized in this regard as well. The"
" framework will only update the ranges that actually have been altered, for ex"
"ample. This speeds up the redraw process. It will even move, shrink or enlarge"
" previously announced regions based on a best guess before the next semantic h"
"ighlighting pass has been triggered after the user has changed the document."
msgstr ""

msgid ""
"The imported namespace aware scoping is based on qualified names and namespace"
"s. It adds namespace support to your language, which is comparable and similar"
" to namespaces in Scala and C#. Scala and C# both allow to have multiple neste"
"d packages within one file, and you can put imports per namespace, such that i"
"mported names are only visible within that namespace. See the domain model exa"
"mple: its scope provider extends [ImportedNamespaceAwareLocalScopeProvider]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/impl/Imp"
"ortedNamespaceAwareLocalScopeProvider.java)."
msgstr ""

msgid ""
"The index is basically a flat list of instances of [IResourceDescription]({{si"
"te.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResource"
"Description.java). The index itself doesn't know about visibility constraints "
"due to class path restriction. Rather than that, they are defined by the refer"
"encing language by means of so called [IContainers]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/resource/IContainer.java): While Java mi"
"ght load a resource via [ClassLoader.loadResource()]({{site.javadoc.java}}/jav"
"a/lang/ClassLoader.html) (i.e. using the class path mechanism), another langua"
"ge could load the same resource using the file system paths."
msgstr ""

msgid ""
"The inference runs in two phases: In the first phase all the types are created"
" with empty bodies. This way you make sure all types exist when you might look"
"up types during initializing the members in the second phase. Use `acceptor.ac"
"cept(JvmDeclaredType, Procedure1<JvmDeclaredType>)` and pass in the created Ja"
"va type as the first argument and the initialization block as the second. For "
"our domain model example, we implement a polymorphic dispatch function *infer*"
" for *Entities* to transform them into [JvmGenericTypes]({{site.src.xtext_extr"
"as}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/Jvm"
"GenericType.java) in the first phase. In the second phase, we add a [JvmField]"
"({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/"
"xtext/common/types/JvmField.java) and corresponding accessors for each *Proper"
"ty*. The final *DomainmodelJvmModelInferrer* looks like this:"
msgstr ""

msgid ""
"The information displayed for mouse hover popups is created in HTML format and"
" consists of two parts: a title and a description."
msgstr "マウスホバーポップアップはHTMLフォーマットで生成され、2つのパーツから構成されます: タイトルと説明。"

msgid ""
"The language in which the meta-model is defined is called *Ecore*. In other wo"
"rds, the meta-model is the Ecore model of your language. Ecore is an essential"
" part of EMF. Your models instantiate the meta-model, and your meta-model inst"
"antiates Ecore. To put an end to this recursion, Ecore is defined in itself (a"
"n instance of itself)."
msgstr ""

msgid ""
"The language-specific resources are provided through HTTP requests which are p"
"rocessed by the [XtextServlet]({{site.src.xtext_web}}/org.eclipse.xtext.web.se"
"rvlet/src/main/java/org/eclipse/xtext/web/servlet/XtextServlet.java). This cla"
"ss is also responsible for managing the lifecycle of the language [Injector]({"
"{site.javadoc.guice}}/com/google/inject/Injector.html) (see [Dependency Inject"
"ion](302_configuration.html#dependency-injection)). The default approach is to"
" create an injector when the servlet is started and to register it in the [IRe"
"sourceServiceProvider.Registry]({{site.src.xtext_core}}/org.eclipse.xtext/src/"
"org/eclipse/xtext/resource/IResourceServiceProvider.java). In order to overrid"
"e the default behavior, you can change or add bindings in the `<LanguageName>W"
"ebModule` or `<LanguageName>IdeModule` of your language."
msgstr ""
"言語固有のリソースは[XtextServlet]({{site.src.xtext_web}}/org.eclipse.xtext.web.servlet/"
"src/main/java/org/eclipse/xtext/web/servlet/XtextServlet.java)にて処理されるHTTPリクエスト"
"を通じて提供されます。このクラスは言語[インジェクター]({{site.javadoc.guice}}/com/google/inject/Injector"
".html) のライフサイクルの管理も担当しています。([依存性の注入](302_configuration.html#dependency-injecti"
"on)参照)標準的なアプローチはサーブレットを起動したとき、インジェクターを生成し、[IResourceServiceProvider.Registry]("
"{{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IReso"
"urceServiceProvider.java)に登録する方法です。デフォルトのふるまいをオーバーライドするため、あなたの言語の`<LanguageNam"
"e>WebModule`もしくは`<LanguageName>IdeModule`内のバインドを変更もしくは追加することができます。"

msgid ""
"The lexical highlighting can be customized by providing implementations of the"
" interface [IHighlightingConfiguration]({{site.src.xtext_eclipse}}/org.eclipse"
".xtext.ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/IHighlightingConfigur"
"ation.java) and the abstract class [AbstractTokenScanner]({{site.src.xtext_ecl"
"ipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/syntaxcoloring/Abs"
"tractTokenScanner.java). The latter fulfills the interface [ITokenScanner]({{s"
"ite.javadoc.eclipse-platform}}/org/eclipse/jface/text/rules/ITokenScanner.html"
") from the underlying JFace framework, which may be implemented by clients dir"
"ectly."
msgstr ""

msgid ""
"The linking feature allows for specification of cross-references within an Xte"
"xt grammar. The following things are needed for the linking:"
msgstr ""

msgid ""
"The location service offers different methods to obtain the region of interest"
" for special use cases. You can either obtain the complete region for an objec"
"t or only the identifying string which is usually the name of the instance (se"
"e `getSignificantTextRegion(EObject)`). You can also query for the text region"
" of a specific [EStructuralFeature]({{site.src.emf}}/plugins/org.eclipse.emf.e"
"core/src/org/eclipse/emf/ecore/EStructuralFeature.java) by means of `getFullTe"
"xtRegion(EObject, EStructuralFeature, int)`."
msgstr ""

msgid ""
"The main component for the inferred JVM model is the [IJvmModelInferrer]({{sit"
"e.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmo"
"del/IJvmModelInferrer.java). It has a single method that takes the root model "
"element as an argument and produces a number of [JvmDeclaredTypes]({{site.src."
"xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common"
"/types/JvmDeclaredType.java). As Xbase cannot guess how you would like to map "
"your concepts to JVM elements, you have to implement this component yourself. "
"This usually boils down to using an injected [JvmTypesBuilder]({{site.src.xtex"
"t_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmTyp"
"esBuilder.java) to create a hierarchy of JVM elements. The [builder]({{site.sr"
"c.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/"
"JvmTypesBuilder.java) helps to initialize the produced types with sensible def"
"aults and encapsulates the logic that associates the source elements with the "
"derived JVM concepts. As this kind of transformation can be elegantly implemen"
"ted using polymorphic dispatch functions and extension methods, it is a good c"
"hoice to write the [IJvmModelInferrer]({{site.src.xtext_extras}}/org.eclipse.x"
"text.xbase/src/org/eclipse/xtext/xbase/jvmmodel/IJvmModelInferrer.java) in Xte"
"nd. It becomes even simpler if you inherit from the [AbstractModelInferrer]({{"
"site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jv"
"mmodel/AbstractModelInferrer.java) which traverses the input model and dispatc"
"hes to its contents until you decide which elements to handle."
msgstr ""

msgid ""
"The meta-model defines the types of the semantic nodes as Ecore *EClasses*. EC"
"lasses are shown as boxes in the meta-model diagram, so in our example, *Model"
"*, *Type*, *SimpleType*, *Entity*, and *Property* are EClasses. An EClass can "
"inherit from other EClasses. Multiple inheritance is allowed in Ecore, but of "
"course cycles are forbidden."
msgstr ""

msgid ""
"The most likely component you want to customize is the [IRenameStrategy]({{sit"
"e.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactorin"
"g/IRenameStrategy.java). This component defines how the declaration of the tar"
"get element is performed. It has two major responsibilities:"
msgstr ""

msgid ""
"The next step is to actually refer to an imported concept. Let's define a mapp"
"ing to available Java types for the simple data types in the domain model lang"
"uage. This can be done with a simple cross-reference:"
msgstr ""

msgid ""
"The next task is to allow users to explicitly adjust precedence by adding pare"
"ntheses, e.g. write something like `(2 + 20) * 2`. So let's add support for th"
"at (note that the grammar is still not yet working with Xtext):"
msgstr ""

msgid ""
"The next thing is to redefine the project natures and builders that should be "
"applied to your language projects."
msgstr ""

msgid ""
"The null literal is, as in Java, `null`. It is compatible to any reference typ"
"e and therefore always of the null type."
msgstr ""

msgid ""
"The object to be returned by a parser rule is usually created lazily on the fi"
"rst assignment. Its type is determined from the specified return type of the r"
"ule, which may have been inferred from the rule's name if no explicit return t"
"ype is specified."
msgstr ""

msgid ""
"The only difference is that in Xbase a type reference can also be a function t"
"ype. In the following the full syntax of type references is shown, including f"
"unction types and type arguments."
msgstr ""

msgid ""
"The only thing you have to do in order to use this factory is to prefix the cl"
"ass with the generated *ExecutableExtensionFactory* name followed by a colon."
msgstr ""

msgid ""
"The parse tree constructor usually does not need to be customized since it is "
"automatically derived from the [Xtext Grammar](301_grammarlanguage.html). Howe"
"ver, it can be helpful to look into it to understand its error messages and it"
"s runtime performance."
msgstr ""

msgid ""
"The parser is fed with a sequence of terminals and walks through the so-called"
" *parser rules*. Hence a parser rule &ndash; contrary to a terminal rule &ndas"
"h; does not produce a single atomic terminal token, but a tree of non-terminal"
" and terminal tokens. They lead to a so-called *parse tree* (in Xtext it is al"
"so referred as *node model*). Furthermore, parser rules are handled as kind of"
" a building plan for the creation of the [EObjects]({{site.src.emf}}/plugins/o"
"rg.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) that form the sem"
"antic model (the linked *abstract syntax tree* or AST). Due to this fact, pars"
"er rules are also called production or EObject rules. Different constructs lik"
"e actions and assignments are used to derive types and initialize the semantic"
" objects accordingly."
msgstr ""

msgid ""
"The parser is now in the rule *Multiplication* and has the multiplication oper"
"ator '\\*' on the lookahead. It steps into the group and applies the action. Fi"
"nally it calls the *Primary* rule, produces another instance of *NumberLiteral"
"* (value=2), assigns it as the 'right' operand of the *Multiplication* and ret"
"urns the *Multiplication* to the rule *Addition* which in turn returns the ver"
"y same object as there's nothing left to parse."
msgstr ""

msgid ""
"The parser understands the predicate basically like this: If you are at this p"
"articular decision point and you don't know what to do, check whether the `els"
"e` keyword is present. If it is, take that branch directly without considering"
" other options that would match the same token sequence."
msgstr ""

msgid ""
"The path to the highlighting specification is set with the `syntaxDefinition` "
"option while setting up the Xtext editor. If no value is specified for that op"
"tion, it is built from the `xtextLang` option in the form `'xtext-resources/{x"
"textLang}-syntax'` (Orion) or `'xtext-resources/mode-{xtextLang}'` (Ace). For "
"CodeMirror syntax highlighting is configured by registering a _mode_ and setti"
"ng the `mode` option accordingly (default mode name: `'xtext/{xtextLang}'`)."
msgstr ""
"ハイライト仕様へのパスはXtextエディターの設定中に`syntaxDefinition`オプションで設定されます。もし、オプションに値を設定しなかった場合"
"、 `'xtext-resources/{xtextLang}-syntax'` (Orion) もしくは `'xtext-resources/mode-{"
"xtextLang}'` (Ace) 形式で`xtextLang`から構築されます。CodeMirrorシンタックスハイライトは_mode_の登録と`mod"
"e`オプションの設定により構成されます。(デフォルト名: `'xtext/{xtextLang}'`)"

msgid ""
"The persistence layer of the Xtext server is totally optional, so you can use "
"whatever means you like to fetch the content, e.g. generate it in the client o"
"r request it through your own service. If the DOM element into which the edito"
"r is created already contains some text, this text is used as the initial cont"
"ent. Otherwise the editor is initially empty, and you can use the API of the c"
"hosen editor framework to change the content whenever you like."
msgstr ""
"Xtextサーバーの永続化層は完全にオプションなので、コンテンツのフェッチに好きな方法を使うことができます。例えば、クライアントサイドで生成したり、自身のサ"
"ービスを経由して要求します。エディターが生成されるDOM要素内にテキストすでに含まれている場合、このテキストは初期コンテンツとして使用されます。それ以外の場"
"合、エディターの初期値は空白であり、選択したエディターフレームワークのAPIを使ってコンテンツを好きに変更することができます。"

msgid ""
"The plug-ins created by the *New Xtext Project* wizard are by default encoded "
"in the workspace standard encoding. The same holds for all files that Xtext ge"
"nerates in there. If you want to change that, e.g. because your grammar uses/a"
"llows special characters, you should manually set the encoding in the properti"
"es of these projects after their creation. Do this before adding special chara"
"cters to your grammar or at least make sure the grammar reads correctly after "
"the encoding change. To tell the Xtext generator to generate files in the same"
" encoding, set the encoding property in the workflow, e.g."
msgstr ""

msgid ""
"The precedence of extension methods is always lower than real member methods, "
"i.e. you cannot override member features. Also the extension methods are not i"
"nvoked polymorphic. If you have two extension methods on the scope (`foo(Objec"
"t)` and `foo(String)`) the expression `(foo as Object).foo` would bind and inv"
"oke `foo(Object)`."
msgstr ""

msgid "The problems becomes obvious as soon as nested conditions are used:"
msgstr ""

msgid ""
"The project `my.mavenized.herolanguage.updatesite` denotes the updatesite proj"
"ect and only contains a pom.xml and a file called category.xml. The latter inc"
"ludes information about which features are contained in the update site. As yo"
"u can see, the `category.xml` file points to the single feature, which is defi"
"ned in the project `my.mavenized.herolanguage.sdk`."
msgstr ""
"`my.mavenized.herolanguage.updatesite`プロジェクトはアップデートサイトプロジェクトであり、pom.xmlファイルとca"
"tegory.xmlファイルのみを含みます。後者はアップデートサイトにどのフィーチャーが含まれているのかを情報を含んでいます。`category.xml`が"
" `my.mavenized.herolanguage.sdk`プロジェクトで定義している1つのフィーチャーを指し示しているのがわかると思います。"

msgid ""
"The protocol of an [IValueConverter]({{site.src.xtext_core}}/org.eclipse.xtext"
"/src/org/eclipse/xtext/conversion/IValueConverter.java) allows to throw a [Val"
"ueConverterException]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclips"
"e/xtext/conversion/ValueConverterException.java) if something went wrong. The "
"exception is propagated as a syntax error by the parser or as a validation pro"
"blem by the [ConcreteSyntaxValidator]({{site.src.xtext_core}}/org.eclipse.xtex"
"t/src/org/eclipse/xtext/validation/impl/ConcreteSyntaxValidator.java) if the v"
"alue cannot be converted to a valid string. The [AbstractLexerBasedConverter]("
"{{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/imp"
"l/AbstractLexerBasedConverter.java) is useful when implementing a custom value"
" converter. If the converter needs to know about the rule that it currently wo"
"rks with, it may implement the interface [RuleSpecific]({{site.src.xtext_core}"
"}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueConverter.java). Th"
"e framework will set the rule such that the implementation can use it afterwar"
"ds."
msgstr ""

msgid ""
"The purpose of the [AbstractDeclarativeValidator]({{site.src.xtext_core}}/org."
"eclipse.xtext/src/org/eclipse/xtext/validation/AbstractDeclarativeValidator.ja"
"va) is to allow you to write constraints in a declarative way - as the class n"
"ame already suggests. That is instead of writing exhaustive if-else constructs"
" or extending the generated EMF switch you just have to add the [Check]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/Check.jav"
"a) annotation to any method and it will be invoked automatically when validati"
"on takes place. Moreover you can state for what type the respective constraint"
" method is, just by declaring a typed parameter. This also lets you avoid any "
"type casts. In addition to the reflective invocation of validation methods the"
" AbstractDeclarativeValidator provides a few convenient assertions."
msgstr ""

msgid ""
"The question mark sets the cardinality to *zero or one* (i.e. optional) as exp"
"lained above."
msgstr ""

msgid ""
"The remaining steps show you how to adapt the project wizard for your language"
", if you have generated one. The best way to do this is to create a new subcla"
"ss of the generated *IProjectCreator* in the *src/* folder of the *ui* project"
" and apply the necessary changes there. First, remove the JDT project configur"
"ation by overriding *configureProject* with an empty body."
msgstr ""

msgid "The resulting AST looks like this:"
msgstr ""

msgid ""
"The return type of a rule can be specified explicitly using the `returns` keyw"
"ord but can be inferred if the type's name is the same as the rule's name. Tha"
"t is"
msgstr ""

msgid ""
"The revised domain model language supports expressions and cross-links to Java"
" types. It is directly translated to Java source code. The syntax should look "
"very familiar. Here is an example:"
msgstr ""

msgid "The rule above would allow expressions like `foo`, `f0o` or even `f°o`."
msgstr ""

msgid ""
"The sample rule *Person* defines multiline comments (`ML_COMMENT`), single-lin"
"e comments (`SL_COMMENT`), and white space (`WS`) to be allowed between the *n"
"ame* and the *age*. Because the rule *Fullname* does not introduce an own set "
"of hidden terminals, it allows the same symbols to appear between *firstname* "
"and *lastname* as the calling rule *Person*. Thus, the following input is perf"
"ectly valid for the given grammar snippet:"
msgstr ""

msgid ""
"The second aspect that can be deduced from the first line of the grammar is it"
"s relationship to other languages. An Xtext grammar can declare another existi"
"ng grammar to be reused. The mechanism is called [grammar mixin](301_grammarla"
"nguage.html#grammar-mixins)."
msgstr ""
"最初の行から推測できる2つ目の側面は、他の言語との関連です。Xtext文法は既存の文法を再利用するための宣言が可能であり、このメカニズムは [文法ミックスイ"
"ン](301_grammarlanguage.html#grammar-mixins) と呼ばれています。"

msgid ""
"The second component you might want to customize is the [IDependentElementsCal"
"culator]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext"
"/ui/refactoring/IDependentElementsCalculator.java). Dependent elements are tho"
"se elements whose name change when the target element is renamed. For example,"
" when you rename a Java class the qualified names of its inner classes change,"
" too, thus references to these have to be updated as well. This calculation is"
" performed by the [IDependentElementsCalculator]({{site.src.xtext_eclipse}}/or"
"g.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring/IDependentElementsCalc"
"ulator.java). By default, all elements contained in the target element are add"
"ed. This matches Xtext's default strategy of qualified name computation."
msgstr ""

msgid ""
"The second used plug-in cleans the directories containing generated resources "
"during the clean phase:"
msgstr "2つめに使用されるプラグインは、クリーンフェーズ中に生成されたリソースを含むディレクトリーを削除します。"

msgid ""
"The second validation rule is straight-forward, too. We traverse the inheritan"
"ce hierarchy of the *Entity* and look for features with equal names."
msgstr ""

msgid ""
"The semantic highlighting stage is executed asynchronously in the background a"
"nd can be used to calculate highlighting states based on the meaning of the di"
"fferent model elements. Users of the editor will notice a very short delay aft"
"er they have edited the text until the styles are actually applied to the docu"
"ment. This keeps the editor responsive while providing aid when reading and wr"
"iting your model."
msgstr ""

msgid ""
"The service for marking occurrences of a selected element is handled by [Occur"
"rencesService]({{site.src.xtext_web}}/org.eclipse.xtext.web/src/main/java/org/"
"eclipse/xtext/web/server/occurrences/OccurrencesService.java). Here you can ov"
"erride `filter(EObject)` to exclude some elements from this service. The actua"
"l text regions to be marked are computed automatically from the cross-referenc"
"es present in the model."
msgstr ""
"選択された要素の強調表示サービスは[OccurrencesService]({{site.src.xtext_web}}/org.eclipse.xtext"
".web/src/main/java/org/eclipse/xtext/web/server/occurrences/OccurrencesService"
".java)によって処理されます。`filter(EObject)`をオーバーライドすることでこのサービスから一部の要素を除外することができます。実際にマー"
"クされるテキスト両機はモデル内のクロスリファレンスから自動的に計算されます。"

msgid ""
"The set of supported language-related services depends on which editor library"
" is chosen, as shown in the following table."
msgstr "下表に示すエディターライブラリーのどれを選ぶかによってサポートされる言語関連サービスが異なります。"

msgid ""
"The setup method returns an [Injector]({{site.javadoc.guice}}/com/google/injec"
"t/Injector.html), which can further be used to obtain a parser, etc. It also r"
"egisters the [Resource.Factory]({{site.src.emf}}/plugins/org.eclipse.emf.ecore"
"/src/org/eclipse/emf/ecore/resource/Resource.java) and generated [EPackages]({"
"{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPacka"
"ge.java) to the respective global registries provided by EMF. So basically aft"
"er having run the setup you can start using EMF API to load and store models o"
"f your language."
msgstr ""

msgid ""
"The sibling features that are defined in the same entity are automatically val"
"idated by the Xtext framework, thus they do not have to be checked twice. Note"
" that this implementation is not optimal in terms of execution time because th"
"e iteration over the features is done for all features of each entity."
msgstr ""

msgid ""
"The snippet above indicates that the generated class contains a *complete\\**-m"
"ethod for each assigned feature in the grammar and for each rule. The braces i"
"n the snippet are place-holders that should give a clue about the naming schem"
"e used to create the various entry points for implementors. The generated prop"
"osal provider falls back to some default behavior for cross-references and key"
"words. Furthermore it inherits the logic that was introduced in grammars that "
"were mixed into the current language."
msgstr ""

msgid ""
"The strategy is as follows: If two tokens follow each other in the stream and "
"the corresponding nodes in the node model follow each other as well, then the "
"white space information in between is kept. In all other cases it is up to the"
" [formatter](#formatting) to calculate new white space information."
msgstr ""

msgid ""
"The superclass of EAttributes and EReferences is *EStructuralFeature* and allo"
"ws to define a name and a cardinality by setting *lowerBound* and *upperBound*"
". Setting the latter to -1 means 'unbounded'."
msgstr ""

msgid ""
"The switch expression is a bit different from Java's, as the use of switch is "
"not limited to certain values but can be used for any object reference instead"
". For a switch expression"
msgstr ""

msgid ""
"The synchonized expression does the same as it does in Java (see [Java Languag"
"e Specification](http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#"
"jls-14.19)). The only difference is that in Xbase it is an expression and can "
"therefore be used at more places."
msgstr ""

msgid ""
"The syntactic declaration for datatypes starts with a keyword `datatype` follo"
"wed by an assignment: `name = ID`. The left hand side refers to a feature *nam"
"e* of the current object (which has the EClass *DataType* in this case). The r"
"ight hand side can be a rule call, a keyword, a [cross-reference](301_grammarl"
"anguage.html#cross-references) or an alternative comprised by the former optio"
"ns. The type of the feature needs to be compatible with the type of the expres"
"sion on the right. As *ID* returns an [EString]({{site.javadoc.java}}/java/lan"
"g/String.html) in this case, the feature *name* needs to be of type EString as"
" well."
msgstr ""

msgid ""
"The syntactical correctness of any textual input is validated automatically by"
" the parser. The error messages are generated by the underlying parser technol"
"ogy. One can use the [ISyntaxErrorMessageProvider]({{site.src.xtext_core}}/org"
".eclipse.xtext/src/org/eclipse/xtext/parser/antlr/ISyntaxErrorMessageProvider."
"java) API to customize these messages. Any syntax errors can be retrieved from"
" the Resource using the common EMF API: the [`Resource.getErrors()`]({{site.sr"
"c.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/Resou"
"rce.java) and [`Resource.getWarnings()`]({{site.src.emf}}/plugins/org.eclipse."
"emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java) method invocations"
"."
msgstr ""

msgid ""
"The syntax alone is not enough to make the language work. We need to map the d"
"omain-specific concepts to some other language in order to instruct Xtext how "
"it is executed. Usually you define a code generator or an interpreter for that"
" matter, but languages using Xbase can omit this step and make use of the [IJv"
"mModelInferrer]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/ecli"
"pse/xtext/xbase/jvmmodel/IJvmModelInferrer.java)."
msgstr ""

msgid "The syntax for cross-references is:"
msgstr ""

msgid ""
"The syntax for type literals is generally the plain name of the type, e.g. the"
" Xbase snippet `String` is equivalent to the Java code `String.class`. Nested "
"types use the delimiter `'.'`."
msgstr ""

msgid "The syntax is as follows:"
msgstr ""

msgid ""
"The table above also defines the operator precedence in ascending order. The b"
"lank lines separate precedence levels. The assignment operator `+=` is right-t"
"o-left associative in the same way as the plain assignment operator `=` is. Co"
"nsequently, `a = b = c` is executed as `a = (b = c)`. All other operators are "
"left-to-right associative. Parentheses can be used to adjust the default prece"
"dence and associativity."
msgstr ""

msgid ""
"The templates are contributed to the wizard by the extension point `org.eclips"
"e.xtext.ui.projectTemplate`. An implementor of [IProjectTemplateProvider]({{si"
"te.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/te"
"mplate/IProjectTemplateProvider.java) is registered for the language it provid"
"es templates to. The method of this interface returns instances of [AbstractPr"
"ojectTemplate]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse"
"/xtext/ui/wizard/template/AbstractProjectTemplate.java). Each of these instanc"
"es defines one template."
msgstr ""

msgid ""
"The templates define two things. On the one hand they define how the template "
"is presented to the user. A name, a description and the layout of the widgets "
"the user gets presented to select values for the parameters of the template. O"
"n the other hand the content of the projects that the template generates is de"
"fined. The wizard is able to generate any number and kind of projects with any"
" number and kind of files as content."
msgstr ""

msgid ""
"The text content is either loaded from the Xtext server or provided through Ja"
"vaScript. In either case, the Xtext server needs to identify the language you "
"are using in order to process any requests. A language is usually identified u"
"sing a file extension or a content type. The file extension can be specified w"
"ith the `xtextLang` option, while the content type is given with the `contentT"
"ype` option."
msgstr ""
"テキストコンテンツはXtextサーバーからロードされる、もしくはJavascriptにより提供されます。いずれにせよ、Xtextサーバーはリクエストを処理す"
"るために使用している言語を識別する必要があります。言語は通常ファイルの拡張子かコンテンツタイプにて識別されます。ファイル拡張子は`xtextLang`オプシ"
"ョンにより指定可能です。一方、コンテンツタイプは`contentType`オプションで与えられます。"

msgid ""
"The third binding method provided by Xtext allows to do anything you can do wi"
"th the binding API of Guice, since it allows you to use the [Binder]({{site.ja"
"vadoc.guice}}/com/google/inject/Binder.html) directly. The name of the method "
"has to start with the 'configure', the return type must be `void`, and it must"
" accept one argument of type [Binder]({{site.javadoc.guice}}/com/google/inject"
"/Binder.html):"
msgstr ""

msgid ""
"The title is composed of a text label and an image. The label is computed by t"
"he [INameLabelProvider]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/org/"
"eclipse/xtext/ide/labels/INameLabelProvider.java), and the default is the valu"
"e of the `name` property of an element, if it exists. The image is determined "
"by an implementation of [IImageDescriptionProvider]({{site.src.xtext_core}}/or"
"g.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/IImageDescriptionProvider"
".java). The default behavior is to generate a `<div>` and annotate it with a C"
"SS class of the form `<class>-icon`, where `<class>` is the name of the EClass"
" of the corresponding element. The actual images can be assigned to these clas"
"ses in a CSS file using the `background-image` CSS property."
msgstr ""
"タイトルはテキストラベルと画像から構成されます。ラベルは[INameLabelProvider]({{site.src.xtext_core}}/org.e"
"clipse.xtext.ide/src/org/eclipse/xtext/ide/labels/INameLabelProvider.java)によって"
"計算され、要素の`name`プロパティが存在する場合はデフォルト値として使われます。画像は[IImageDescriptionProvider]({{sit"
"e.src.xtext_core}}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/IIma"
"geDescriptionProvider.java)の実装によって決定されます。デフォルトのふるまいは、`<class>-icon`形式のCSSクラスをつ"
"けた`<div>`を生成します。このとき`<class>`は対応する要素のEClassの名前です。実際の画像はCSSファイル内のクラスにCSSプロパティの`"
"background-image`を使用して割り当てられます。"

msgid ""
"The traditional for loop is very similar to the one known from Java, or even C"
"."
msgstr ""

msgid ""
"The try-catch-finally expression is used to handle exceptional situations. You"
" are not forced to declare checked exceptions. If you don't catch checked exce"
"ptions, they are thrown in a way the compiler does not complain about a missin"
"g throws clause, using the sneaky-throw technique introduced by [Lombok](http:"
"//projectlombok.org/features/SneakyThrows.html)."
msgstr ""

msgid "The two postfix operators `++` and `--` use the following method mapping:"
msgstr ""

msgid "The type of a for loop is `void`."
msgstr ""

msgid ""
"The type of a for loop is `void`. The type of the local variable can optionall"
"y be inferred from the type of the array or the element type of the [Iterable]"
"({{site.javadoc.java}}/java/lang/Iterable.html) returned by the iterable expre"
"ssion."
msgstr ""

msgid ""
"The type of a switch expression is computed using the rules defined in the sec"
"tion on [common super types](#xbase-types-common-super-type). The set of types"
" from which the common super type is computed corresponds to the types of each"
" case expression."
msgstr ""

msgid ""
"The type of a variable declaration expression is always `void`. The type of th"
"e variable itself can either be explicitly declared or be inferred from the ri"
"ght hand side expression. Here is an example for an explicitly declared type:"
msgstr ""

msgid ""
"The type of an `if` expression is calculated from the types `T1` and `T2` of t"
"he two expressions `e1` and `e2`. It uses the rules defined in the [common sup"
"er types](#xbase-types-common-super-type) section, if an explicit `else` branc"
"h is given. If it is ommitted, the type of the `if` expression is the type `T`"
" of the expression `e` of the form `if (b) e`."
msgstr ""

msgid ""
"The typical customization point for [IdeCrossrefProposalProvider]({{site.src.x"
"text_core}}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassi"
"st/IdeCrossrefProposalProvider.java) is the method `createProposal(...)`, whic"
"h is called for each element found by the scope provider. Here you can fine-tu"
"ne the information to put into the [ContentAssistEntry]({{site.src.xtext_core}"
"}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/Content"
"AssistEntry.java)."
msgstr ""
"[IdeCrossrefProposalProvider]({{site.src.xtext_core}}/org.eclipse.xtext.ide/sr"
"c/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java)"
"の典型的なカスタマイズポイントは、スコーププロバイダーによって検索された各エレメントに呼び出される`createProposal(...)`メソッドです。こ"
"こで[ContentAssistEntry]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/org/e"
"clipse/xtext/ide/editor/contentassist/ContentAssistEntry.java)に入力する情報を調整することがで"
"きます。"

msgid ""
"The typical use case for the concrete syntax validator is validation in non-Xt"
"ext-editors that use an [XtextResource]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/resource/XtextResource.java). This is the case when "
"combining GMF and Xtext, for example. Another use case is when the semantic mo"
"del is modified \"manually\" (not by the parser) and then serialized again. Sinc"
"e it is very difficult for the serializer to provide meaningful error messages"
", the concrete syntax validator is executed by default before serialization. A"
" textual Xtext editor itself is *not* a valid use case. Here, the parser ensur"
"es that all syntactical constraints are met. Therefore there is no value in ad"
"ditionally running the concrete syntax validator."
msgstr ""

msgid ""
"The used assignment operator does not influence the cardinality of the expecte"
"d symbols on the right hand side."
msgstr ""

msgid ""
"The usual way to include the Xtext servlet in a server application is to creat"
"e a subclass of [XtextServlet]({{site.src.xtext_web}}/org.eclipse.xtext.web.se"
"rvlet/src/main/java/org/eclipse/xtext/web/servlet/XtextServlet.java), override"
" `init()` and `destroy()` to manage the runtime resources, and add a [WebServl"
"et]({{site.javadoc.javaee}}/javax/servlet/annotation/WebServlet.html) annotati"
"on with `urlPatterns = \"/xtext-service/*\"` as parameter. See [MyXtextServlet]("
"{{site.src.xtext_web}}/org.eclipse.xtext.web.example.jetty/src/main/java/org/e"
"clipse/xtext/web/example/jetty/MyXtextServlet.java) for an example."
msgstr ""
"サーバーアプリケーション内にXtextサーブレットを含めるための標準的な方法は、[XtextServlet]({{site.src.xtext_web}}/"
"org.eclipse.xtext.web.servlet/src/main/java/org/eclipse/xtext/web/servlet/Xtex"
"tServlet.java)サブクラスを生成し、`init()`と`destroy()`を実行環境を管理するためオーバーライドし、そして `urlPatte"
"rns = \"/xtext-service/*\"`パラメータをつけた[WebServlet]({{site.javadoc.javaee}}/javax/s"
"ervlet/annotation/WebServlet.html)アノテーションを追加します。[MyXtextServlet]({{site.src.xt"
"ext_web}}/org.eclipse.xtext.web.example.jetty/src/main/java/org/eclipse/xtext/"
"web/example/jetty/MyXtextServlet.java)の例を参照してください。"

msgid ""
"The web integration of Xtext supports two operation modes, which are described"
" in the following."
msgstr "XtextのWeb統合では以下に示す2つのオペレーションモードがあります。"

msgid ""
"The website is generated with [Jekyll](http://jekyllrb.com).\n"
"```\n"
"gem install bundler jekyll jekyll-markdown-block\n"
"```\n"
"To generate the website, run\n"
"```\n"
"  jekyll build --unpublished\n"
"```\n"
"You will find the result in the `_site` folder. You can test it locally with\n"
"```\n"
"  jekyll serve --unpublished\n"
"```\n"
"which will start a [server](http://127.0.0.1:4000) displaying the site. The se"
"rver also listens for file changes and\n"
"automatically rebuilds the website."
msgstr ""
"このwebsiteは[Jekyll](http://jekyllrb.com)を用いて生成しています。\n"
"```\n"
"gem install bundler jekyll jekyll-markdown-block\n"
"```\n"
"websiteを生成するには以下を実行してください。\n"
"```\n"
"  jekyll build --unpublished\n"
"```\n"
"実行後、`_site`フォルダにwebsiteが生成されます。websiteは以下のコマンドを実行することで、ローカルでテスト可能です。\n"
"```\n"
"  jekyll serve --unpublished\n"
"```\n"
"websiteは[server](http://127.0.0.1:4000) で確認できます。websiteはファイルを更新すると自動的に変更が反映されま"
"す。\n"

msgid ""
"The white space characters `' '`, `'\t'`, `'\n"
"'`, and `''` are allowed to occur anywhere between the other syntactic elemen"
"ts."
msgstr ""

msgid ""
"The wizard will automatically open the grammar file *Domainmodel.xtext* in the"
" editor. As you can see it already contains a simple *Hello World* grammar. Re"
"place that grammar definition with the one for our language:"
msgstr ""

msgid ""
"The wizard will automatically open the grammar file *Domainmodel.xtext* in the"
" editor. As you can see it already contains a simple *Hello World* grammar:"
msgstr ""
"エディターで 文法ファイル*Domainmodel.xtext* を開くと、ウィザードが自動的に開きます。文法ファイルにはシンプルな *Hello Worl"
"d* 文法が含まれています。"

msgid ""
"There are a couple of common predefined infix operators. In contrast to Java, "
"the operators are not limited to operations on certain types. Instead an opera"
"tor-to-method mapping allows users to redefine the operators for any type just"
" by implementing the corresponding method signature. The following defines the"
" operators and the corresponding Java method signatures / expressions."
msgstr ""

msgid ""
"There are different useful implementations for IScope shipped with Xtext. We w"
"ant to mention only some of them here."
msgstr ""

msgid ""
"There are several customization hooks in the runtime layer of the JVM types an"
"d on the editor side as well:"
msgstr ""

msgid ""
"There are some limitations to the concrete syntax validator which result from "
"the fact that it treats the grammar as declarative, which is something the par"
"ser doesn't always do."
msgstr ""

msgid "There are three different assignment operators, each with different semantics."
msgstr ""

msgid ""
"There are two additional kinds of binding-methods supported. The first one all"
"ows to configure a [Provider]({{site.javadoc.guice}}/com/google/inject/Provide"
"r.html), which is like a factory for one specific type. This one can be used i"
"f you need a hook whenever an instance of a certain type is created. For insta"
"nce if you want to provide lazy access to a singleton or you need to do some c"
"omputation each time an instance is created (i.e. factory). If you want to poi"
"nt to a provider rather than to a concrete class you can use the following bin"
"ding method."
msgstr ""

msgid ""
"There are two aspects to consider when it comes to continuous integration. Fir"
"stly you may want to have a continuous build of your language that runs all te"
"sts and creates an Eclipse update site and other needed artifacts, and secondl"
"y you may want to have your language and its corresponding code generator inte"
"grated in your application builds. We will discuss both cases in this section "
"along with a set of example projects, which you can clone, inspect or download"
" from [github.com/xtext/maven-xtext-example](https://github.com/xtext/maven-xt"
"ext-example)."
msgstr ""
"継続的インテグレーションを始めるときに考慮すべき2つの側面があります。1つめは、Eclipseのアップデートサイトや必要なアーティファクトの生成、全てのテス"
"トの実行を継続的にビルドをする場合、2つめは、言語とそれに対応するコード生成をあなたのアプリケーションビルドに統合する場合です。この節では、これらの両方のケ"
"ースをサンプルプロジェクトに沿って議論します。このプロジェクトはクローン、検査、または [github.com/xtext/maven-xtext-exam"
"ple](https://github.com/xtext/maven-xtext-example)からダウンロードすることができます。"

msgid ""
"There are two boolean literals, `true` and `false` which correspond to their J"
"ava counterpart of type *boolean*."
msgstr ""

msgid ""
"There are two different default implementations of [IQualifiedNameProvider]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/naming/IQualifie"
"dNameProvider.java). Both work by looking up an [EAttribute]({{site.src.emf}}/"
"plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribute.java) '*nam"
"e*'. The [SimpleNameProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/or"
"g/eclipse/xtext/naming/SimpleNameProvider.java) simply returns the plain value"
", while the [DefaultDeclarativeQualifiedNameProvider]({{site.src.xtext_core}}/"
"org.eclipse.xtext/src/org/eclipse/xtext/naming/DefaultDeclarativeQualifiedName"
"Provider.java) concatenates the simple name with the qualified name of its par"
"ent exported EObject. This effectively simulates the qualified name computatio"
"n of most namespace-based languages such as Java. It also allows to override t"
"he name computation declaratively: Just add methods named `qualifiedName` in a"
" subclass and give each of them one argument with the type of element you wish"
" to compute a name for."
msgstr ""

msgid ""
"There are various places in the UI in which model elements have to be presente"
"d to the user: In the [outline view](#outline), in [hyperlinks](#hyperlinking)"
", in [content proposals](#content-assist), find dialogs etc. Xtext allows to c"
"ustomize each of these appearances by individual implementation of the [ILabel"
"Provider]({{site.javadoc.eclipse-platform}}/org/eclipse/jface/viewers/ILabelPr"
"ovider.html) interface."
msgstr ""

msgid ""
"There is no parser rule for a simple type reference, as it is expressed as a p"
"arameterized type references without parameters."
msgstr ""

msgid ""
"There is still one topic worth to mention, which is associativity. There is le"
"ft and right associativity as well as non-associativity. The example above imp"
"lements left associativity. Associativity tells the parser how to construct th"
"e AST when there are two infix operations with the same precedence. The follow"
"ing example is taken from the corresponding wikipedia entry:"
msgstr ""

msgid ""
"There is yet another aspect of the JVM model that can be explored. Since all t"
"he coarse grained concepts such as [types]({{site.src.xtext_extras}}/org.eclip"
"se.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmType.java) and"
" [operations]({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen"
"/org/eclipse/xtext/common/types/JvmOperation.java) were already derived from t"
"he model, a generator can be used to serialize that information to Java code. "
"There is no need to write a code generator on top of that. The [JvmModelGenera"
"tor]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/x"
"base/compiler/JvmModelGenerator.xtend) knows how to generate operation bodies "
"properly."
msgstr ""

msgid ""
"Therefore one can contribute an [IFragmentProvider]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/resource/IFragmentProvider.java) per lan"
"guage. It has two methods: `getFragment(EObject, Fallback)` to calculate the f"
"ragment of an [EObject]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org"
"/eclipse/emf/ecore/EObject.java) and `getEObject(Resource, String, Fallback)` "
"to go the opposite direction. The [Fallback]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/resource/IFragmentProvider.java) interface allo"
"ws to delegate to the default strategy - which usually uses the fragment paths"
" described above."
msgstr ""

msgid ""
"These are the basic ideas around Guice and the small extension Xtext provides "
"on top. For more information we strongly encourage you to read through the doc"
"umentation on [the website of Google Guice](https://github.com/google/guice)."
msgstr ""

msgid ""
"These extension methods are declared in separate Java classes. There are vario"
"us ways how extension methods can be added. In the simplest case the language "
"designer predefines which extension methods are available. Language users cann"
"ot add additional library functions using this mechanism."
msgstr ""

msgid ""
"These few lines will, when interpreted by MWE2, result in an object tree consi"
"sting of three instances of *com.mycompany.Person*. The interpreter will basic"
"ally do the same as the following *main* method:"
msgstr ""

msgid ""
"These subprojects are of type [SubProjectConfig]({{site.src.xtext_core}}/org.e"
"clipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/proje"
"ct/SubProjectConfig.java) and offer important parameters:"
msgstr ""

msgid ""
"These terminals can be used to mark the boundaries of code blocks. The Xtext H"
"ome Automation example inherits expressions from [Xbase](305_xbase.html) and r"
"edefines the syntax of block expressions:"
msgstr ""

msgid ""
"These tests serve only as a starting point and can be extended to cover the di"
"fferent features of the language. As a small exercise, you could implement e.g"
". test cases for the `checkFeatureNameIsUnique` validation rule. You can find "
"more test cases in the example projects shipped with the Xtext Framework. Simp"
"ly go to *File &rarr; New &rarr; Example &rarr; Xtext Examples* to instantiate"
" them into your workspace."
msgstr ""

msgid ""
"These two steps will provide a nice integration into the Eclipse JDT. There is"
" *Find References* on Java methods, fields and types that will reveal results "
"in your language files. *Go To Declaration* works as expected and content assi"
"st will propose the list of available types. Even the *import* statements will"
" also apply for Java types."
msgstr ""

msgid ""
"This action generates the parser and text editor and some additional infrastru"
"cture code. You will see its logging messages in the Console View."
msgstr ""
"この操作によって、パーサー、テキストエディターといくつかの追加のインフラストラクチャコードが生成され、これはらコンソールビューのログメッセージで確認すること"
"ができます。"

msgid ""
"This chapter describes the platform-independent language features that are not"
" covered by the [grammar language](301_grammarlanguage.html)."
msgstr ""

msgid ""
"This configuration will make sure that you can use dependency injection in you"
"r test class, and that the global EMF registries are properly populated before"
" and cleaned up after each test."
msgstr ""

msgid ""
"This default behaviour can be customized by extending the [DefaultAutoEditStra"
"tegyProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/"
"xtext/ui/editor/autoedit/DefaultAutoEditStrategyProvider.java) class. The Xtex"
"t Simple Arithmetics example provides an interactive interpreter as an auto ed"
"iting strategy by binding the customized [AutoEditStrategy]({{site.src.xtext_e"
"clipse}}/org.eclipse.xtext.xtext.ui.examples/projects/arithmetics/org.eclipse."
"xtext.example.arithmetics.ui/src/org/eclipse/xtext/example/arithmetics/ui/auto"
"edit/AutoEditStrategy.java) class in the [ArithmeticsUiModule]({{site.src.xtex"
"t_eclipse}}/org.eclipse.xtext.xtext.ui.examples/projects/arithmetics/org.eclip"
"se.xtext.example.arithmetics.ui/src/org/eclipse/xtext/example/arithmetics/ui/A"
"rithmeticsUiModule.java)."
msgstr ""

msgid ""
"This document describes the expression language library Xbase. Xbase is a part"
"ial programming language implemented in Xtext and is meant to be embedded and "
"extended within other programming languages and domain-specific languages (DSL"
") written in Xtext. Xtext is a highly extendible language development framewor"
"k covering all aspects of language infrastructure such as parsers, linkers, co"
"mpilers, interpreters and even full-blown IDE support based on Eclipse."
msgstr ""

msgid ""
"This documentation is about the new generator infrastructure introduced with X"
"text 2.9. In order to migrate an older Xtext project to this new infrastructur"
"e, the recommended approach is to create a new Xtext project and copy the gram"
"mar and existing configuration from the old project to the new one step by ste"
"p."
msgstr ""

msgid ""
"This entities grammar already uses the most important concepts of Xtext's gram"
"mar language. You have learned that keywords are written as string literals an"
"d a simple assignment uses a plain equal sign (`=`), whereas a multi-value ass"
"ignment uses a plus-equals (`+=`). We have also seen the boolean assignment op"
"erator (`?=`). Furthermore the example contains syntax elements with different"
" cardinalities (`?` = optional, `*` = any number, `+` = at least once) and dem"
"onstrates how cross-references can be declared. Please consult the [Grammar La"
"nguage Reference](301_grammarlanguage.html) for more details. Let's now have a"
" look what you can do with such a language description."
msgstr ""
"このエンティティ文法はすでにXtextの文法言語の最も重要な概念を使用しています。 キーワードは文字列リテラルとして記述され、単純な割り当てではイコール ("
"`=`) が用いられるが、複数値の割り付けにはプラスイコール (`+=`) が用いられます。 また、真偽値の割り当て符号 (`?=`) についても確認しまし"
"た。 さらに、この例では様々な構文要素 (`?` = オプション, `*` = 任意の数, `+` = 少なくとも1つ) を含んでおり、さらにクロスリファレ"
"ンスのデモを示しています。 詳細は、[文法言語リファレンス](301_grammarlanguage.html) を参照してください。 では、これらの言語記"
"述で何ができるのかを見ていきましょう。"

msgid ""
"This example can be further simplified since the lambda's parameter is availab"
"le as the implicit variable `it`, if the parameter is not declared explicitly:"
msgstr ""

msgid ""
"This example is similar to the workflows generated by the Xtext project wizard"
" when you create new projects. It uses two convenience classes [StandardProjec"
"tConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/ecl"
"ipse/xtext/xtext/generator/model/project/StandardProjectConfig.java) and [Stan"
"dardLanguage]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/or"
"g/eclipse/xtext/xtext/generator/StandardLanguage.java), both of which are desi"
"gned to apply default configurations that work for the majority of language pr"
"ojects."
msgstr ""

msgid ""
"This example refers to an implementation of the [IHighlightingConfiguration]({"
"{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor"
"/syntaxcoloring/IHighlightingConfiguration.java) that registers an own style f"
"or each cross-reference. It is pretty much the same implementation as for the "
"previously mentioned sample of a lexical [IHighlightingConfiguration]({{site.s"
"rc.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/syntax"
"coloring/IHighlightingConfiguration.java)."
msgstr ""

msgid ""
"This functionality is implemented in the [DefaultEObjectHoverProvider]({{site."
"src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/hover"
"/html/DefaultEObjectHoverProvider.java) that delegates to the [MultiLineCommen"
"tDocumentationProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecli"
"pse/xtext/documentation/impl/MultiLineCommentDocumentationProvider.java) class"
" via the [IEObjectDocumentationProvider]({{site.src.xtext_core}}/org.eclipse.x"
"text/src/org/eclipse/xtext/documentation/IEObjectDocumentationProvider.java) i"
"nterface by default. Customization can happen e.g. by extending the `DefaultEO"
"bjectHoverProvider` class, overriding the `getHoverInfoAsHtml(EObject o)` meth"
"od and binding the custom implementation in the corresponding UI module:"
msgstr ""

msgid ""
"This grammar would be left recursive because the parser reads the grammar top "
"down and left to right and would endlessly call the *Expression* rule without "
"consuming any characters, i.e. altering the underlying state of the parser. Wh"
"ile this kind of grammar can be written for bottom-up parsers, you would still"
" have to deal with operator precedence in addition. That is define that a mult"
"iplication has higher precedence than an addition for example."
msgstr ""

msgid ""
"This group has three elements `'0x'`, `('0'..'7')`, and `('0'..'9'|'A'..'F')`,"
" which have to appear in this order."
msgstr ""

msgid "This implies several constraints:"
msgstr ""

msgid ""
"This is another project made up on configuration data solely. It contains the "
"`feature.xml` file which points to the Eclipse plug-ins (bundles) included in "
"this feature."
msgstr ""
"このプロジェクトは構成データのみで構成されています。このプロジェクトの中にある`feature.xml`ファイルはこのフィーチャーを含むEclipseプラグ"
"イン(バンドル)を指し示しています。"

msgid "This is how the parser processes the following expression:"
msgstr ""

msgid ""
"This is the rule for Java-style comments that begin with `/*` and end with `*/"
"`."
msgstr ""

msgid "This is the simplified formal definition of terminal rules:"
msgstr ""

msgid ""
"This leads to the generic IDE code being generated into the Eclipse integratio"
"n plug-in."
msgstr ""

msgid ""
"This means that the terminal rule *INT* returns instances of `ecore::EInt`. It"
" is possible to define any kind of data type here, which just needs to be an i"
"nstance of `ecore::EDataType`. In order to tell the framework how to convert t"
"he parsed string to a value of the declared data type, you need to provide you"
"r own implementation of the [IValueConverterService]({{site.src.xtext_core}}/o"
"rg.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueConverterService.java)"
" (see [Value Converter](303_runtime_concepts.html#value-converter)). The value"
" converter is also the service that allows to remove escape sequences or seman"
"tically unnecessary characters such as quotes from string literals or the care"
"t symbol `'^'` from the identifiers."
msgstr ""

msgid ""
"This mode is active when `sendFullText` is `false`, which is the default setti"
"ng. In stateful mode, an update request is sent to the server whenever the tex"
"t content of the editor changes. With this approach a copy of the text is kept"
" in the session state of the server, and many Xtext-related services such as A"
"ST parsing and validation are cached together with that copy. This means that "
"services run much faster on the server, and the message size of most requests "
"is very small. Use this mode in order to optimize response times of service re"
"quests."
msgstr ""
"このモードは `sendFullText`を`false`(デフォルト設定)に設定したときに有効となります。ステートフルモードでは、エディターのテキストコン"
"テンツが変更されるたびに更新要求がサーバーに送信されます。このアプローチでは、テキストのコピーがサーバーのセッション状態に保持され、ASTパースや検証といっ"
"たXtext関連のサービスがテキストのコピーとともにキャッシュされます。これは、サーバー上でサービスが非常に高速で実行され、そして多くの要求メッセージのサイ"
"ズが非常に小さいことを意味します。サービス要求の応答時間を最適化するにはこのモードを使用します。"

msgid ""
"This mode is active when `sendFullText` is set to `true`. In this case no upda"
"te request is necessary when the text content changes, but the full text conte"
"nt is attached to all other service requests. This means that the text has to "
"be parsed again for each request, and the message size is proportional to the "
"size of the text content. Use this mode only when you want to avoid server-sid"
"e sessions and respective session ids stored in cookies."
msgstr ""
"このモードは`sendFullText`を`true`に設定したとき有効になります。この場合、テキストコンテンツを変更しても更新リクエストを送る必要はありま"
"せんが、他の全てのサービス要求にフルテキストコンテンツが添付されます。これは、要求のたびにテキストをパースする必要があり、メッセージサイズもテキストコンテン"
"ツのサイズに比例して大きくなることを意味します。このモードはサーバーサイドセッションと各セッションidをcookieに保存するのを避けたい場合にのみ使用しま"
"す。"

msgid ""
"This must be explicitly specified in the MWE2 file in the `language` section a"
"s follows"
msgstr ""

msgid ""
"This only applies to referencing dependencies to imported Ecore models and lan"
"guages based on them which may be used in the test. The inherited dependencies"
" from mixed-in grammars are automatically listed in the generated super class "
"already, and nothing needs to be done for those."
msgstr ""

msgid ""
"This small example (taken from the Xtext Statemachine example) yields the text"
" *event =\\> state* and allows selecting any events and states using a drop dow"
"n:"
msgstr ""

msgid ""
"This tutorial is about testing the parser, the linker, the validator and the g"
"enerator of the *Domainmodel* language. It leverages Xtend to write the test c"
"ases."
msgstr ""

msgid ""
"This way the *cardinality* is optional (last question mark) and can be represe"
"nted by a question mark, a plus, or an asterisk. It will be assigned to either"
" an instance of type *TokenA*, *TokenB*, or *TokenC*, which are all subtypes o"
"f *AbstractToken*. The rule in this example will never create an instance of *"
"AbstractToken* directly, but always return the instance that has been created "
"by the invoked *TokenX* rule."
msgstr ""

msgid ""
"Throughout this chapter, we will step by step improve the [domain model exampl"
"e from the tutorial](103_domainmodelnextsteps.html)."
msgstr ""

msgid ""
"To access images we recommend to use the [PluginImageHelper]({{site.src.xtext_"
"eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/PluginImageHelper.java"
")."
msgstr ""

msgid ""
"To build the entire project you have to run your maven build with this pom fil"
"e."
msgstr "全てのプロジェクトをビルドするためには、このpomファイルを用いてmaven buildを実行する必要があります。"

msgid "To change the children of specific nodes, you have to implement the method"
msgstr ""

msgid ""
"To create a subclass of `AbstractProjectTemplate` it is advisable to annotate "
"a class with the active annotation [ProjectTemplate]({{site.src.xtext_eclipse}"
"}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/ProjectTemplat"
"e.java). With this annotation the name and description can be defined and will"
" be made available to the user interface. Also the extension of `AbstractProje"
"ctTemplate` will be done for you."
msgstr ""

msgid ""
"To customize the error messages please see [IConcreteSyntaxDiagnosticProvider]"
"({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/IC"
"oncreteSyntaxDiagnosticProvider.java) and subclass [ConcreteSyntaxDiagnosticPr"
"ovider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/valida"
"tion/impl/ConcreteSyntaxDiagnosticProvider.java)."
msgstr ""

msgid ""
"To disambiguate the expression, type literals may also be specified using the "
"keyword `typeof`."
msgstr ""

msgid ""
"To enable code mining, the `org.eclipse.xtext.xtext.generator.ui.codemining.Co"
"deMiningFragment` has to be integrated in the `language` section of the MWE2 f"
"ile as follows:"
msgstr ""

msgid ""
"To enable refactoring support make sure the [RefactorElementNameFragment2]({{s"
"ite.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/x"
"text/generator/ui/refactoring/RefactorElementNameFragment2.xtend) is enabled i"
"n the fragment section of the MWE workflow of your language, e.g."
msgstr ""

msgid ""
"To enable support for this kind of global scoping in Xtext, a [DefaultGlobalSc"
"opeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/s"
"coping/impl/DefaultGlobalScopeProvider.java) has to be bound to the [IGlobalSc"
"opeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/s"
"coping/IGlobalScopeProvider.java) interface. By default Xtext leverages the cl"
"ass path mechanism since it is well designed and already understood by most of"
" our users. The available tooling provided by JDT and PDE to configure the cla"
"ss path adds even more value. However, it is just a default: you can reuse the"
" infrastructure without using Java and be independent of the JDT."
msgstr ""

msgid ""
"To follow this section you need a basic understanding of how Maven works. Plea"
"se read a tutorial on Maven if you don't know anything about it."
msgstr ""
"以降の節では、Mavenがどのように動作するのかの基本的な知識が必要です。もし、Mavenについて知識がないのであればMavenのチュートリアルを読んでくだ"
"さい。"

msgid ""
"To further speed up the p2 dependency resolution step, use the concrete build "
"repository instead of a project's repository or the huge [eclipse common]({{pa"
"ge.upsite.eclipse}}releases/photon/) composite repository. In the table below "
"you can find p2 repository URLs for Xtext releases and their dependencies. Ver"
"sions in parentheses represent the minimal required versions."
msgstr ""
"p2リポジトリ依存関係の解決をさらに速くするためには、巨大な[eclipse common]({{page.upsite.eclipse}}releases"
"/photon/)リポジトリの代わりに明確にビルドリポジトリを指定することです。以下の表はp2リポジトリにて検索できるリリースしているXtextのリポジトリ"
"URLとその依存対象です。カッコ内のバージョンは、最小のサポートバージョンです。"

msgid "To have a concrete example, let's deal with the following simple grammar."
msgstr ""

msgid ""
"To have a custom description label provider, make sure it is bound in your UI "
"module:"
msgstr ""

msgid ""
"To illustrate that, let's have a look at Java: Java defines multiple kinds of "
"scopes (object scope, type scope, etc.). For Java one would create the scope h"
"ierarchy as commented in the following example:"
msgstr ""

msgid ""
"To integrate *Operations* in our models, we have to call this rule. We copy th"
"e previous *Feature* to a new rule *Property* and let *Feature* become the sup"
"er type of *Property* and *Operation*:"
msgstr ""

msgid ""
"To invoke the formatter programmatically, you need to instantiate a [request]("
"{{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/Fo"
"rmatterRequest.java) and pass it to the [formatter]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/formatting2/IFormatter2.java). The forma"
"tter will return a list of text replacements. The document modification itself"
" can be performed by an [ITextRegionRewriter]({{site.src.xtext_core}}/org.ecli"
"pse.xtext/src/org/eclipse/xtext/formatting2/regionaccess/ITextRegionRewriter.j"
"ava)."
msgstr ""

msgid ""
"To keep the semantic model and the diagram model in sync, GMF uses a so called"
" *CanonicalEditPolicy*. This component registers as a listener to the semantic"
" model and automatically updates diagram elements when their semantic counterp"
"arts change, are added or are removed. Some notational information can be deri"
"ved from the semantic model by some default mapping, but usually there is a lo"
"t of graphical stuff that the user wants to change to make the diagram look be"
"tter."
msgstr ""

msgid ""
"To provide a dummy proposal for the code of an `event` instance, you may intro"
"duce a specialization of the generated method and implement it as follows. Thi"
"s will propose `ZonkID` for an event with the name `Zonk`."
msgstr ""

msgid ""
"To reuse an existing grammar, make sure the grammar file is on the classpath o"
"f the inheriting language. If it is in a different plug-in, make sure to add a"
" plug-in dependency in the `MANIFEST.MF`."
msgstr ""

msgid ""
"To separate the testing code from the application you should place all your un"
"it tests into this project. The `pom.xml` includes the `tycho-surefire-plugin`"
" for the testing but nothing special apart."
msgstr ""
"テストコードをアプリケーションから分離するため、全てのユニットテストをこのプロジェクトの中に配置します。 `pom.xml`はテストのために`tycho-s"
"urefire-plugin`を含みますが、特別なことは何もありません。"

msgid ""
"To understand error messages and performance issues of the parse tree construc"
"tor it is important to know that it implements a backtracking algorithm. This "
"basically means that the grammar is used to specify the structure of a tree in"
" which one path (from the root node to a leaf node) is a valid serialization o"
"f a specific model. The parse tree constructor's task is to find this path - w"
"ith the condition that all model elements are consumed while walking this path"
". The parse tree constructor's strategy is to take the most promising branch f"
"irst (the one that would consume the most model elements). If the branch leads"
" to a dead end (for example, if a model element needs to be consumed that is n"
"ot present in the model), the parse tree constructor goes back the path until "
"a different branch can be taken. This behavior has two consequences:"
msgstr ""

msgid "To use Xbase expressions let your grammar extend the Xbase grammar."
msgstr ""

msgid ""
"To use concrete syntax validation you can let Guice inject an instance of [ICo"
"ncreteSyntaxValidator]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclip"
"se/xtext/validation/IConcreteSyntaxValidator.java) and use it directly. Furthe"
"rmore, there is an [adapter]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/validation/impl/ConcreteSyntaxEValidator.java) which allows to "
"use the concrete syntax validator as an [EValidator]({{site.src.emf}}/plugins/"
"org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EValidator.java). You can, for"
" example, enable it in your runtime module, by adding:"
msgstr ""

msgid ""
"Transient values are values or model elements which are not persisted (written"
" to the textual representation in the serialization phase). If a model contain"
"s model elements which can not be serialized with the current grammar, it is c"
"ritical to mark them transient using the [ITransientValueService]({{site.src.x"
"text_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parsetree/reconstr/ITransi"
"entValueService.java), or serialization will fail. The default implementation "
"marks all model elements transient, which are `eStructuralFeature.isTransient("
")` or not `eObject.eIsSet(eStructuralFeature)`. By default, EMF returns `false"
"` for `eIsSet(..)` if the value equals the default value."
msgstr ""

msgid ""
"Tycho allows you to resolve project dependencies against existing p2 repositor"
"ies. There are two ways to define target p2 repositories in a Tycho build. The"
" first way is to define the repository URLs directly in the `pom.xml` using ma"
"ven `<repositories>` section. The p2 repositories need to be marked with layou"
"t=p2.\n"
"The second way is to use Eclipse [target platform files](https://wiki.eclipse."
"org/Tycho/Target_Platform#Target_files). This approach is much faster, because"
" the target platform resolution is performed only once, while the repository l"
"ook-ups have to be done for every module. Using the target platform will drast"
"ically reduce the build time, especially in bigger projects with a lot of modu"
"les."
msgstr ""
"Tychoは既存のp2リポジトリに対するプロジェクトの依存性を解決します。Tychoビルドにてターゲットとなるp2リポジトリを定義する方法は2通りあります。"
"1つめは`pom.xml`の`<repositories>`セクションに直接リポジトリのURLを定義することです。p2リポジトリはlayout=p2でマーキ"
"ングされている必要があります。2つめはEclipse [target platform files](https://wiki.eclipse.org/Ty"
"cho/Target_Platform#Target_files)を使用する方法です。このアプローチは全てのモジュールの検索時に実行されるターゲットプラット"
"フォームの解決を1度だけにできるため、とても高速に実行できます。ターゲットプラットフォームの使用はビルド時間を非常に短縮でき、特にたくさんのモジュールを使用"
"する大きいプロジェクトでは効果が見込めます。"

msgid ""
"Type cast behave the same as in Java, but have a more readable syntax. Type ca"
"sts bind stronger than any other operator but weaker than feature calls."
msgstr ""

msgid ""
"Type conformance rules are used in order to find out whether some expression c"
"an be used in a certain situation. For instance when assigning a value to a va"
"riable, the type of the right hand expression needs to conform to the type of "
"the variable."
msgstr ""

msgid ""
"Type:\n"
"    DataType | Entity;"
msgstr ""
"Type:\n"
"    DataType | Entity;"

msgid ""
"Typically one would only want to have one instance of *IntLiteral* instead. Th"
"is problem can be solved by using a combination of unassigned rule calls and a"
"ssigned actions:"
msgstr ""

msgid ""
"Unfortunately, each platform and/or spoken language tends to define its own na"
"tive encoding, e.g. *Cp1258* on Windows in Vietnamese or *MacIceland* on Mac O"
"S X in Icelandic."
msgstr ""

msgid ""
"Unless you want to enforce a uniform encoding for all models of your language,"
" we advise to override the runtime service only. It is bound in the runtime mo"
"dule using the binding annotation [@Runtime]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/service/DispatchingProvider.java):"
msgstr ""

msgid ""
"Used in combination with the [implicit parameter name in lambda expressions](#"
"xbase-expressions-implicit-parameter) you can write [extension libraries](#xba"
"se-language-ref-library-extension) to create and initialize graphs of objects "
"in a concise builder syntax like in Groovy. Consider you have a set of library"
" methods"
msgstr ""

msgid ""
"Using a self-defined textual syntax as the primary storage format has a number"
" of advantages over the default XMI serialization, e.g."
msgstr ""

msgid ""
"Using implicit parameter `it` and skipping empty parentheses you can simplify "
"this to"
msgstr ""

msgid ""
"Using package imports usually requires some [adaptations in the generator work"
"flow](302_configuration.html#importing-metamodels)."
msgstr ""
"パッケージインポートは通常、いくらかの[生成ワークフローへの適応](302_configuration.html#importing-metamodels)"
" が必要です。"

msgid ""
"Using the JVM types model is very simple. First of all, the grammar has to imp"
"ort the *JavaVMTypes* Ecore model. Thanks to content assist this is easy to sp"
"ot in the list of proposals."
msgstr ""

msgid ""
"Using the scoping API one defines which elements are referable by a given refe"
"rence. For instance, using the entities example a feature contains a cross-ref"
"erence to a type:"
msgstr ""

msgid ""
"Valid models for this example are `contents 1 item` or `contents 5 items`. How"
"ever, it is not stored in the semantic model whether the keyword *item* or *it"
"ems* has been parsed. This is due to the fact that the rule call *Plural* is u"
"nassigned. However, the [parse tree constructor](#parse-tree-constructor) need"
"s to decide which value to write during serialization. This decision can be be"
" made by customizing the [IValueSerializer.serializeUnassignedValue(EObject, R"
"uleCall, INode)]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/parsetree/reconstr/ITokenSerializer.java)."
msgstr ""

msgid ""
"Value converters are registered to convert the parsed text into a data type in"
"stance and vice versa. The primary hook is the [IValueConverterService]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueCon"
"verterService.java) and the concrete implementation can be registered via the "
"runtime [Guice module](302_configuration.html#guicemodules). Simply override t"
"he corresponding binding in your runtime module like shown in this example:"
msgstr ""

msgid ""
"Variable declarations are only allowed within [blocks](#xbase-expressions-bloc"
"ks). They are visible in any subsequent expressions in the block. Generally, o"
"verriding or shadowing variables from outer scopes is not allowed. However, it"
" can be used to overload the [implicit variable](#xbase-expressions-implicit-t"
"his) `it`, in order to subsequently access an object's features in an unqualif"
"ied manner."
msgstr ""

msgid ""
"Variables declared outside a lambda expression using the `var` keyword are not"
" accessible from the lambda expression."
msgstr ""

msgid ""
"Voilà, we now have a diagram editor that reads/writes its semantic model as te"
"xt. Also note that the validator from Xtext is already integrated in the diagr"
"am editor via the menu bar."
msgstr ""

msgid ""
"We are now able to test the Eclipse IDE integration. If you right-click the pr"
"oject `org.example.domainmodel` in the Package Explorer and select *Run As &ra"
"rr; Eclipse Application*, a new run configuration is created and launched that"
" starts a second instance of Eclipse including your new language plug-ins. In "
"the new instance, create a new project of your choice, e.g. *File &rarr; New &"
"rarr; Project... &rarr; Java Project* and therein a new file with the file ext"
"ension you chose in the beginning (*\\*.dmodel*). This will open the generated "
"entity editor. Try it and discover the default functionality for code completi"
"on, syntax highlighting, syntactic validation, linking errors, formatting, (qu"
"ick) outline view, hyperlinking, find references, folding, rename refactoring "
"etc."
msgstr ""
"Eclipse IDE統合の準備ができました。パッケージエクスプローラのプロジェクト `org.example.domainmodel` を右クリックし、*"
"Run As &rarr; Eclipse Application*を選択すると、新規run configurationが生成され、新たな言語プラグインが組"
"み込まれた2つ目のEclipseインスタンスが表示されます。表示されたEclipseインスタンスにて*File &rarr; New &rarr; Proj"
"ect... &rarr; Java Project*を実行し、新規プロジェクトを作成します。その後、拡張子が (*\\*.dmodel*) から始まるファイ"
"ルを作成すると、生成したエンティティエディターが開きます。では、コード補間、シンタックスハイライト、構文チェック、リンクエラー、フォーマッティング、(クイッ"
"ク)アウトラインビュー、ハイパーリンキング、参照の発見、折り畳み、リネームリファクタリングなどの標準機能を確認しましょう。"

msgid ""
"We are now able to test the IDE integration by spawning a new Eclipse using ou"
"r plug-ins: right-click the project `org.example.domainmodel` in the Package E"
"xplorer and select *Run As &rarr; Eclipse Application*."
msgstr ""

msgid ""
"We can use the node adapter to access the text block that represents an attrib"
"ute, and call the Xtext parser to parse the user input. The example code is co"
"ntained in *org.eclipse.xtext.gmf.glue.edit.part.AntlrParserWrapper*. *SimpleP"
"ropertyWrapperEditPartOverride* shows how this is integrated into the generate"
"d GMF editor. Use the *EntitiesEditPartFactoryOverride* to instantiate it and "
"the *EntitiesEditPartProviderOverride* to create the overridden factory, and r"
"egister the latter to the extension point. Note that this is a non-invasive wa"
"y to extend the generated GMF editors."
msgstr ""

msgid ""
"We do no longer maintain the GMF example code and have removed it from our ins"
"tallation. You can still access the last version of the source code form our ["
"source code repository](https://github.com/eclipse/xtext/tree/v2.10.0/examples"
"/org.eclipse.xtext.xtext.ui.examples/contents)."
msgstr ""

msgid ""
"We have summarized these most relevant concepts of Ecore in the following diag"
"ram:"
msgstr ""

msgid ""
"We now know how the outer world of referenceable elements can be defined in Xt"
"ext. Nevertheless, not everything is available in all contexts and with a glob"
"al name. Rather than that, each context can usually have a different scope. As"
" already stated, scopes can be nested, i.e. a scope can contain elements of a "
"parent scope in addition to its own elements. When parent and child scope cont"
"ain different elements with the same name, the parent scope's element will usu"
"ally be *shadowed* by the element from the child scope."
msgstr ""

msgid ""
"We previously explained that the [EObject]({{site.src.emf}}/plugins/org.eclips"
"e.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) to be returned is created "
"lazily when the first assignment occurs or as soon as a simple action is evalu"
"ated. There is another concept to find the EObject to be returned, called *una"
"ssigned rule call*. Unassigned rule calls, as the name suggests it, are rule c"
"alls to other parser rules which are not used within an assignment. The return"
" value of the called rule becomes the return value of the calling parser rule "
"if it is not assigned to a feature."
msgstr ""

msgid "We will elaborate the example in three stages."
msgstr ""

msgid ""
"We will now have a look at the component model used to configure the Xtext lan"
"guage generator."
msgstr ""

msgid ""
"We will now walk through the five little steps needed to get this language ful"
"ly working including its compiler. The first three steps are very similar to t"
"hose in the [15 Minutes Tutorial](102_domainmodelwalkthrough.html)."
msgstr ""

msgid ""
"Well chosen predicates allow to solve most ambiguities and backtracking can of"
"ten be disabled. Be warned, though, that an ambiguity for the parser can also "
"mean an ambiguity for the user, so before forcing the syntax into handling suc"
"h cases you should consider avoiding them in the first place."
msgstr ""

msgid ""
"What is especially nice about the default implementation is the actual reason "
"for its class name: It provides very reasonable defaults. To compute the label"
" for a certain model element, it will first look for an [EAttribute]({{site.sr"
"c.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribute.jav"
"a) *name* and try to use this one. If it cannot find such a feature, it will t"
"ry to use the first feature that can be used best as a label. At worst it will"
" return the class name of the model element, which is kind of unlikely to happ"
"en."
msgstr ""

msgid ""
"When a function object is expected to be the last parameter of a feature call,"
" you may declare the lambda expression after the parentheses:"
msgstr ""

msgid ""
"When executed, it first executes the `init-expression`, where local variables "
"can be declared. Next the `predicate` is executed and if it evaluates to `true"
"`, the `body-expression` is executed. On any subsequent iterations the `update"
"-expression` is executed instead of the init-expression. This happens until th"
"e `predicate` returns `false`."
msgstr ""

msgid ""
"When navigating a hyperlink, Xtext will also select the text region correspond"
"ing to the referenced model element. Determining this text region is the respo"
"nsibility of the [ILocationInFileProvider]({{site.src.xtext_core}}/org.eclipse"
".xtext/src/org/eclipse/xtext/resource/ILocationInFileProvider.java). The [defa"
"ult implementation]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/"
"xtext/resource/DefaultLocationInFileProvider.java) implements a best effort st"
"rategy which can be summarized as:"
msgstr ""

msgid "When parsing a given input string, say"
msgstr ""

msgid ""
"When referring to a type somewhere in the grammar you need to qualify the refe"
"rence using that alias (e.g. `another::SomeType`). Cases where such type refer"
"ences occur are explained below."
msgstr ""
"文法内で型を参照する場合、エイリアスを使って参照を修飾する必要があります。(例`another::SomeType`)以下にこのような型の参照が起こる箇所を"
"説明します。"

msgid ""
"When you introduce new highlighting styles, the preference page for your DSL i"
"s automatically configured and allows the customization of any registered high"
"lighting setting. They are automatically persisted and reloaded on startup."
msgstr ""

msgid ""
"When you test the editor, you will note that the node model will be corrupt af"
"ter editing a few labels. This is because the node model is only updated by th"
"e Xtext parser and not by the serializer. So we need a way to automatically ca"
"ll the (partial) parser every time the semantic model is changed. You will fin"
"d the required classes in the package *org.eclipse.xtext.gmf.glue.editingdomai"
"n*. To activate node model reconciling, you have to add a line"
msgstr ""

msgid ""
"Where \"displayText\" is the initial value that is shown in the editor. It is al"
"so the identifier for a place holder so that multiple place holders with the s"
"ame name will be updated at once by the user using linked editing."
msgstr ""

msgid ""
"Where does the `else` branch belong to? This question can be answered by a qui"
"ck look into the language specification which tells that the `else` branch is "
"part of the inner condition. However, the parser generator cannot be convinced"
" that easily. We have to guide it to this decision point by means of syntactic"
" predicates which are expressed by a leading `=>` operator."
msgstr ""

msgid ""
"Which comment belongs to which semantic object is surely a very subjective iss"
"ue. The [default implementation]({{site.src.xtext_core}}/org.eclipse.xtext/src"
"/org/eclipse/xtext/parsetree/reconstr/impl/DefaultCommentAssociater.java) beha"
"ves as follows, but can be customized:"
msgstr ""

msgid ""
"While Eclipse allows to define and inspect the encoding of a file, your file s"
"ystem usually doesn't. Given an arbitrary text file there is no general strate"
"gy to tell how it was encoded. If you deploy an Eclipse project as a jar (even"
" a plug-in), any encoding information not stored in the file itself is lost, t"
"oo. Some languages define the encoding of a file explicitly, as in the first p"
"rocessing instruction of an XML file. Most languages don't. Others imply a fix"
"ed encoding or offer enhanced syntax for character literals, e.g. the unicode "
"escape sequences *\\uXXXX* in Java."
msgstr ""

msgid ""
"While the JVM types approach from the previous chapter allows to refer to any "
"Java element, it is quite limited when it comes to generics. Usually, a type r"
"eference in Java can have type arguments which can also include wildcards, upp"
"er and lower bounds etc. A simple cross-reference using a qualified name is no"
"t enough to express neither the syntax nor the structure of such a type refere"
"nce."
msgstr ""

msgid "While traversing the parser rules Xtext creates"
msgstr ""

msgid ""
"While walking through the grammar, the model inference algorithm keeps track o"
"f a set of the currently possible return types to add features to."
msgstr ""

msgid ""
"With Actions however, the creation of returned [EObject]({{site.src.emf}}/plug"
"ins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) can be made "
"explicit. Xtext supports two kinds of Actions:"
msgstr ""

msgid ""
"With an XMI or other binary-like serialization it is also common and possible "
"to use UUIDs. UUIDs are usually binary and technical, so you don't want to dea"
"l with them in human readable representations."
msgstr ""

msgid ""
"With execution of the generator a stub class `<LanguageName>CodeMiningProvider"
"` is created in the `.codemining` sub-package of the UI plugin. Furthermore th"
"e provider is registered to the `org.eclipse.ui.workbench.texteditor.codeMinin"
"gProviders` extension point in the `plugin.xml`."
msgstr ""

msgid ""
"With plain Guice modules one implements a method called configure and gets a ["
"Binder]({{site.javadoc.guice}}/com/google/inject/Binder.html) passed in. That "
"binder provides a fluent API to define the mentioned mappings."
msgstr ""

msgid ""
"With the *until token* it is possible to state that everything should be consu"
"med until a certain token occurs. The multi-line comment is implemented this w"
"ay:"
msgstr ""

msgid "With these definitions the following sequences of tokens are valid:"
msgstr ""

msgid ""
"With these improved rules the expression `(42)` would lead to a single *IntLit"
"eral* instance, while `40 + 2` creates an *Operation* with two *IntLiterals*."
msgstr ""

msgid ""
"With this implementation you lay out the basic defaults which can be changed b"
"y users on a workspace or per project level using the preferences."
msgstr ""

msgid ""
"With unassigned rule calls one can, for instance, create rules which just disp"
"atch to other rules:"
msgstr ""

msgid ""
"Within Eclipse we have a generated *Activator*, which creates a Guice [Injecto"
"r]({{site.javadoc.guice}}/com/google/inject/Injector.html) using the [modules]"
"(#guicemodules). In addition an [IExecutableExtensionFactory]({{site.javadoc.e"
"clipse-platform}}/org/eclipse/core/runtime/IExecutableExtensionFactory.html) i"
"s generated for each language, which is used to create [IExecutableExtensions]"
"({{site.javadoc.eclipse-platform}}/org/eclipse/core/runtime/IExecutableExtensi"
"on.html). This means that everything which is created via extension points is "
"managed by Guice as well, i.e. you can declare dependencies and get them injec"
"ted upon creation."
msgstr ""

msgid ""
"Without further adaptation the Xtext server does not provide any persistence f"
"unctionality. As described in the [Getting the Text Content](#getting-text-con"
"tent) section, there are multiple ways to fill the web editor with text. If yo"
"u would like to use the persistence service included in the Xtext server, you "
"need to implement [IServerResourceHandler]({{site.src.xtext_web}}/org.eclipse."
"xtext.web/src/main/java/org/eclipse/xtext/web/server/persistence/IServerResour"
"ceHandler.java). The `get` and `put` operations declared in that interface sho"
"uld delegate to the persistence layer you would like to connect. For a simple "
"example see [FileResourceHandler]({{site.src.xtext_web}}/org.eclipse.xtext.web"
"/src/main/java/org/eclipse/xtext/web/server/persistence/FileResourceHandler.ja"
"va)."
msgstr ""
"対応しない限り、Xtextサーバは永続化機能を提供しません。[テキストコンテントの取得](#getting-text-content)節で述べたように、We"
"bエディタにテキストを入力する方法は複数あります。Xtextサーバーに永続化サービスを含めたい場合、[IServerResourceHandler]({{s"
"ite.src.xtext_web}}/org.eclipse.xtext.web/src/main/java/org/eclipse/xtext/web/"
"server/persistence/IServerResourceHandler.java)を実装する必要があります。インターフェースで宣言されている`g"
"et`と`put`命令は、接続したい永続化層に委任する必要があります。[FileResourceHandler]({{site.src.xtext_web}"
"}/org.eclipse.xtext.web/src/main/java/org/eclipse/xtext/web/server/persistence"
"/FileResourceHandler.java)に簡単な例を示しています。"

msgid ""
"Workflow {\n"
"    component = XtextGenerator {\n"
"        configuration = {\n"
"            project = StandardProjectConfig {\n"
"                baseName = \"org.example.domainmodel\"\n"
"                rootPath = rootPath\n"
"                eclipsePlugin = {\n"
"                    enabled = true\n"
"                }\n"
"                createEclipseMetaData = true\n"
"            }\n"
"            code = {\n"
"                encoding = \"UTF-8\"\n"
"            }\n"
"        }\n"
"        language = StandardLanguage {\n"
"            name = \"org.example.domainmodel.Domainmodel\"\n"
"            fileExtensions = \"dmodel\""
msgstr ""

msgid ""
"Xbase comes with a small set of terminal rules, which can be overridden and he"
"nce changed by users. However the default implementation is carefully chosen a"
"nd it is recommended to stick with the lexical syntax described in the followi"
"ng."
msgstr ""

msgid ""
"Xbase comes with two different kinds of comments: Single-line comments and mul"
"ti-line comments. The syntax is the same as the one known from Java (see [§ 3."
"7 Comments](http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3."
"7))."
msgstr ""

msgid ""
"Xbase introduces *lambda expressions*, and therefore an additional function ty"
"pe signature. On the JVM-Level a lambda expression (or more generally any func"
"tion object) is just an instance of one of the types in [Functions]({{site.src"
".xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/eclipse/xtext/xbase/lib/Funct"
"ions.java), depending on the number of arguments. However, as lambda expressio"
"ns are a very important language feature, a special sugared syntax for functio"
"n types has been introduced. So instead of writing `Function1<String, Boolean>"
"` one can write `(String)=>boolean`."
msgstr ""

msgid ""
"Xbase is an expression language that can be embedded into Xtext languages. Its"
" syntax is close to Java, but it additionally offers type inference, lambda ex"
"pressions, a powerful switch expression and a lot more. For details on this ex"
"pression language, please consult the [reference documentation](#xbase-languag"
"e-ref-introduction) and the Xbase tutorial *(File &rarr; New &rarr; Example &r"
"arr; Xtext Examples &rarr; Xbase Tutorial)*."
msgstr ""

msgid ""
"Xbase itself comes with a standard library of such extension methods adding su"
"pport for various operators for the common types, such as [String]({{site.java"
"doc.java}}/java/lang/String.html), [List]({{site.javadoc.java}}/java/util/List"
".html), etc."
msgstr ""

msgid ""
"Xbase offers a parser rule *JvmTypeReference* which supports the full syntax o"
"f a Java type reference and instantiates a JVM element of type [JvmTypeReferen"
"ce]({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/org/eclip"
"se/xtext/common/types/JvmTypeReference.java). So let us start by inheriting fr"
"om Xbase:"
msgstr ""

msgid ""
"Xbase serves as a language library providing a common expression language boun"
"d to the Java platform (i.e. Java Virtual Machine). It consists of an Xtext gr"
"ammar, as well as reusable and adaptable implementations for the different asp"
"ects of a language infrastructure such as an AST structure, a compiler, an int"
"erpreter, a linker, and a static analyzer. In addition it comes with implement"
"ations to integrate the expression language within an Xtext-based Eclipse IDE."
" Default implementations for aspects like content assistance, syntax coloring,"
" hovering, folding and navigation can be easily integrated and reused within a"
"ny Xtext based language."
msgstr ""

msgid ""
"Xbase ships with an interpreter and a compiler that produces Java code. Thus, "
"it is easy to add behavior to your DSLs and make them executable. As Xbase int"
"egrates tightly with Java, there is usually no additional code needed to run y"
"our DSL as part of a Java application."
msgstr ""

msgid ""
"Xbase supports all Java primitives. The conformance rules (e.g. boxing and unb"
"oxing) are also exactly like defined in the Java Language Specification."
msgstr ""

msgid ""
"Xbase supports roughly the same number literals as Java with a few notable dif"
"ferences. As in Java 7, you can separate digits using `_` for better readabili"
"ty of large numbers. An integer literal represents an `int`, a `long` (suffix "
"`L`) or even a [BigInteger]({{site.javadoc.java}}/java/math/BigInteger.html) ("
"suffix `BI`). There are no octal number literals."
msgstr ""

msgid ""
"Xtext already adds a sorting action to your outline. By default, nodes are sor"
"ted lexically by their text. You can change this behavior by binding your own "
"[IComparator]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/"
"xtext/ui/editor/outline/impl/OutlineFilterAndSorter.java)."
msgstr ""

msgid ""
"Xtext also provides a quick outline: If you press CTRL-O in an Xtext editor, t"
"he outline of the model is shown in a popup window. The quick outline also sup"
"ports drill-down search with wildcards. To enable the quick outline, you have "
"to put the [QuickOutlineFragment2]({{site.src.xtext_core}}/org.eclipse.xtext.x"
"text.generator/src/org/eclipse/xtext/xtext/generator/ui/outline/QuickOutlineFr"
"agment2.xtend) into your workflow."
msgstr ""

msgid ""
"Xtext calculates the editor folding regions based on the grammar out-of-the-bo"
"x. Although it comes with good defaults, sometimes they do not satisfy the nee"
"ds and have to be customized."
msgstr ""

msgid ""
"Xtext comes with a slightly enhanced module API. The abstract base class [Abst"
"ractGenericModule]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/service/AbstractGenericModule.java) looks reflectively for certain method"
"s in order to find declared bindings. The most common kind of method is"
msgstr ""

msgid ""
"Xtext comes with a specific template variable resolver called [CrossReferenceT"
"emplateVariableResolver]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/o"
"rg/eclipse/xtext/ui/editor/templates/CrossReferenceTemplateVariableResolver.ja"
"va), which can be used to pre-populate placeholders for cross-references withi"
"n a template. The respective template variable is called *CrossReference* and "
"its syntax is as follows:"
msgstr ""

msgid "Xtext creates"
msgstr ""

msgid ""
"Xtext leverages the powerful ANTLR parser which implements an `LL(*)` algorith"
"m. Even though LL parsers have many advantages with respect to readability, de"
"buggability and error recovery, there are also some drawbacks. The most import"
"ant one is that it does not allow left recursive grammars. For instance, the f"
"ollowing rule is not allowed in LL-based grammars, because `Expression '+' Exp"
"ression` is left-recursive:"
msgstr ""

msgid ""
"Xtext maintains an index of all model elements to allow quick searching and li"
"nking without loading the referenced resource (see the chapter on [index-based"
" scopes](303_runtime_concepts.html#index-based) for details). The elements fro"
"m this index also appear in some UI contexts, e.g. in the *Find model elements"
"* dialog or in the *Find references* view. For reasons of scalability, the UI "
"should not automatically load resources, so we need another implementation of "
"a label provider that works with the elements from the index, i.e. [IResourceD"
"escription]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/re"
"source/IResourceDescription.java), [IEObjectDescription]({{site.src.xtext_core"
"}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IEObjectDescription.java),"
" and [IReferenceDescription]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/resource/IReferenceDescription.java)."
msgstr ""

msgid ""
"Xtext may be used in different environments which introduce different constrai"
"nts. Especially important is the difference between OSGi managed containers an"
"d plain vanilla Java programs. To honor these differences Xtext uses the conce"
"pt of [ISetup]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext"
"/ISetup.java) implementations in normal mode and uses the extension mechanism "
"of Eclipse when it should be configured in an OSGi environment."
msgstr ""

msgid ""
"Xtext offers a couple of strategies for managing containers: If you're running"
" an Eclipse workbench, you can define containers based on Java projects and th"
"eir class paths or based on plain Eclipse projects. Outside Eclipse, you can p"
"rovide a set of file system paths to be scanned for models. All of these only "
"differ in the bound instance of [IAllContainersState]({{site.src.xtext_core}}/"
"org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/IAllContainersStat"
"e.java) of the referring language. These will be described in detail in the fo"
"llowing sections."
msgstr ""

msgid ""
"Xtext offers two levels on which you can configure your language: the language"
" generator and dependency injection. The language generator uses a special DSL"
" called MWE2 to configure the generator."
msgstr ""

msgid ""
"Xtext parsers create in-memory object graphs while consuming text. Such object"
"-graphs are instances of [EMF](https://www.eclipse.org/modeling/emf/) Ecore mo"
"dels. An Ecore model basically consists of an EPackage containing EClasses, ED"
"ataTypes and EEnums (see the [section on EMF](308_emf_integration.html#model-m"
"etamodel) for more details) and describes the structure of the instantiated ob"
"jects. Xtext can infer Ecore models from a grammar (see [Ecore model inference"
"](301_grammarlanguage.html#metamodel-inference)) but it is also possible to im"
"port existing Ecore models. You can even mix both approaches and use multiple "
"existing Ecore models and infer some others from a single grammar. This allows"
" for easy reuse of existing abstractions while still having the advantage of s"
"hort turnarounds with derived Ecore models."
msgstr ""
"Xtextパーサーはテキストからメモリ内オブジェクトグラフを生成します。オブジェクトグラフは [EMF](https://www.eclipse.org/m"
"odeling/emf/) Ecoreモデルのインスタンスです。Ecoreモデルは基本的にEPckageに含まれるEClaases、EDataTypesとE"
"Enums (詳細は [EMF節](308_emf_integration.html#model-metamodel)を参照) と、インスタンス化されたオブ"
"ジェクトの構造を示しています。Xtextは文法([Ecoreモデル推論](301_grammarlanguage.html#metamodel-infere"
"nce))からEcoreモデルを類推できるが、既存のEcoreモデルをインポートすることも可能です。我々は、複数の既存のEcoreモデルを使用するアプローチ"
"と単一文法から他を推論するアプローチの両方をとることができます。これにより、既存の抽象化の再利用を容易にすると同時に、派生したEcoreモデルを用いた短いタ"
"ーンアラウンドの利点を得ることができます。"

msgid ""
"Xtext provides a lot of generic implementations for the infrastructure of your"
" language, but also uses code generation to create specialized components. Suc"
"h generated components are for instance the parser, the serializer, the inferr"
"ed Ecore model (if any) and a couple of convenient base classes for further co"
"nfiguration. The generator also contributes to shared project resources such a"
"s the *plugin.xml*, *MANIFEST.MF* and the [Guice modules](#guicemodules)."
msgstr ""

msgid ""
"Xtext provides a third type of node: [EStructuralFeatureNode]({{site.src.xtext"
"_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/outline/impl/E"
"StructuralFeatureNode.java). It is used to represent a feature of a model elem"
"ent rather than the element itself. The following simplified snippet from Xten"
"d2 illustrates how to use it:"
msgstr ""

msgid ""
"Xtext provides an implementation of EMF's resource, the [XtextResource]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResour"
"ce.java). This does not only encapsulate the parser that converts text to an E"
"MF model but also the [serializer](303_runtime_concepts.html#serialization) wo"
"rking the opposite direction. That way, an Xtext model just looks like any oth"
"er Ecore-based model from the outside, making it amenable for the use by other"
" EMF based tools. So in the ideal case, you can switch the serialization forma"
"t of your models to your self-defined DSL by just replacing the resource imple"
"mentation used by your other modeling tools."
msgstr ""

msgid ""
"Xtext provides an outline view to help you navigate your models. By default, i"
"t provides a hierarchical view on your model and allows you to sort tree eleme"
"nts alphabetically. Selecting an element in the outline will highlight the cor"
"responding element in the text editor. Users can choose to synchronize the out"
"line with the editor selection by clicking the *Link with Editor* button."
msgstr ""

msgid ""
"Xtext provides rename refactoring of the elements in your language. That inclu"
"des"
msgstr ""

msgid ""
"Xtext relies heavily on EMF internally, but it can also be used as the seriali"
"zation back-end of other EMF-based tools. In this section we introduce the bas"
"ic concepts of the [Eclipse Modeling Framework (EMF)](http://www.eclipse.org/m"
"odeling/emf/) in the context of Xtext. If you want to learn more about EMF, we"
" recommend reading the [EMF book](http://www.eclipse.org/modeling/emf/)."
msgstr ""

msgid ""
"Xtext ships two implementations of [IContainer.Manager]({{site.src.xtext_core}"
"}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IContainer.java) which are "
"bound with Guice: The default binding is to [SimpleResourceDescriptionsBasedCo"
"ntainerManager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtex"
"t/resource/impl/SimpleResourceDescriptionsBasedContainerManager.java), which a"
"ssumes all [IResourceDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/s"
"rc/org/eclipse/xtext/resource/IResourceDescription.java) to be in a single com"
"mon container. If you don't care about container support, you'll be fine with "
"this one. Alternatively, you can bind [StateBasedContainerManager]({{site.src."
"xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/State"
"BasedContainerManager.java) and an additional [IAllContainersState]({{site.src"
".xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/IAll"
"ContainersState.java) which keeps track of the set of available containers and"
" their visibility relationships."
msgstr ""

msgid ""
"Xtext ships with a default set of predefined, reasonable and often required te"
"rminal rules. The grammar for these common terminal rules is defined as follow"
"s:"
msgstr ""

msgid ""
"Xtext ships with an index which remembers all [IResourceDescription]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescr"
"iption.java) and their [IEObjectDescription]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/resource/IEObjectDescription.java) objects. In "
"the IDE-context (i.e. when running the editor, etc.) the index is updated by a"
"n incremental project builder. As opposed to that, in a non-UI context you typ"
"ically do not have to deal with changes, hence the infrastructure can be much "
"simpler. In both situations the global index state is held by an implementatio"
"n of [IResourceDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/resource/IResourceDescriptions.java) (note the plural form!). T"
"he bound singleton in the UI scenario is even aware of unsaved editor changes,"
" such that all linking happens to the latest possibly unsaved version of the r"
"esources. You will find the Guice configuration of the global index in the UI "
"scenario in [SharedModule]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.sha"
"red/src/org/eclipse/xtext/ui/shared/internal/SharedModule.java)."
msgstr ""

msgid ""
"Xtext supports the generation of language servers that comply to the [Language"
" Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/)"
"."
msgstr ""
"Xtextは [Language Server Protocol (LSP)](https://microsoft.github.io/language-s"
"erver-protocol/)に準拠する言語サーバーの生成をサポートしています。"

msgid ""
"Xtext supports the reuse of existing grammars. Grammars that are created via t"
"he Xtext wizard use `org.eclipse.xtext.common.Terminals` by default, which int"
"roduces a common set of terminal rules and defines reasonable defaults for hid"
"den terminals."
msgstr ""

msgid "Xtext supports three JavaScript text editor libraries:"
msgstr "Xtextは3つのJavaScriptテキストエディターライブラリーをサポートしています。"

msgid ""
"Xtext targets easy to use and naturally feeling languages. It focuses on the l"
"exical aspects of a language a bit more than on the semantic ones. As a conseq"
"uence, a referenced Ecore model can contain more concepts than are actually co"
"vered by the Xtext grammar. As a result, not everything that is possibly expre"
"ssed in the EMF model can be serialized back into a textual representation wit"
"h regards to the grammar. So if you want to use Xtext to serialize your models"
" as described above, it is good to have a couple of things in mind:"
msgstr ""

msgid ""
"Xtext uses EMF models as the in-memory representation of any parsed text files"
". This in-memory object graph is called the *abstract syntax tree* (AST). Depe"
"nding on the community this concepts is also called *document object model (DO"
"M)*, *semantic model*, or simply *model*. We use *model* and *AST* interchange"
"ably. Given the example model from the [domainmodel tutorial](102_domainmodelw"
"alkthrough.html), the AST looks similar to this"
msgstr ""

msgid ""
"Xtext uses Ecore's EPackages to define Ecore models. Ecore models are declared"
" to be either inferred from the grammar or imported. By using the `generate` d"
"irective, one tells Xtext to infer an EPackage from the grammar."
msgstr ""

msgid ""
"Xtext uses [Apache Log4j](http://logging.apache.org/log4j/) for logging. It is"
" configured using files named *log4j.properties*, which are looked up in the r"
"oot of the Java class path. If you want to change or provide configuration at "
"runtime (i.e. non-OSGi), all you have to do is putting such a *log4j.propertie"
"s* in place and make sure that it is not overridden by other *log4j.properties"
"* in previous class path entries."
msgstr ""

msgid ""
"Xtext uses lazy linking by default and we encourage users to stick to this bec"
"ause it provides many advantages, one of which is improved performance in all "
"scenarios where you don't have to load all transitively referenced resources. "
"Furthermore it automatically solves situations where one link relies on other "
"links (cyclic linking dependencies are not supported, though)."
msgstr ""

msgid ""
"Xtext-based editors automatically support code templates. That means that you "
"get the corresponding preference page where users can add and change template "
"proposals. If you want to ship a couple of default templates, you have to put "
"a file named *templates.xml* inside the *templates* directory of the generated"
" UI-plug-in. This file contains templates in a format as described in the [Ecl"
"ipse online help](http://help.eclipse.org/luna/topic/org.eclipse.cdt.doc.user/"
"tasks/cdt_t_imp_code_temp.htm)."
msgstr ""

msgid ""
"You can also customize error handling by overriding the methods `handleTextErr"
"or()` or `handleImageError()`."
msgstr ""

msgid ""
"You can also customize the icons and texts for an outline node. By default, Xt"
"ext uses the [label provider](#label-provider) of your language. If you want t"
"he labels to be specific to the outline, you can override the methods `_text(m"
"odelElement)` and `_image(modelElement)` in your [DefaultOutlineTreeProvider]("
"{{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/edito"
"r/outline/impl/DefaultOutlineTreeProvider.java)."
msgstr ""

msgid ""
"You can also implement quick fixes for individual validation errors and warnin"
"gs. See the [section on quick fixes](310_eclipse_support.html#quick-fixes) for"
" details."
msgstr ""

msgid ""
"You can choose not to create any node in the `_createChildren()` method. Becau"
"se the outline nodes are calculated on demand, the UI will show you an expanda"
"ble node that doesn't reveal any children even if it is expanded. This might b"
"e confuse your users a bit. To overcome this shortcoming, you have to implemen"
"t the method `_isLeaf(modelElement)` with the appropriate argument type, e.g."
msgstr ""

msgid ""
"You can determine when the `@Check`-annotated methods will be executed with th"
"e help of the [CheckType]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/validation/CheckType.java) enum. The default value is `FAST`, i.e."
" the checks will be executed on editing, saving/building or on request; also a"
"vailable are `NORMAL` (executed on build/save or on request) and `EXPENSIVE` ("
"executed only on request)."
msgstr ""

msgid ""
"You can even define quick fixes for linking errors. The issue codes are assign"
"ed by the [ILinkingDiagnosticMessageProvider]({{site.src.xtext_core}}/org.ecli"
"pse.xtext/src/org/eclipse/xtext/linking/ILinkingDiagnosticMessageProvider.java"
"). Have a look at the domain model example how to add quick fixes for these er"
"rors:"
msgstr ""

msgid ""
"You can use entities instead of Java types or even mix Java types as [List]({{"
"site.javadoc.java}}/java/util/List.html) with entities such as *Person*. One w"
"ay to achieve this is to let your concepts inherit from a corresponding JVM ty"
"pe, e.g. let *Entity* inherit from [JvmGenericType]({{site.src.xtext_extras}}/"
"org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmGener"
"icType.java). But this would result in a lot of accidentally inherited propert"
"ies in your domain model. In Xbase there is an alternative: You can simply def"
"ine how to derive a JVM model from your model. This *inferred JVM model* is th"
"e representation of your concepts in the type system of Xbase."
msgstr ""

msgid ""
"You can use namespace URIs in your grammar file in order to import existing EP"
"ackages. This is generally preferable, and other URI schemes are considered de"
"precated. With a namespace URI the package will be read from the Xtext index a"
"nd therefore your grammar is independent from the concrete location of the res"
"pective ecore file. You have to make sure though that the ecore file is contai"
"ned in a project that is managed by Xtext. Therefore the project has to have t"
"he Xtext project nature attached. Ecore files that reside in referenced Java a"
"rchives (JARs) are automatically picked up and indexed if the referencing proj"
"ect itself is an Xtext project."
msgstr ""

msgid ""
"You can use the [IResourceValidator]({{site.src.xtext_core}}/org.eclipse.xtext"
"/src/org/eclipse/xtext/validation/IResourceValidator.java) to validate a given"
" resource programmatically. Example:"
msgstr ""

msgid ""
"You don't want to deal with platform or even installation dependent paths in y"
"our code generator, rather you want to be able to configure the code generator"
" with some basic outlet roots where the different generated files should be pl"
"aced under. This is what output configurations are made for."
msgstr ""

msgid ""
"You may add multiple languages in the languages section. A language will use t"
"he default outputConfiguration, but you can override the different properties "
"just as you can do within Eclipse preferences."
msgstr ""
"languageセクションに複数の言語を追加することができます。言語はデフォルトの出力構成を使用しますが、Eclipse設定するときと同様に設定を上書きする"
"ことができます。"

msgid ""
"You may also need to initialize imported Ecore models that are not generated b"
"y your Xtext language. This should be done by using an explicit *MyModelPackag"
"e.eINSTANCE.getName();* in the *doSetup()* method of your respective language'"
"s StandaloneSetup class. Note that it is strongly recommended to follow this p"
"attern instead of just using *@Before* methods in your \\*Test class, as due to"
" internal technical reasons that won't work anymore as soon as you have more t"
"han just one *@Test*."
msgstr ""

msgid ""
"You should not put injector creation for referenced languages in your standalo"
"ne setup. Note that for the headless code generation use case, the Maven plug-"
"in is configured with multiple setups, so usually there is no problem there."
msgstr ""

msgid ""
"You should regenerate the language infrastructure as described in the previous"
" section, and give the editor another try. You can even split up your model in"
"to smaller parts and have cross-references across file boundaries."
msgstr ""
"上記の変更をエディターに反映させるためには、前のセクションで紹介した言語インフラストラクチャの生成を再度行う必要があります。また、モデルを小さなパーツに分割"
"し、ファイルの境界を越えてクロスリファレンスすることも可能です。"

msgid ""
"[IdeContentProposalProvider]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src"
"/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalProvider.java) h"
"as one `_createProposals(...)` dispatch method for each type of grammar elemen"
"t. In most cases the best choice is to override the method for [Assignments]({"
"{site.src.xtext_core}}/org.eclipse.xtext/emf-gen/org/eclipse/xtext/Assignment."
"java) and to filter the correct assignments by comparing them with the instanc"
"es in the generated GrammarAccess of your language. A proposal is submitted by"
" creating and configuring an instance of [ContentAssistEntry]({{site.src.xtext"
"_core}}/org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/C"
"ontentAssistEntry.java) and passing it to the given acceptor. This entry class"
" contains all information required to display the proposal in the web browser "
"and to apply it to the document. Usually it is sent to the client in JSON form"
"at."
msgstr ""
"[IdeContentProposalProvider]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src"
"/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalProvider.java)は文"
"法要素の各型に対するディスパッチメソッド`_createProposals(...)`を1つもっています。多くの場合、最良の選択は[Assignments]"
"({{site.src.xtext_core}}/org.eclipse.xtext/emf-gen/org/eclipse/xtext/Assignmen"
"t.java)のメソッドをオーバーライドし、生成された言語のGrammarAccessインスタンスと比較し、正しい割り当てをフィルターすることです。[Con"
"tentAssistEntry]({{site.src.xtext_core}}/org.eclipse.xtext.ide/src/org/eclipse"
"/xtext/ide/editor/contentassist/ContentAssistEntry.java)のインスタンスを作成・構成し、与えられたアク"
"セプターに引き渡すことで提案が提示されます。ContentAssistEntryクラスはWebブラウザーに提案を表示し、ドキュメントに反映するために必要な全"
"ての情報を格納しています。通常クライアントへはJSONフォーマットで送信されます。"

msgid ""
"[Local variables](#xbase-expressions-variable-declaration) can be reassigned u"
"sing the `=` operator. Also properties can be set using that operator: Given t"
"he expression"
msgstr ""

msgid ""
"[SaveOptions]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/"
"resource/SaveOptions.java) can be passed to [XtextResource.save(options)]({{si"
"te.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextReso"
"urce.java) and to [Serializer.serialize(..)]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/parsetree/reconstr/Serializer.java). Available "
"options are:"
msgstr ""

msgid ""
"[Value converters](303_runtime_concepts.html#value-converter) are used to tran"
"sform the parsed string to the actually returned data type value."
msgstr ""

msgid "`${<displayText>:CrossReference([<MyPackageName>.]<MyType>.<myRef>)}`"
msgstr ""

msgid "`${<displayText>:Enum([<MyPackage>.]<EnumType>)}`"
msgstr ""

msgid "`2 + 20 * 2`"
msgstr ""

msgid "```"
msgstr ""

msgid ""
"```\n"
"rvm autolibs disable\n"
"rvm install ruby-2.2.0\n"
"rvm use 2.2.0\n"
"~/.rvm/rubies/ruby-2.2.0/bin/gem install jekyll\n"
"~/.rvm/rubies/ruby-2.2.0/bin/gem install bundler\n"
"~/.rvm/rubies/ruby-2.2.0/bin/gem install jekyll-markdown-block\n"
"```"
msgstr ""
"```\n"
"rvm autolibs disable\n"
"rvm install ruby-2.2.0\n"
"rvm use 2.2.0\n"
"~/.rvm/rubies/ruby-2.2.0/bin/gem install jekyll\n"
"~/.rvm/rubies/ruby-2.2.0/bin/gem install bundler\n"
"~/.rvm/rubies/ruby-2.2.0/bin/gem install jekyll-markdown-block\n"
"```"

msgid ""
"```domainexample\n"
"// blogs.dmodel"
msgstr ""
"```domainexample\n"
"// blogs.dmodel"

msgid ""
"```domainexample\n"
"// commons.dmodel"
msgstr ""
"```domainexample\n"
"// commons.dmodel"

msgid ""
"```domainexample\n"
"// datatypes.dmodel"
msgstr ""
"```domainexample\n"
"// datatypes.dmodel"

msgid ""
"```domainexample\n"
"<template \n"
"  name=\"Entity\" \n"
"  description=\"template for an Entity\"\n"
"  id=\"entity\"\n"
"  context=\"org.eclipse.xtext.example.Domainmodel.Entity\"\n"
"  enabled=\"true\">\n"
"${public:Enum('Visibility')} entity ${Name} {\n"
"  ${cursor}\n"
"}\n"
"</template>\n"
"```"
msgstr ""

msgid ""
"```domainexample\n"
"datatype String"
msgstr ""
"```domainexample\n"
"datatype String"

msgid ""
"```domainexample\n"
"entity Employee extends Person {\n"
"  boss: Person\n"
"..."
msgstr ""

msgid ""
"```domainexample\n"
"import java.util.List"
msgstr ""

msgid ""
"```domainexample\n"
"package bar {\n"
"    entity Bar extends Foo {}\n"
"    entity Foo {}\n"
"}\n"
"```"
msgstr ""

msgid ""
"```domainexample\n"
"package foo {\n"
"    import bar.Foo\n"
"    entity Bar extends Foo {\n"
"    }\n"
"}"
msgstr ""

msgid ""
"```html\n"
"<div id=\"xtext-editor\"\n"
"    data-editor-resource-id=\"example.statemachine\"\n"
"    data-editor-syntax-definition=\"xtext/ace-mode-statemachine\"></div>\n"
"```"
msgstr ""
"```html\n"
"<div id=\"xtext-editor\"\n"
"    data-editor-resource-id=\"example.statemachine\"\n"
"    data-editor-syntax-definition=\"xtext/ace-mode-statemachine\"></div>\n"
"```"

msgid ""
"```java\n"
"    @Override\n"
"    public IScope getScope(EObject context, EReference reference) {\n"
"        if (context instanceof Element\n"
"                && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) "
"{\n"
"            EObject rootElement = EcoreUtil2.getRootContainer(context);\n"
"            List<Element> candidates = EcoreUtil2.getAllContentsOfType(rootEle"
"ment, Element.class);\n"
"            IScope existingScope = Scopes.scopeFor(candidates);\n"
"            // Scope that filters out the context element from the candidates "
"list\n"
"            return new FilteringScope(existingScope, (e) -> !Objects.equal(e.g"
"etEObjectOrProxy(), context));\n"
"        }\n"
"        return super.getScope(context, reference);\n"
"    }\n"
"```"
msgstr ""

msgid ""
"```java\n"
"  if ( myRef != null ) myRef.doStuff()\n"
"```"
msgstr ""

msgid ""
"```java\n"
"  myObj.myProperty = \"foo\";\n"
"```"
msgstr ""

msgid ""
"```java\n"
"  myObj.setMyProperty(\"foo\")\n"
"```"
msgstr ""

msgid ""
"```java\n"
"  public T <T>getFirst(List<T> list, Function0<T,Boolean> predicate)\n"
"```"
msgstr ""

msgid ""
"```java\n"
"(1 + 20) * 2\n"
"```"
msgstr ""

msgid ""
"```java\n"
"// Multiplication rule call\n"
"current = ruleMultiplication();\n"
"// {Addition.left=current}\n"
"Addition temp = new Addition();\n"
"temp.setLeft(current);\n"
"current = temp;\n"
"...\n"
"```"
msgstr ""

msgid ""
"```java\n"
"// feature nodes are leafs and not expandable\n"
"protected boolean _isLeaf(Feature feature) {\n"
"  return true;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"// file contents scope\n"
"import static my.Constants.STATIC;"
msgstr ""

msgid ""
"```java\n"
"// value=INT\n"
"if (current == null)\n"
" current = new NumberLiteral();\n"
"current.setValue(ruleINT());\n"
"...\n"
"```"
msgstr ""

msgid ""
"```java\n"
"0 8 15 x\n"
"x 0 8 15 \n"
"```"
msgstr ""

msgid ""
"```java\n"
"0 x 8 15 // wrong, as values must not be interrupted by a name (ID)\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Check\n"
"public void checkFeatureNameIsUnique(Feature feature) {\n"
"    Entity superEntity = ((Entity) feature.eContainer()).getSuperType();\n"
"    while (superEntity != null) {\n"
"        for (Feature other : superEntity.getFeatures()) {\n"
"            if (Objects.equal(feature.getName(), other.getName())) {\n"
"                error(\"Feature names have to be unique\", DomainmodelPackage.Li"
"terals.FEATURE__NAME);\n"
"                return;\n"
"            }\n"
"        }\n"
"        superEntity = superEntity.getSuperType();\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Check(CheckType.NORMAL)\n"
"public void checkFeatureNameIsUnique(Feature feature) {\n"
"    ...\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Fix(IssueCodes.INVALID_FEATURE_NAME)\n"
"public void fixFeatureName(final Issue issue, \n"
"                           IssueResolutionAcceptor acceptor) {\n"
"  acceptor.accept(issue, \n"
"    \"Uncapitalize name\",    // label\n"
"    \"Uncapitalize name of '\" + issue.getData()[0] + \"'\", // description\n"
"    \"upcase.png\",           // icon \n"
"    (EObject element, IModificationContext context) -> ((Feature) element).set"
"Name(Strings.toFirstLower(issue.getData()[0])));\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Fix(IssueCodes.INVALID_TYPE_NAME)\n"
"@Fix(IssueCodes.OTHER_ISSUE)\n"
"public void fixName(final Issue issue, \n"
"  IssueResolutionAcceptor acceptor) {\n"
"    ...\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Fix(IssueCodes.INVALID_TYPE_NAME)\n"
"public void fixTypeName(Issue issue, IssueResolutionAcceptor acceptor) {\n"
"  acceptor.accept(issue,\n"
"    \"Capitalize name\", // quick fix label\n"
"    \"Capitalize name  of '\" + issue.getData()[0] + \"'\", // description\n"
"    \"upcase.png\",      // quick fix icon\n"
"    (IModificationContext context) -> {\n"
"      IXtextDocument xtextDocument = context.getXtextDocument();\n"
"      String firstLetter = xtextDocument.get(issue.getOffset(), 1);\n"
"      xtextDocument.replace(issue.getOffset(), 1, Strings.toFirstUpper(firstLe"
"tter));\n"
"    });\n"
"  );\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Fix(IssueCodes.MISSING_TYPE)\n"
"public void createReferenceType(Issue issue, IssueResolutionAcceptor acceptor)"
" {\n"
"\tcreateLinkingIssueResolutions(issue, acceptor);\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Fixes(@Fix(IssueCodes.INVALID_TYPE_NAME),@Fix(IssueCodes.OTHER_ISSUE))\n"
"public void fixName(final Issue issue, \n"
"  IssueResolutionAcceptor acceptor) {\n"
"    ...\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Inject \n"
"private StylerFactory stylerFactory;"
msgstr ""

msgid ""
"```java\n"
"@Inject IResourceValidator resourceValidator;"
msgstr ""

msgid ""
"```java\n"
"@Inject private XbaseInterpreter xbaseInterpreter;"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public Class<? extends IComparator>\n"
"  bindOutlineFilterAndSorter$IComparator() {\n"
"    return MydslOutlineNodeComparator.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public Class<? extends IProjectCreator> bindIProjectCreator() {\n"
"    return JDTFreeMyDslProjectCreator.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public Class<? extends IResourceForEditorInputFactory>\n"
"    bindIResourceForEditorInputFactory() {\n"
"        return ResourceForIEditorInputFactory.class;\n"
"}"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public IScope getScope(EObject context, EReference reference) {\n"
"    // We want to define the Scope for the Element's superElement cross-refere"
"nce\n"
"    if (context instanceof Element\n"
"            && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) {\n"
"        // Collect a list of candidates by going through the model\n"
"        // EcoreUtil2 provides useful functionality to do that\n"
"        // For example searching for all elements within the root Object's tre"
"e\n"
"        EObject rootElement = EcoreUtil2.getRootContainer(context);\n"
"        List<Element> candidates = EcoreUtil2.getAllContentsOfType(rootElement"
", Element.class);\n"
"        // Create IEObjectDescriptions and puts them into an IScope instance\n"
"        return Scopes.scopeFor(candidates);\n"
"    }\n"
"    return super.getScope(context, reference);\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public Provider<IAllContainersState> provideIAllContainersState() {\n"
"  return org.eclipse.xtext.ui.shared.Access.getWorkspaceProjectsState();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public void completeEvent_Code(\n"
"  Event event, Assignment assignment, \n"
"  ContentAssistContext context, ICompletionProposalAcceptor acceptor) {\n"
"  // call implementation of superclass\n"
"  super.completeEvent_Code(model, assignment, context, acceptor);"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public void configureContentProposalLabelProvider(Binder binder) {\n"
"  binder.bind(ILabelProvider.class)\n"
"    .annotatedWith(ContentProposalLabelProvider.class)\n"
"    .to(MyContentAssistLabelProvider.class);\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public void configureRuntimeEncodingProvider(Binder binder) {\n"
"    binder.bind(IEncodingProvider.class)\n"
"        .annotatedWith(DispatchingProvider.Runtime.class)\n"
"        .to(MyEncodingProvider.class);\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@SingletonBinding(eager = true)\n"
"public Class<? extends ConcreteSyntaxEValidator> bindConcreteSyntaxEValidator("
") {\n"
"    return ConcreteSyntaxEValidator.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"@ValueConverter(rule = \"MyRuleName\")\n"
"public IValueConverter<MyDataType> getMyRuleNameConverter() {\n"
"    return new MyValueConverterImplementation();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"Dynamic Templates -> true\n"
"  Template Directory = \"org.eclipse.xtext.example.gmf.models/templates\"\n"
"```"
msgstr ""

msgid ""
"```java\n"
"HtmlNode html(Function1<HtmlNode, Void> initializer)\n"
"HeadNode head(HtmlNode parent, Function1<HeadNode, Void> initializer)\n"
"...\n"
"```"
msgstr ""

msgid ""
"```java\n"
"John /* comment */ Smith // line comment\n"
"/* comment */\n"
"      42      ; // line comment\n"
"```"
msgstr ""

msgid ""
"```java\n"
"Operation temp = new Operation();\n"
"temp.setLeft(current);\n"
"current = temp;\n"
"```"
msgstr ""

msgid ""
"```java\n"
"Required Plugins -> \"org.eclipse.xtext.gmf.glue\" \n"
"```"
msgstr ""

msgid ""
"```java\n"
"XtextNodeModelReconciler.adapt(editingDomain);\n"
"```"
msgstr ""

msgid ""
"```java\n"
"_createChildren(parentNode,\n"
"parentModelElement)\n"
"```"
msgstr ""

msgid ""
"```java\n"
"classpathScope{stuff from bin/}\n"
"-> classpathScope{stuff from foo.jar/}\n"
"-> ...\n"
"-> classpathScope{stuff from JRE System Library}\n"
"-> NULLSCOPE{}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"if (isTrue())\n"
"    doStuff();\n"
"else \n"
"    dontDoStuff();\n"
"```"
msgstr ""

msgid ""
"```java\n"
"if (isTrue())\n"
"    if (isTrueAsWell())\n"
"        doStuff();\n"
"    else \n"
"        dontDoStuff();\n"
"```"
msgstr ""

msgid ""
"```java\n"
"package com.mycompany;"
msgstr ""

msgid ""
"```java\n"
"package my.company.blog;"
msgstr ""

msgid ""
"```java\n"
"protected Object _doEvaluate(XBlockExpression literal,\n"
"                             IEvaluationContext context,\n"
"                             CancelIndicator indicator)\n"
"```"
msgstr ""

msgid ""
"```java\n"
"protected String[] getProjectNatures() {\n"
"    return new String[] {\n"
"        \"org.eclipse.pde.PluginNature\",\n"
"        \"org.eclipse.xtext.ui.shared.xtextNature\"\n"
"    };\n"
"}"
msgstr ""

msgid ""
"```java\n"
"protected void _createChildren(DocumentRootNode parentNode,\n"
"                               XtendFile xtendFile) {\n"
"  // show a node for the attribute XtendFile.package\n"
"  createEStructuralFeatureNode(parentNode, \n"
"    xtendFile, \n"
"    Xtend2Package.Literals.XTEND_FILE__PACKAGE,\n"
"    getImageForPackage(), \n"
"    xtendFile.getPackage(), \n"
"    true);\n"
"  // show a container node for the list reference XtendFile.imports\n"
"  // the imports will be shown as individual child nodes automatically \n"
"  createEStructuralFeatureNode(parentNode, \n"
"    xtendFile, \n"
"    Xtend2Package.Literals.XTEND_FILE__IMPORTS,\n"
"    getImageForImportContainer(),\n"
"    \"import declarations\",\n"
"    false);\n"
"  createEObjectNode(parentNode, xtendFile.getXtendClass());\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"protected void _createChildren(DocumentRootNode parentNode, \n"
"                               Domainmodel domainModel) {\n"
"  for (AbstractElement element : domainModel.getElements()) {\n"
"    createNode(parentNode, element);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends IContainer.Manager> bindIContainer$Manager() {\n"
"    return StateBasedContainerManager.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends IScopeProvider> bindIScopeProvider() {\n"
"    return MyConcreteScopeProvider.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends IValueConverterService> bindIValueConverterService() {\n"
"    return MySpecialValueConverterService.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends Provider<IScopeProvider>> provideIScopeProvider() {\n"
"    return MyConcreteScopeProviderFactory.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public IScopeProvider bindIScopeProvider() {\n"
"    return new MyConcreteScopeProvider();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Provider<IAllContainersState> provideIAllContainersState() {\n"
"    return org.eclipse.xtext.ui.shared.Access.getJavaProjectsState();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Provider<IAllContainersState> provideIAllContainersState() {\n"
"    return org.eclipse.xtext.ui.shared.Access.getWorkspaceProjectsState();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public Provider<IScopeProvider> provideIScopeProvider() {\n"
"    return new MyConcreteScopeProviderFactory();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public QualifiedNameFragmentProvider implements IFragmentProvider {"
msgstr ""

msgid ""
"```java\n"
"public class DefaultHighlightingConfiguration\n"
"    implements IHighlightingConfiguration {"
msgstr ""

msgid ""
"```java\n"
"public class DomainmodelRuntimeModule extends org.example.domainmodel.Abstract"
"DomainmodelRuntimeModule {\n"
"\tpublic Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator"
"() {\n"
"\t\treturn org.example.domainmodel.generator.DomainmodelGenerator.class;\n"
"\t}\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public class DomainmodelValidator extends AbstractDomainmodelValidator {"
msgstr ""

msgid ""
"```java\n"
"public class FilterOperationsContribution\n"
"    extends AbstractFilterOutlineContribution {"
msgstr ""

msgid ""
"```java\n"
"public class HighlightingConfiguration\n"
"    implements IHighlightingConfiguration {"
msgstr ""

msgid ""
"```java\n"
"public class MyDslCodeMiningProvider extends AbstractXtextCodeMiningProvider {"
"\n"
"\t@Override\n"
"\tprotected void createCodeMinings(IDocument document, XtextResource resource, "
"CancelIndicator indicator,\n"
"\t\tIAcceptor<ICodeMining> acceptor) throws BadLocationException {"
msgstr ""

msgid ""
"```java\n"
"public class MyDslHoverProvider extends DefaultEObjectHoverProvider {"
msgstr ""

msgid ""
"```java\n"
"public class MyDslOccurrenceComputer extends DefaultOccurrenceComputer {\n"
"\t...\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public class MyDslRuntimeModule implements Module {"
msgstr ""

msgid ""
"```java\n"
"public class MyDslUiModule extends AbstractMyDslUiModule {"
msgstr ""

msgid ""
"```java\n"
"public class MyDslUiModule extends AbstractMyDslUiModule {\n"
"  @Override\n"
"  public Class<? extends ILocationInFileProvider> \n"
"      bindILocationInFileProvider() {\n"
"    return MyDslLocationInFileProvider.class;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public class MyLabelProvider {\n"
"  @Inject  \n"
"  public MyLabelProvider(AdapterFactoryLabelProvider delegate) {\n"
"    super(delegate);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public class MyLanguageLinker extends Linker {"
msgstr ""

msgid ""
"```java\n"
"public class MyLanguageStandaloneSetup extends MyLanguageStandaloneSetupGenera"
"ted {"
msgstr ""

msgid ""
"```java\n"
"public class MyLanguageWithDependenciesInjectorProvider extends MyLanguageInje"
"ctorProvider {\n"
"    @Override\n"
"    protected Injector internalCreateInjector() {\n"
"        MyOtherLangLanguageStandaloneSetup.doSetup();\n"
"        return super.internalCreateInjector();\n"
"    }\n"
"}"
msgstr ""

msgid ""
"```java\n"
"public class MydslOutlineNodeComparator extends DefaultComparator {\n"
"  @Override\n"
"  public int getCategory(IOutlineNode node) {\n"
"    if (node instanceof EObjectNode)\n"
"      switch((EObjectNode) node).getEClass().getClassifierID())) {\n"
"      case MydslPackage.TYPE0:\n"
"        return -10;\n"
"      case MydslPackage.TYPE1:\n"
"        return -20;\n"
"      }\n"
"    return Integer.MIN_VALUE;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public class StatemachineFoldingRegionProvider extends DefaultFoldingRegionPro"
"vider {"
msgstr ""

msgid ""
"```java\n"
"public class StatemachineLabelProvider \n"
"    extends DefaultLabelProvider {"
msgstr ""

msgid ""
"```java\n"
"public interface IScopeProvider {"
msgstr ""

msgid ""
"```java\n"
"public interface ITokenStream {"
msgstr ""

msgid ""
"```java\n"
"public static final\n"
"static protected \n"
"final private static\n"
"public\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public static final String INVALID_NAME = \"invalidName\";"
msgstr ""

msgid ""
"```java\n"
"public static void main(String[] args) {\n"
"    Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegis"
"tration();\n"
"    MyApplication application = injector.getInstance(MyApplication.class);\n"
"    application.run();\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public void complete{TypeName}_{FeatureName}(\n"
"  EObject model, Assignment assignment, \n"
"  ContentAssistContext context, ICompletionProposalAcceptor acceptor) {\n"
"  // subclasses may override\n"
"}"
msgstr ""

msgid ""
"```java\n"
"public void configureFilterOperationsContribution(Binder binder) {\n"
"  binder\n"
"    .bind(IOutlineContribution.class).annotatedWith(\n"
"      Names.named(\"FilterOperationsContribution\"))\n"
"    .to(FilterOperationsContribution.class);\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public void configureIScopeProvider(Binder binder) {\n"
"    binder.bind(IScopeProvider.class).to(MyConcreteScopeProvider.class);\n"
"} \n"
"```"
msgstr ""

msgid ""
"```java\n"
"public void configureResourceUIServiceLabelProvider(Binder binder) {\n"
"  binder.bind(ILabelProvider.class)\n"
"    .annotatedWith(ResourceServiceDescriptionLabelProvider.class)\n"
"    .to(StatemachineDescriptionLabelProvider.class);\n"
"}\n"
"```"
msgstr ""

msgid ""
"```java\n"
"public void provideHighlightingFor(XtextResource resource,\n"
"    IHighlightedPositionAcceptor acceptor) {\n"
"  if (resource == null || resource.getParseResult() == null)\n"
"    return;"
msgstr ""

msgid ""
"```java\n"
"static final static // ERROR: static appears twice\n"
"public static final private // ERROR: visibility appears twice\n"
"final // ERROR: visibility is missing\n"
"```"
msgstr ""

msgid ""
"```java\n"
"void foo(int, Function1<String, String>)\n"
"```"
msgstr ""

msgid ""
"```java\n"
"warning(\"Name should start with a capital\", \n"
"    DomainmodelPackage.TYPE__NAME, IssueCodes.INVALID_TYPE_NAME, type.getName("
"));\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"require.config({\n"
"    paths: {\n"
"        \"jquery\": \"webjars/jquery/<version>/jquery.min\",\n"
"        \"ace/ext/language_tools\": \"webjars/ace/<version>/src/ext-language_tool"
"s\",\n"
"        \"xtext/xtext-ace\": \"xtext/<version>/xtext-ace\"\n"
"    }\n"
"});\n"
"require([\"webjars/ace/<version>/src/ace\"], function() {\n"
"    require([\"xtext/xtext-ace\"], function(xtext) {\n"
"        xtext.createEditor();\n"
"    });\n"
"});\n"
"```"
msgstr ""
"```javascript\n"
"require.config({\n"
"    paths: {\n"
"        \"jquery\": \"webjars/jquery/<version>/jquery.min\",\n"
"        \"ace/ext/language_tools\": \"webjars/ace/<version>/src/ext-language_tool"
"s\",\n"
"        \"xtext/xtext-ace\": \"xtext/<version>/xtext-ace\"\n"
"    }\n"
"});\n"
"require([\"webjars/ace/<version>/src/ace\"], function() {\n"
"    require([\"xtext/xtext-ace\"], function(xtext) {\n"
"        xtext.createEditor();\n"
"    });\n"
"});\n"
"```"

msgid ""
"```javascript\n"
"require.config({\n"
"    paths: {\n"
"        \"jquery\": \"webjars/jquery/<version>/jquery.min\",\n"
"        \"xtext/xtext-codemirror\": \"xtext/<version>/xtext-codemirror\"\n"
"    },\n"
"    packages: [{\n"
"        name: \"codemirror\",\n"
"        location: \"webjars/codemirror/<version>\",\n"
"        main: \"lib/codemirror\"\n"
"    }]\n"
"});\n"
"require([\"xtext/xtext-codemirror\"], function(xtext) {\n"
"    xtext.createEditor();\n"
"});\n"
"```"
msgstr ""
"```javascript\n"
"require.config({\n"
"    paths: {\n"
"        \"jquery\": \"webjars/jquery/<version>/jquery.min\",\n"
"        \"xtext/xtext-codemirror\": \"xtext/<version>/xtext-codemirror\"\n"
"    },\n"
"    packages: [{\n"
"        name: \"codemirror\",\n"
"        location: \"webjars/codemirror/<version>\",\n"
"        main: \"lib/codemirror\"\n"
"    }]\n"
"});\n"
"require([\"xtext/xtext-codemirror\"], function(xtext) {\n"
"    xtext.createEditor();\n"
"});\n"
"```"

msgid ""
"```javascript\n"
"require.config({\n"
"    paths: {\n"
"        \"text\": \"webjars/requirejs-text/<version>/text\",\n"
"        \"jquery\": \"webjars/jquery/<version>/jquery.min\",\n"
"        \"xtext/xtext-orion\": \"xtext/<version>/xtext-orion\"\n"
"    }\n"
"});\n"
"require([\"orion/code_edit/built-codeEdit-amd\"], function() {\n"
"    require([\"xtext/xtext-orion\"], function(xtext) {\n"
"        xtext.createEditor();\n"
"    });\n"
"});\n"
"```\n"
"Since Orion is not available on WebJars, it has to be downloaded manually at ["
"download.eclipse.org](http://download.eclipse.org/orion/)."
msgstr ""
"```javascript\n"
"require.config({\n"
"    paths: {\n"
"        \"text\": \"webjars/requirejs-text/<version>/text\",\n"
"        \"jquery\": \"webjars/jquery/<version>/jquery.min\",\n"
"        \"xtext/xtext-orion\": \"xtext/<version>/xtext-orion\"\n"
"    }\n"
"});\n"
"require([\"orion/code_edit/built-codeEdit-amd\"], function() {\n"
"    require([\"xtext/xtext-orion\"], function(xtext) {\n"
"        xtext.createEditor();\n"
"    });\n"
"});\n"
"```\n"
"WebJarsではOrionが入手できないため、[download.eclipse.org](http://download.eclipse.org/ori"
"on/)からダウンロードする必要があります。"

msgid ""
"```javascript\n"
"var editor = xtext.createEditor();\n"
"$(\"#save-button\").click(function() {\n"
"    editor.xtextServices.saveResource();\n"
"});\n"
"```"
msgstr ""
"```javascript\n"
"var editor = xtext.createEditor();\n"
"$(\"#save-button\").click(function() {\n"
"    editor.xtextServices.saveResource();\n"
"});\n"
"```"

msgid ""
"```javascript\n"
"var editor = xtext.createEditor();\n"
"```"
msgstr ""
"```javascript\n"
"var editor = xtext.createEditor();\n"
"```"

msgid ""
"```javascript\n"
"xtext.createEditor().done(function(editorViewer) {\n"
"    ...\n"
"});\n"
"```"
msgstr ""
"```javascript\n"
"xtext.createEditor().done(function(editorViewer) {\n"
"    ...\n"
"});\n"
"```"

msgid ""
"```javascript\n"
"xtext.createEditor({\n"
"    resourceId: \"example.statemachine\",\n"
"    syntaxDefinition: \"xtext/ace-mode-statemachine\"\n"
"});\n"
"```"
msgstr ""
"```javascript\n"
"xtext.createEditor({\n"
"    resourceId: \"example.statemachine\",\n"
"    syntaxDefinition: \"xtext/ace-mode-statemachine\"\n"
"});\n"
"```"

msgid ""
"```javatypesexample\n"
"  datatype Date mapped-to java.util.Date\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"    scopeProvider = {\n"
"      ignoreCase = true\n"
"    }\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
" ... StandardLanguage {\n"
"    ... other config"
msgstr ""

msgid ""
"```mwe2\n"
"// rename refactoring\n"
"fragment = refactoring.RefactorElementNameFragment2 {}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"Operation {\n"
"  left=Operation {\n"
"    left=IntLiteral {\n"
"      value=42\n"
"    }\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"bean = StandaloneSetup {\n"
"    platformUri = \"${rootPath}\"\n"
"    scanClassPath = true\n"
"    registerGeneratedEPackage = \"my.project.DomainmodelPackage\"\n"
"    registerGenModelFile = \"platform:/resource/my.project/model/Domainmodel.ge"
"nmodel\"\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"component = XtextGenerator {\n"
"    configuration = {\n"
"        code = {\n"
"            encoding = \"UTF-8\"\n"
"        }\n"
"    ...\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"fileWizard = {\n"
"\tgenerate = true\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"fragment = org.eclipse.xtext.xtext.generator.ui.codemining.CodeMiningFragment "
"{}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"language = StandardLanguage {\n"
"    name = \"org.example.domainmodel.Domainmodel\"\n"
"    fileExtensions = \"dmodel\""
msgstr ""

msgid ""
"```mwe2\n"
"language = StandardLanguage {\n"
"    name = \"org.example.domainmodel.Domainmodel\"\n"
"    fileExtensions = \"dmodel\"\n"
"    referencedResource =\n"
"        \"platform:/resource/org.example.domainmodel/model/Domainmodel.genmodel"
"\"\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"language = XtextGeneratorLanguage {\n"
"    name = \"org.example.domainmodel.Domainmodel\"\n"
"    fileExtensions = \"dmodel\"\n"
"    referencedResource = \"platform:/resource/org.eclipse.xtext.xbase/model/Xba"
"se.genmodel\""
msgstr ""

msgid ""
"```mwe2\n"
"module com.mycompany.CreatePersons"
msgstr ""

msgid ""
"```mwe2\n"
"module org.example.domainmodel.GenerateDomainmodel"
msgstr ""

msgid ""
"```mwe2\n"
"project = StandardProjectConfig {\n"
"    baseName = \"org.example.domainmodel\"\n"
"    rootPath = rootPath\n"
"    eclipsePlugin = {\n"
"        enabled = true\n"
"    }\n"
"    createEclipseMetaData = true\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"project = StandardProjectConfig {\n"
"    baseName = \"org.example.domainmodel\"\n"
"    rootPath = rootPath\n"
"    genericIde = {\n"
"        name = \"org.example.domainmodel.ui\"\n"
"    }\n"
"    eclipsePlugin = {\n"
"        enabled = true\n"
"    }\n"
"    createEclipseMetaData = true\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"projectWizard = {\n"
"\tgenerate = true\n"
"\tpluginProject = false\n"
"}\n"
"```"
msgstr ""

msgid ""
"```mwe2\n"
"projectWizard = {\n"
"\tgenerate = true\n"
"}\n"
"```"
msgstr ""

msgid ""
"```ruleengine\n"
"Device Window can be open, closed"
msgstr ""

msgid ""
"```ruleengine\n"
"Rule 'Report error' when Heater.error then\n"
"    var String report\n"
"    do\n"
"        Thread.sleep(500)\n"
"        report = HeaterDiagnostic.readError\n"
"    while (report == null)\n"
"    println(report)\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"   java.util.Collections.emptyList\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"   java.util.Collections::emptyList\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  42\n"
"  1_234_567_890 \n"
"  0xbeef    // hexadecimal\n"
"  077       // decimal 77 (*NOT* octal)\n"
"  42L\n"
"  0xbeef#L // hexadecimal, mind the '#'\n"
"  0xbeef_beef_beef_beef_beef#BI // BigInteger\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  42d     // double\n"
"  0.42e2  // implicit double\n"
"  0.42e2f // float\n"
"  4.2f    // float\n"
"  0.123_456_789_123_456_789_123_456_789e2000bd // BigDecimal\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  if (foo) x\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  if (foo) x else null\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  it.myProperty\n"
"  this.myProperty\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  listOfStrings.map [ e |\n"
"    if (e==null) \n"
"      return \"NULL\"\n"
"    e.toUpperCase\n"
"  ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst() [ e | e.name==null ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst([ e | e.name==null ])\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst[ e | e.name==null ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst[ it.name==null ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst[ name==null ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myObj.myProperty\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myObj.myProperty = \"foo\"\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myProperty\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  myRef?.doStuff()\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  newArrayList( \"Foo\", \"Bar\" ).findFirst[ String e | e == \"Bar\" ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  newArrayList( \"Foo\", \"Bar\" ).findFirst[ e | e == \"Bar\" ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  try {\n"
"    throw new RuntimeException()\n"
"  } catch (NullPointerException e) {\n"
"    // handle e\n"
"  } finally {\n"
"    // do stuff\n"
"  }\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  val func = [ String s | s.length>3 ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  val person = new Person => [\n"
"    firstName = 'John'\n"
"    lastName = 'Coltrane'\n"
"  ]\n"
"  // equivalent to\n"
"  val person = new Person\n"
"  person.firstName = 'John'\n"
"  person.lastName = 'Coltrane'\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  var List<String> strings = new ArrayList<String>(); \n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"  var strings = new ArrayList<String> // -> strings is of type ArrayList<Strin"
"g>\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"foo(42) [ String s | s.toUpperCase ]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"html [ \n"
"  head [ \n"
"    // initialize head\n"
"  ]  \n"
"] \n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"html() [ html |\n"
"  html.head() [ \n"
"    // initialize head\n"
"  ]  \n"
"] \n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"html([ html |\n"
"  head(html, [ \n"
"    // initialize head\n"
"  ]) \n"
"] )\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"newArrayList( 'aaa', 'bb', 'c' ).sort [\n"
"  e1, e2 | if ( e1.length > e2.length ) {\n"
"        -1 \n"
"       } else if ( e1.length < e2.length ) { \n"
"        1\n"
"       } else { \n"
"        0\n"
"       }\n"
"]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"switch e {\n"
"  case e1 : er1\n"
"  case e2 : er2\n"
"  ...\n"
"  case en : ern\n"
"  default : er\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"switch myString {\n"
"  case myString.length>5 : 'a long string.'\n"
"  case 'foo' : \"It's a foo.\"\n"
"  default : \"It's a short non-foo string.\"\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"val (String s)=>String function = [ toUpperCase ]\n"
"  // equivalent to [it | it.toUpperCase]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"val AbstractIterator<String> emptyIterator = [\n"
"\treturn self.endOfData\n"
"]\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"var Object x = ...;\n"
"switch x {\n"
"  String case x.length()>0 : x.length()\n"
"  List<?> : x.size()\n"
"  default : -1\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  ...\n"
"  if (myList.isEmpty)\n"
"    throw new IllegalArgumentException(\"the list must not be empty\")\n"
"  ...\n"
"}   \n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  doSideEffect(\"foo\")\n"
"  result\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  val max = 100\n"
"  var i = 0\n"
"  while (i > max) {\n"
"    println(\"Hi there!\")\n"
"    i = i +1\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  var x = greeting();\n"
"  if (x.equals(\"Hello \")) {\n"
"    x+\"World!\"; \n"
"  } else {\n"
"    x;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xml\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"
"<?pde version=\"3.8\"?>\n"
"<target name=\"org.xtext.myxtextlanguage.target\" sequenceNumber=\"1\">\n"
"<locations>\n"
"  <location includeAllPlatforms=\"false\" includeConfigurePhase=\"false\" includeM"
"ode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n"
"    <unit id=\"org.eclipse.xtext.sdk.feature.group\" version=\"0.0.0\"/>\n"
"    <repository location=\"http://download.eclipse.org/modeling/tmf/xtext/updat"
"es/releases/2.25.0/\"/>\n"
"  </location>\n"
"  <location includeAllPlatforms=\"false\" includeConfigurePhase=\"false\" includeM"
"ode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n"
"    <unit id=\"org.eclipse.jdt.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.platform.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.pde.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.draw2d.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.emf.sdk.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.xpand\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.xtend\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.xtend.typesystem.emf\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.emf.mwe2.launcher.feature.group\" version=\"0.0.0\"/>\n"
"    <repository location=\"http://download.eclipse.org/releases/2021-03/\"/>\n"
"  </location>\n"
"</locations>\n"
"</target>\n"
"```"
msgstr ""
"```xml\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"
"<?pde version=\"3.8\"?>\n"
"<target name=\"org.xtext.myxtextlanguage.target\" sequenceNumber=\"1\">\n"
"<locations>\n"
"  <location includeAllPlatforms=\"false\" includeConfigurePhase=\"false\" includeM"
"ode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n"
"    <unit id=\"org.eclipse.xtext.sdk.feature.group\" version=\"0.0.0\"/>\n"
"    <repository location=\"http://download.eclipse.org/modeling/tmf/xtext/updat"
"es/releases/2.25.0/\"/>\n"
"  </location>\n"
"  <location includeAllPlatforms=\"false\" includeConfigurePhase=\"false\" includeM"
"ode=\"planner\" includeSource=\"false\" type=\"InstallableUnit\">\n"
"    <unit id=\"org.eclipse.jdt.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.platform.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.pde.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.draw2d.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.emf.sdk.feature.group\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.xpand\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.xtend\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.xtend.typesystem.emf\" version=\"0.0.0\"/>\n"
"    <unit id=\"org.eclipse.emf.mwe2.launcher.feature.group\" version=\"0.0.0\"/>\n"
"    <repository location=\"http://download.eclipse.org/releases/2021-03/\"/>\n"
"  </location>\n"
"</locations>\n"
"</target>\n"
"```"

msgid ""
"```xml\n"
"<extension point=\"org.eclipse.ui.editors\">\n"
"  <editor\n"
"    class=\n"
"      \"example.MyDslExecutableExtensionFactory:org.eclipse.xtext.ui.editor.Xte"
"xtEditor\"\n"
"    contributorClass=\n"
"      \"org.eclipse.ui.editors.text.TextEditorActionContributor\"\n"
"    default=\"true\"\n"
"    extensions=\"mydsl\"\n"
"    id=\"org.eclipse.xtext.example.MyDsl\"\n"
"    name=\"MyDsl Editor\">\n"
"  </editor>\n"
"</extension>\n"
"```"
msgstr ""

msgid ""
"```xml\n"
"<plugin>\n"
"\t<groupId>org.eclipse.xtext</groupId>\n"
"\t<artifactId>xtext-maven-plugin</artifactId>\n"
"\t<version>${xtext-version}</version>\n"
"\t<executions>\n"
"\t\t<execution>\n"
"\t\t\t<goals>\n"
"\t\t\t\t<goal>generate</goal>\n"
"\t\t\t</goals>\n"
"\t\t</execution>\n"
"\t</executions>\n"
"\t<configuration>\n"
"\t\t<languages>\n"
"\t\t\t<language>\n"
"\t\t\t\t<setup>my.mavenized.HeroLanguageStandaloneSetup</setup>\n"
"\t\t\t\t<outputConfigurations>\n"
"\t\t\t\t\t<outputConfiguration>\n"
"\t\t\t\t\t\t<outputDirectory>src/main/generated-sources/xtend/</outputDirectory>\n"
"\t\t\t\t\t</outputConfiguration>\n"
"\t\t\t\t</outputConfigurations>\n"
"\t\t\t</language>\n"
"\t\t</languages>\n"
"\t</configuration>\n"
"\t<dependencies>\n"
"\t\t<dependency>\n"
"\t\t\t<groupId>my.mavenized.herolanguage</groupId>\n"
"\t\t\t<artifactId>my.mavenized.herolanguage</artifactId>\n"
"\t\t\t<version>1.0.0-SNAPSHOT</version>\n"
"\t\t</dependency>\n"
"\t</dependencies>\n"
"</plugin>\n"
"```"
msgstr ""
"```xml\n"
"<plugin>\n"
"\t<groupId>org.eclipse.xtext</groupId>\n"
"\t<artifactId>xtext-maven-plugin</artifactId>\n"
"\t<version>${xtext-version}</version>\n"
"\t<executions>\n"
"\t\t<execution>\n"
"\t\t\t<goals>\n"
"\t\t\t\t<goal>generate</goal>\n"
"\t\t\t</goals>\n"
"\t\t</execution>\n"
"\t</executions>\n"
"\t<configuration>\n"
"\t\t<languages>\n"
"\t\t\t<language>\n"
"\t\t\t\t<setup>my.mavenized.HeroLanguageStandaloneSetup</setup>\n"
"\t\t\t\t<outputConfigurations>\n"
"\t\t\t\t\t<outputConfiguration>\n"
"\t\t\t\t\t\t<outputDirectory>src/main/generated-sources/xtend/</outputDirectory>\n"
"\t\t\t\t\t</outputConfiguration>\n"
"\t\t\t\t</outputConfigurations>\n"
"\t\t\t</language>\n"
"\t\t</languages>\n"
"\t</configuration>\n"
"\t<dependencies>\n"
"\t\t<dependency>\n"
"\t\t\t<groupId>my.mavenized.herolanguage</groupId>\n"
"\t\t\t<artifactId>my.mavenized.herolanguage</artifactId>\n"
"\t\t\t<version>1.0.0-SNAPSHOT</version>\n"
"\t\t</dependency>\n"
"\t</dependencies>\n"
"</plugin>\n"
"```"

msgid ""
"```xml\n"
"<plugin>\n"
"  <groupId>org.apache.maven.plugins</groupId>\n"
"  <artifactId>maven-clean-plugin</artifactId>\n"
"  <version>3.1.0</version>\n"
"  <configuration>\n"
"    <filesets>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage/src-gen/</directory>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.tests/src-gen/</director"
"y>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.ide/src-gen/</directory>"
"\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.ui/src-gen/</directory>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.ui.tests/src-gen/</direc"
"tory>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/model/generated/</directory>\n"
"\t\t</fileset>\n"
"    </filesets>\n"
"  </configuration>\n"
"</plugin>\n"
"```"
msgstr ""
"```xml\n"
"<plugin>\n"
"  <groupId>org.apache.maven.plugins</groupId>\n"
"  <artifactId>maven-clean-plugin</artifactId>\n"
"  <version>3.1.0</version>\n"
"  <configuration>\n"
"    <filesets>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage/src-gen/</directory>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.tests/src-gen/</director"
"y>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.ide/src-gen/</directory>"
"\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.ui/src-gen/</directory>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/../my.mavenized.herolanguage.ui.tests/src-gen/</direc"
"tory>\n"
"\t\t\t<includes>\n"
"\t\t\t\t<include>**/*</include>\n"
"\t\t\t</includes>\n"
"\t\t</fileset>\n"
"\t\t<fileset>\n"
"\t\t\t<directory>${basedir}/model/generated/</directory>\n"
"\t\t</fileset>\n"
"    </filesets>\n"
"  </configuration>\n"
"</plugin>\n"
"```"

msgid ""
"```xml\n"
"<plugin>\n"
"  <groupId>org.codehaus.mojo</groupId>\n"
"  <artifactId>exec-maven-plugin</artifactId>\n"
"  <version>1.4.0</version>\n"
"  <executions>\n"
"    <execution>\n"
"      <id>mwe2Launcher</id>\n"
"      <phase>generate-sources</phase>\n"
"      <goals>\n"
"        <goal>java</goal>\n"
"      </goals>\n"
"    </execution>\n"
"  </executions>\n"
"  <configuration>\n"
"    <mainClass>org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher</mainClass>\n"
"    <arguments>\n"
"      <argument>/${project.basedir}/src/my/mavenized/GenerateHeroLanguage.mwe2"
"</argument>\n"
"      <argument>-p</argument>\n"
"      <argument>rootPath=/${project.basedir}/..</argument>\n"
"    </arguments>\n"
"    <classpathScope>compile</classpathScope>\n"
"    <includePluginDependencies>true</includePluginDependencies>\n"
"    <cleanupDaemonThreads>false</cleanupDaemonThreads><!-- see https://bugs.ec"
"lipse.org/bugs/show_bug.cgi?id=475098#c3 -->\n"
"  </configuration>\n"
"  <dependencies>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.emf</groupId>\n"
"      <artifactId>org.eclipse.emf.mwe2.launch</artifactId>\n"
"      <version>2.12.1</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>org.eclipse.xtext.common.types</artifactId>\n"
"      <version>${xtext.version}</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>org.eclipse.xtext.xtext.generator</artifactId>\n"
"      <version>${xtext.version}</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>org.eclipse.xtext.xbase</artifactId>\n"
"      <version>${xtext.version}</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>xtext-antlr-generator</artifactId>\n"
"      <version>[2.1.1, 3)</version>\n"
"    </dependency>\n"
"  </dependencies>\n"
"</plugin>\n"
"```"
msgstr ""
"```xml\n"
"<plugin>\n"
"  <groupId>org.codehaus.mojo</groupId>\n"
"  <artifactId>exec-maven-plugin</artifactId>\n"
"  <version>1.4.0</version>\n"
"  <executions>\n"
"    <execution>\n"
"      <id>mwe2Launcher</id>\n"
"      <phase>generate-sources</phase>\n"
"      <goals>\n"
"        <goal>java</goal>\n"
"      </goals>\n"
"    </execution>\n"
"  </executions>\n"
"  <configuration>\n"
"    <mainClass>org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher</mainClass>\n"
"    <arguments>\n"
"      <argument>/${project.basedir}/src/my/mavenized/GenerateHeroLanguage.mwe2"
"</argument>\n"
"      <argument>-p</argument>\n"
"      <argument>rootPath=/${project.basedir}/..</argument>\n"
"    </arguments>\n"
"    <classpathScope>compile</classpathScope>\n"
"    <includePluginDependencies>true</includePluginDependencies>\n"
"    <cleanupDaemonThreads>false</cleanupDaemonThreads><!-- see https://bugs.ec"
"lipse.org/bugs/show_bug.cgi?id=475098#c3 -->\n"
"  </configuration>\n"
"  <dependencies>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.emf</groupId>\n"
"      <artifactId>org.eclipse.emf.mwe2.launch</artifactId>\n"
"      <version>2.12.1</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>org.eclipse.xtext.common.types</artifactId>\n"
"      <version>${xtext.version}</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>org.eclipse.xtext.xtext.generator</artifactId>\n"
"      <version>${xtext.version}</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>org.eclipse.xtext.xbase</artifactId>\n"
"      <version>${xtext.version}</version>\n"
"    </dependency>\n"
"    <dependency>\n"
"      <groupId>org.eclipse.xtext</groupId>\n"
"      <artifactId>xtext-antlr-generator</artifactId>\n"
"      <version>[2.1.1, 3)</version>\n"
"    </dependency>\n"
"  </dependencies>\n"
"</plugin>\n"
"```"

msgid ""
"```xml\n"
"<template \n"
"  name=\"Transition\" \n"
"  description=\"Template for a Transition\"\n"
"  id=\"org.eclipse.xtext.example.fowlerdsl.Statemachine.Transition\"\n"
"  context=\"org.eclipse.xtext.example.fowlerdsl.Statemachine.Transition\"\n"
"  enabled=\"true\"\n"
">${event:CrossReference('Transition.event')} => ${state:CrossReference('Transi"
"tion.state')}</template>\n"
"</template>\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"  def isMale(String salutation) {\n"
"    switch salutation {\n"
"      case \"Mr.\", \n"
"      case \"Sir\" : true\n"
"      default : false\n"
"    }\n"
"  }\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"  for (<init-expression> ;  <predicate> ; <update-expression>) body-expression"
"\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"  for (val i = 0 ; i < s.length ; i++) {\n"
"    println(s.subString(0,i)\n"
"  }\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"  synchronized(lock) {\n"
"    println(\"Hello\")\n"
"  }\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"  val name = synchronized(lock) { \n"
"    doStuff() \n"
"  }\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"..."
msgstr ""

msgid ""
"```xtend\n"
"@FileTemplate(label=\"Hello World\", icon=\"file_template.png\", description=\"Crea"
"te a hello world for MyDsl.\")\n"
"final class HelloWorldFile {\n"
"    val helloName = combo(\"Hello Name:\", #[\"Xtext\", \"World\", \"Foo\", \"Bar\"], \"T"
"he name to say 'Hello' to\")"
msgstr ""

msgid ""
"```xtend\n"
"@Inject IContainer.Manager manager"
msgstr ""

msgid ""
"```xtend\n"
"@Inject IResourceServiceProvider.Registry rspr\n"
"@Inject IQualifiedNameConverter converter"
msgstr ""

msgid ""
"```xtend\n"
"@ProjectTemplate(label=\"Test\", icon=\"project_template.png\", description=\"<p><b"
">Test</b></p><p>This is a test project.</p>\")\n"
"final class TestProject {\n"
"    val generateHello = check(\"Generate Hello\", true)"
msgstr ""

msgid ""
"```xtend\n"
"class DomainmodelGenerator implements IGenerator {"
msgstr ""

msgid ""
"```xtend\n"
"class DomainmodelJvmModelInferrer extends AbstractModelInferrer {"
msgstr ""

msgid ""
"```xtend\n"
"class StatemachineGenerator extends AbstractGenerator {"
msgstr ""

msgid ""
"```xtend\n"
"def dispatch void format(PackageDeclaration p, extension IFormattableDocument "
"doc) {\n"
"    p.regionFor.feature(PACKAGE_DECLARATION__NAME).surround[oneSpace]\n"
"    interior(\n"
"        p.regionFor.keyword('{').append[newLine],\n"
"        p.regionFor.keyword('}'),\n"
"        [indent]\n"
"    )\n"
"    for (element : p.elements) {\n"
"        format(element, doc)\n"
"        element.append[setNewLines(1, 1, 2)]\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"generator.generate(new PluginProjectFactory => [\n"
"    projectName = projectInfo.projectName\n"
"    location = projectInfo.locationPath\n"
"    projectNatures += #[JavaCore.NATURE_ID, \"org.eclipse.pde.PluginNature\", Xt"
"extProjectHelper.NATURE_ID]\n"
"    builderIds += JavaCore.BUILDER_ID\n"
"    folders += \"src\"\n"
"    addFile('''src/Model.mydsl''', '''\n"
"        Hello World!\n"
"    ''')\n"
"])\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"import org.eclipse.xtext.testing.InjectWith\n"
"import org.eclipse.xtext.testing.XtextRunner\n"
"import org.junit.runner.RunWith\n"
"import org.junit.Test\n"
"import static org.junit.Assert.*\n"
"import org.example.domainmodel.DomainmodelInjectorProvider"
msgstr ""

msgid ""
"```xtend\n"
"import org.eclipse.xtext.testing.InjectWith\n"
"import org.eclipse.xtext.testing.extensions.InjectionExtension\n"
"import org.junit.jupiter.api.^extension.ExtendWith\n"
"import org.junit.jupiter.api.Test\n"
"import static org.junit.jupiter.api.Assertions.*\n"
"import org.example.domainmodel.DomainmodelInjectorProvider"
msgstr ""

msgid ""
"```xtend\n"
"import org.eclipse.xtext.testing.util.ParseHelper\n"
"..."
msgstr ""

msgid ""
"```xtend\n"
"myXtextResource.load(#{XtextResource.OPTION_ENCODING -> \"UTF-8\"})\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"myXtextResource.save(#{XtextResource.OPTION_ENCODING -> \"ISO-8859-1\"})\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"package org.example.domainmodel.generator"
msgstr ""

msgid ""
"```xtend\n"
"package org.example.domainmodel.jvmmodel"
msgstr ""

msgid ""
"```xtend\n"
"var BigDecimal bd = 45bd\n"
"bd += 12bd // equivalent to bd = bd + 12bd\n"
"bd -= 12bd // equivalent to bd = bd - 12bd\n"
"bd /= 12bd // equivalent to bd = bd / 12bd\n"
"bd *= 12bd // equivalent to bd = bd * 12bd\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"// simple cross reference to a Java type\n"
"DataType:\n"
"  'datatype' name=ID \n"
"  'mapped-to' javaType=[jvmTypes::JvmType|QualifiedName];\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"@Override\n"
"XBlockExpression returns xbase::XExpression:\n"
"    {xbase::XBlockExpression}\n"
"    BEGIN\n"
"        (expressions+=XExpressionOrVarDeclaration ';'?)*\n"
"    END;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"AbstractToken:\n"
"    ( TokenA |\n"
"      TokenB |\n"
"      TokenC ) cardinality=('?'|'+'|'*')?;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"AbstractToken:\n"
"    TokenA |\n"
"    TokenB |\n"
"    TokenC;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Addition :\n"
"  Multiplication ('+' Multiplication)*;"
msgstr ""

msgid ""
"```xtext\n"
"Addition returns Expression:\n"
"  Multiplication ('+' Multiplication)*;"
msgstr ""

msgid ""
"```xtext\n"
"Addition returns Expression:\n"
"  Multiplication ({Addition.left=current} '+' right=Addition)?;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Addition returns Expression:\n"
"  Multiplication ({Addition.left=current} '+' right=Multiplication)*;"
msgstr ""

msgid ""
"```xtext\n"
"Addition returns Expression:\n"
"  Multiplication ({Addition.left=current} '+' right=Multiplication)*;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Addition returns Expression:\n"
"  Multiplication ({Addition.left=current} '+' right=Multiplication)?;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"CommonSuperType:\n"
"    SubTypeA | SubTypeB | SubTypeC;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Condition: \n"
"    'if' '(' condition=BooleanExpression ')'\n"
"    then=Expression \n"
"    (=>'else' else=Expression)?\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"CrossReference:\n"
"    '[' type=TypeRef ('|' ^terminal=CrossReferenceableTerminal )? ']';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"DataType:\n"
"    'datatype' name = ID;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Element:\n"
"\t'element' name=ID (value=SomeEnum)?;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"ExampleRule:\n"
"    values+=INT* & name=ID;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Expression :\n"
"  Expression '+' Expression |\n"
"  Expression '*' Expression |\n"
"  INT;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    Expression '+' Expression |\n"
"    '(' Expression ')' |\n"
"    INT;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    TerminalExpression ('+' TerminalExpression)*;"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    TerminalExpression ({Operation.left=current} \n"
"    op='+' right=TerminalExpression)*"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    {Operation} left=TerminalExpression (ops+='+' rights+=TerminalExpression)*"
msgstr ""

msgid ""
"```xtext\n"
"Feature:\n"
"    (many ?= 'many')? name = ID ':' type = [Type];\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Feature:\n"
"    (many?='many')? name=ID ':' type=[Type];\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Feature:\n"
"  Property | Operation\n"
";"
msgstr ""

msgid ""
"```xtext\n"
"Modifier: \n"
"    static?='static'? & final?='final'? & visibility=Visibility;"
msgstr ""

msgid ""
"```xtext\n"
"MyRule returns TypeA:\n"
"    \"A\" name=ID |\n"
"    \"B\" {TypeB} name=ID; \n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"MyRule returns TypeA:\n"
"    \"A\" name=ID |\n"
"    MyOtherRule;"
msgstr ""

msgid ""
"```xtext\n"
"MyRule:\n"
"    ({MySubRule} \"sub\")? (strVal+=ID intVal+=INT)*;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"MyRule:\n"
"  (xval+=ID | yval+=INT)*;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"NumberLiteral : ... ;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"NumberLiteral returns NumberLiteral : ... ;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"Operation:\n"
"  'op' name=ValidID '(' \n"
"  (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'\n"
"  ':' type=JvmTypeReference \n"
"    body=XBlockExpression;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"PackageDeclaration:\n"
"    'package' name=QualifiedName '{'\n"
"        (elements+=AbstractElement)*\n"
"    '}';"
msgstr ""

msgid ""
"```xtext\n"
"Person hidden(WS, ML_COMMENT, SL_COMMENT):\n"
"    name=Fullname age=INT ';';"
msgstr ""

msgid ""
"```xtext\n"
"PluralRule:\n"
"  'contents:' count=INT Plural;"
msgstr ""

msgid ""
"```xtext\n"
"QualifiedName returns ecore::EString:\n"
"    ID ('.' ID)*;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"QualifiedName:\n"
"    ID ('.' ID)*;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"TerminalRule:\n"
"    'terminal' name=ID ('returns' type=TypeRef)? ':'\n"
"    alternatives=TerminalAlternatives ';';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"enum ChangeKind:\n"
"    ADD = 'add' | ADD = '+' | \n"
"    MOVE = 'move' | MOVE = '->' | \n"
"    REMOVE = 'remove' | REMOVE = '-';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"enum ChangeKind:\n"
"    ADD | MOVE | REMOVE;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"enum MyGeneratedEnum:\n"
"    NAME = 'literal' | EQUAL_NAME_AND_LITERAL;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\"\n"
"```"
msgstr ""
"```xtext\n"
"generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\"\n"
"```"

msgid ""
"```xtext\n"
"grammar my.SubGrammar with my.SuperGrammar"
msgstr ""

msgid ""
"```xtext\n"
"grammar my.SuperGrammar"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.eclipse.xtext.common.Terminals\n"
"    hidden(WS, ML_COMMENT, SL_COMMENT)"
msgstr ""
"```xtext\n"
"grammar org.eclipse.xtext.common.Terminals\n"
"    hidden(WS, ML_COMMENT, SL_COMMENT)"

msgid ""
"```xtext\n"
"grammar org.eclipse.xtext.example.Domainmodel\n"
"   with org.eclipse.xtext.xbase.Xbase\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.eclipse.xtext.example.Domainmodel with\n"
"                                      org.eclipse.xtext.xbase.Xbase"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel\n"
"        with org.eclipse.xtext.common.Terminals\n"
"```"
msgstr ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel\n"
"        with org.eclipse.xtext.common.Terminals\n"
"```"

msgid ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel\n"
"    with org.eclipse.xtext.common.Terminals"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel with\n"
"                                      org.eclipse.xtext.common.Terminals"
msgstr ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel with\n"
"                                      org.eclipse.xtext.common.Terminals"

msgid ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel with\n"
"                                      org.eclipse.xtext.xbase.Xbase"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.xbase.Xbase\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.xbase.Xtype\n"
"...\n"
"import \"http://www.eclipse.org/xtext/common/JavaVMTypes\" as jvmTypes\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.xtext.example.mydsl.MyScopingDsl with\n"
"                                      org.eclipse.xtext.common.Terminals"
msgstr ""

msgid ""
"```xtext\n"
"import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore\n"
"//...\n"
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"import \"http://www.eclipse.org/xtext/xbase/Xbase\" as xbase\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\"\n"
"```"
msgstr ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\"\n"
"```"

msgid ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\" as dmodel\n"
"import 'http://www.eclipse.org/anotherPackage' as another\n"
"```"
msgstr ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\" as dmodel\n"
"import 'http://www.eclipse.org/anotherPackage' as another\n"
"```"

msgid ""
"```xtext\n"
"terminal ASCII:\n"
"    '0x' ('0'..'7') ('0'..'9'|'A'..'F');\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal BEGIN: 'synthetic:BEGIN';\n"
"terminal END: 'synthetic:END';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal BETWEEN_HASHES:\n"
"    '#' (!'#')* '#';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal DOUBLE:\n"
"    INT '.' INT;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal FOO:\n"
"    'f' . 'o';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal ID:\n"
"    '^'? ... ;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal ID: \n"
"    ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal ID: \n"
"  '^'? ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*\n"
";\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal ML_COMMENT:\n"
"    '/*' -> '*/';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal WS:\n"
"')+;\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"terminal fragment ESCAPED_CHAR:\n"
"    '\\\\' ('n'|'t'|'r'|'\\\\');\n"
"terminal STRING: \n"
"    '\"' ( ESCAPED_CHAR | !('\\\\'|'\"') )* '\"' |\n"
"    \"'\" ( ESCAPED_CHAR | !('\\\\'|\"'\") )* \"'\";\n"
"```"
msgstr ""

msgid "`ref Entity01`"
msgstr ""

msgid "`terminal UNCLOSED_STRING : '\"' (!'\"')* EOF;`"
msgstr ""

msgid "and for a provider binding"
msgstr ""

msgid "but does not consume the following sequence without raising an error"
msgstr ""

msgid "can parse these lines"
msgstr ""

msgid "class DomainmodelGenerator extends AbstractGenerator {"
msgstr ""

msgid "class DomainmodelJvmModelInferrer extends AbstractModelInferrer {"
msgstr ""

msgid ""
"datatype String\n"
"```"
msgstr ""
"datatype String\n"
"```"

msgid ""
"def void printExportedObjects(Resource resource) {\n"
"    val resServiceProvider = rspr.getResourceServiceProvider(resource.URI)\n"
"    val manager = resServiceProvider.getResourceDescriptionManager()\n"
"    val description = manager.getResourceDescription(resource)\n"
"    for (eod : description.exportedObjects) {\n"
"        println(converter.toString(eod.qualifiedName))\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"def void printVisibleResources(Resource resource, IResourceDescriptions index)"
" {\n"
"    val descr = index.getResourceDescription(resource.URI)\n"
"    for (visibleContainer : manager.getVisibleContainers(descr, index)) {\n"
"        for (visibleResourceDesc : visibleContainer.resourceDescriptions) {\n"
"            println(visibleResourceDesc.URI)\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"entity Blog {\n"
"    title: String\n"
"    many posts: Post\n"
"}"
msgstr ""
"entity Blog {\n"
"    title: String\n"
"    many posts: Post\n"
"}"

msgid ""
"entity Comment extends HasAuthor {\n"
"    content: String\n"
"}\n"
"```"
msgstr ""
"entity Comment extends HasAuthor {\n"
"    content: String\n"
"}\n"
"```"

msgid ""
"entity HasAuthor {\n"
"    author: String\n"
"}"
msgstr ""
"entity HasAuthor {\n"
"    author: String\n"
"}"

msgid ""
"entity HasAuthor {\n"
"    author: String\n"
"}\n"
"```"
msgstr ""

msgid ""
"entity Person {\n"
"  friends: List<Person>\n"
"...\n"
"```"
msgstr ""

msgid ""
"entity Post extends HasAuthor {\n"
"    title: String\n"
"    content: String\n"
"    many comments: Comment\n"
"}"
msgstr ""
"entity Post extends HasAuthor {\n"
"    title: String\n"
"    content: String\n"
"    many comments: Comment\n"
"}"

msgid ""
"enum Visibility:\n"
"    PUBLIC='public' | PRIVATE='private' | PROTECTED='protected';\n"
"```"
msgstr ""

msgid "generate domainmodel \"http://www.eclipse.org/xtext/example/Domainmodel\""
msgstr ""

msgid "generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\""
msgstr "generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\""

msgid "generate myDsl \"http://www.xtext.org/example/mydsl/MyScopingDsl\""
msgstr ""

msgid "generate super \"http://my.org/super\""
msgstr ""

msgid "if the return type is `void`."
msgstr ""

msgid "import \"http://my.org/super\""
msgstr ""

msgid "import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore"
msgstr "import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore"

msgid ""
"import com.google.inject.Inject\n"
"import org.eclipse.emf.ecore.resource.Resource\n"
"import org.eclipse.xtext.generator.AbstractGenerator\n"
"import org.eclipse.xtext.generator.IFileSystemAccess2\n"
"import org.eclipse.xtext.generator.IGeneratorContext\n"
"import org.eclipse.xtext.naming.IQualifiedNameProvider\n"
"import org.example.domainmodel.domainmodel.Entity\n"
"import org.example.domainmodel.domainmodel.Feature"
msgstr ""

msgid ""
"import com.google.inject.Inject\n"
"import org.example.domainmodel.domainmodel.Entity\n"
"import org.example.domainmodel.domainmodel.Operation\n"
"import org.example.domainmodel.domainmodel.Property\n"
"import org.eclipse.xtext.naming.IQualifiedNameProvider\n"
"import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer\n"
"import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor\n"
"import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder"
msgstr ""

msgid ""
"import org.eclipse.xtext.xtext.generator.*\n"
"import org.eclipse.xtext.xtext.generator.model.project.*"
msgstr ""

msgid "in the *GenEditorGenerator* and"
msgstr ""

msgid ""
"in the *GenPlugin* element of the gmfgen before generating the diagram editor "
"anew."
msgstr ""

msgid ""
"in the Eclipse UI module of the referencing language. The latter looks a bit m"
"ore difficult than a common binding, as we have to bind a global singleton to "
"a Guice provider. A [StrictJavaProjectsState]({{site.src.xtext_eclipse}}/org.e"
"clipse.xtext.ui/src/org/eclipse/xtext/ui/containers/StrictJavaProjectsState.ja"
"va) requires all elements to be on the class path, while the default [JavaProj"
"ectsState]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xte"
"xt/ui/containers/JavaProjectsState.java) also allows models in non-source fold"
"ers."
msgstr ""

msgid ""
"in the method `createEditingDomain()` of the generated *EntitiesDocumentProvid"
"er*. To avoid changing the generated code, you can modify the code generation "
"template for that class by setting"
msgstr ""

msgid "in the runtime module and"
msgstr ""

msgid "instead of"
msgstr ""

msgid "is a short form of"
msgstr ""

msgid "is a valid expression"
msgstr ""

msgid "is the a short hand for"
msgstr ""

msgid ""
"is valid as well. It resolves to the same feature as long as there is no local"
" variable `myProperty` declared, which would have higher precedence."
msgstr ""

msgid "one can write"
msgstr ""

msgid "or"
msgstr ""

msgid ""
"package bar {\n"
"    entity Foo {}\n"
"}\n"
"```"
msgstr ""

msgid "package my.company.blog {"
msgstr "package my.company.blog {"

msgid "package my.company.common {"
msgstr "package my.company.common {"

msgid "package my.model {"
msgstr ""

msgid ""
"protected String[] getBuilders() {\n"
"    return new String[] {\n"
"        \"org.eclipse.pde.ManifestBuilder\", \n"
"        \"org.eclipse.pde.SchemaBuilder\"\n"
"    };\n"
"}\n"
"```"
msgstr ""

msgid ""
"protected TextStyle getTypeTextStyle() {\n"
"  TextStyle textStyle = new TextStyle();\n"
"  textStyle.setColor(new RGB(149, 125, 71));\n"
"  textStyle.setStyle(SWT.ITALIC);\n"
"  return textStyle;\n"
"}\n"
"```"
msgstr ""

msgid ""
"public Object _text(Entity entity) {\n"
"  if(entity.isAbstract()) {\n"
"    return new StyledString(entity.getName(), \n"
"      stylerFactory\n"
"        .createXtextStyleAdapterStyler(getTypeTextStyle())));\n"
"  else\n"
"    return entity.getName();\n"
"}"
msgstr ""

msgid ""
"public class CreatePersons {\n"
"    public static void main(String[] args) {\n"
"        Person grandpa = new Person();\n"
"        grandpa.setName(\"Grandpa\");\n"
"        Person father = new Person();\n"
"        father.setName(\"Father\");\n"
"        grandpa.addChild(father);\n"
"        Person son = new Person();\n"
"        son.setName(\"Son\");\n"
"        father.addChild(son);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"public class HasAuthor {\n"
"    private java.lang.String author;"
msgstr ""

msgid "public class Person {"
msgstr ""

msgid ""
"public class ScopeExample { // class body scope\n"
"  private Object field = STATIC;"
msgstr ""

msgid ""
"public void checkResource(Resource resource) {\n"
"    List<Issue> issues = resourceValidator.validate(resource,\n"
"            CheckMode.ALL, CancelIndicator.NullImpl);\n"
"    for (Issue issue: issues) {\n"
"        switch (issue.getSeverity()) {\n"
"            case ERROR:\n"
"                System.out.println(\"ERROR: \" + issue.getMessage());\n"
"                break;\n"
"            case WARNING:\n"
"                System.out.println(\"WARNING: \" + issue.getMessage());\n"
"                break;\n"
"            default: // do nothing\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"public void complete_{RuleName}(\n"
"  EObject model, RuleCall ruleCall, \n"
"  ContentAssistContext context, ICompletionProposalAcceptor acceptor) {\n"
"  // subclasses may override\n"
"}\n"
"```"
msgstr ""

msgid ""
"terminal ANY_OTHER:\n"
"    .;\n"
"```"
msgstr ""
"terminal ANY_OTHER:\n"
"    .;\n"
"```"

msgid ""
"terminal ID:\n"
"    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;"
msgstr ""
"terminal ID:\n"
"    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;"

msgid ""
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;"
msgstr ""
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;"

msgid ""
"terminal ML_COMMENT:\n"
"    '/*' -> '*/';"
msgstr ""
"terminal ML_COMMENT:\n"
"    '/*' -> '*/';"

msgid ""
"terminal Plural:\n"
"  'item' | 'items';\n"
"```"
msgstr ""

msgid ""
"terminal SL_COMMENT:\n"
"    '//' !('\n"
"')?;"
msgstr ""
"terminal SL_COMMENT:\n"
"    '//' !('\n"
"')?;"

msgid ""
"terminal STRING:\n"
"    '\"' ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|'\"') )* '\"' |\n"
"    \"'\" ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|\"'\") )* \"'\";"
msgstr ""
"terminal STRING:\n"
"    '\"' ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|'\"') )* '\"' |\n"
"    \"'\" ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|\"'\") )* \"'\";"

msgid ""
"terminal WS:\n"
"')+;"
msgstr ""
"terminal WS:\n"
"')+;"

msgid ""
"that create DOM elements for HTML pages inside their respective parent element"
"s. You can then create a DOM using the following Xbase code:"
msgstr ""

msgid ""
"the [LazyLinker]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/linking/lazy/LazyLinker.java) first creates an EMF proxy and assigns it to "
"the corresponding [EReference]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/"
"src/org/eclipse/emf/ecore/EReference.java). In EMF a proxy is described by a ["
"URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/eclipse/emf/commo"
"n/util/URI.java), which points to the real [EObject]({{site.src.emf}}/plugins/"
"org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java). In the case of "
"lazy linking the stored URI comprises of the context information given at pars"
"e time, which is the EObject containing the cross-reference, the actual ERefer"
"ence, the list index (in case it's a multi-valued cross-reference) and the str"
"ing which represented the cross-link in the concrete syntax. The latter usuall"
"y corresponds to the name of the referenced EObject. In EMF a URI consists of "
"information about the resource the EObject is contained in as well as a so cal"
"led fragment part, which is used to find the EObject within that resource. Whe"
"n an EMF proxy is resolved, the current [ResourceSet]({{site.src.emf}}/plugins"
"/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/ResourceSet.java) is"
" asked. The resource set uses the first part to obtain (i.e. load if it is not"
" already loaded) the resource. Then the resource is asked to return the EObjec"
"t based on the fragment in the URI. The actual cross-reference resolution is d"
"one by [LazyLinkingResource.getEObject(String)]({{site.src.xtext_core}}/org.ec"
"lipse.xtext/src/org/eclipse/xtext/linking/lazy/LazyLinkingResource.java) which"
" receives the fragment and delegates to the implementation of the [ILinkingSer"
"vice]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/linking/"
"ILinkingService.java). The default implementation in turn delegates to the [sc"
"oping API](#scoping)."
msgstr ""

msgid ""
"the compiler first looks for an accessible field `myProperty` in the type of `"
"myObj`. If no such field exists it tries to find a method called `myProperty()"
"` before it looks for the getter methods `getMyProperty()`. If none of these m"
"embers can be found, the expression is unbound and a compilation error is indi"
"cated."
msgstr ""

msgid ""
"the main expression `e` is evaluated first and then each case sequentially. If"
" the switch expression contains a variable declaration using the syntax known "
"from [for loops](#xbase-expressions-for-loop), the value is bound to the given"
" name. Expressions of type [Boolean]({{site.javadoc.java}}/java/lang/Boolean.h"
"tml) or `boolean` are not allowed in a switch expression."
msgstr ""

msgid "the type of the parameter can be inferred. Which allows users to write:"
msgstr ""

msgid "var rootPath = \"..\""
msgstr ""

msgid "var surname = \"Johnson\""
msgstr ""

msgid ""
"we obtain a runtime project with the name `org.example.domainmodel`, an Eclips"
"e integration project with the name `org.example.domainmodel.ui`, and a generi"
"c IDE project with the name `org.example.domainmodel.ide` (the generic IDE pro"
"ject is enabled automatically if any integration project is enabled). The sour"
"ce folder, MANIFEST.MF and plugin.xml paths are set to the defaults for Eclips"
"e plug-in projects. If you don't want a separate IDE project you can merge its"
" content into another subproject by assigning it the same name:"
msgstr ""

msgid ""
"which would do the same as the code snippet above. It simply declares a bindin"
"g from [IScopeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecli"
"pse/xtext/scoping/IScopeProvider.java) to *MyConcreteScopeProvider*. That bind"
"ing will make Guice instantiate and inject a new instance of *MyConcreteScopeP"
"rovider* whenever a dependency to [IScopeProvider]({{site.src.xtext_core}}/org"
".eclipse.xtext/src/org/eclipse/xtext/scoping/IScopeProvider.java) is declared."
msgstr ""

msgid "will call a Java method with the signature"
msgstr ""

msgid ""
"with the appropriate types. The following snippet shows you how to skip the ro"
"ot model element of type `Domainmodel` in the outline of our domain model exam"
"ple:"
msgstr ""

msgid ""
"with the input of `element Foo` the resulting instance *Foo* will hold the enu"
"m value with the internal representation of `0` (zero). When generating the EP"
"ackage from your grammar this will be the first literal you define. As a worka"
"round you could introduce a dedicated none-value or order the enums accordingl"
"y. Note that it is not possible to define an enum literal with an empty textua"
"l representation. You can overcome this by importing a meta model where the en"
"um is defined and omitting some of its literals in the grammar."
msgstr ""

msgid ""
"would result in unwanted elements in the AST. For instance the expression `(42"
")` would result in a tree like this:"
msgstr ""

msgid ""
"yields the text `public entity Name {}` where the text `public` is the default"
" value of the `Visibility`. The editor provides a drop down that is populated "
"with the other literal values as defined in the [EEnum]({{site.src.emf}}/plugi"
"ns/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EEnum.java)."
msgstr ""

msgid ""
"| Xtext         | EMF           | MWE2/MWE    | Xpand       | Eclipse     | Al"
"l included in |\n"
"| ------------- | ------------- | ----------- | ----------- | ----------- | --"
"--------- |\n"
"| [2.25.0]({{page.upsite.xtext}}releases/2.25.0/)           | [2.25.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.25) (2.20.0)     | [2.12.1]("
"{{page.upsite.mwe}}releases/2.12.1/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.19.0]({{page.upsite.eclipse}}releases/2021-0"
"3) (4.7.3) | [2021-03]({{page.upsite.eclipse}}releases/2021-03)|\n"
"| [2.24.0]({{page.upsite.xtext}}releases/2.24.0/)           | [2.24.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.24) (2.20.0)     | [2.12.0]("
"{{page.upsite.mwe}}releases/2.12.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.18.0]({{page.upsite.eclipse}}releases/2020-1"
"2) (4.7.3) | [2020-12]({{page.upsite.eclipse}}releases/2020-12)|\n"
"| [2.23.0]({{page.upsite.xtext}}releases/2.23.0/)           | [2.23.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.23) (2.20.0)     | [2.11.3]("
"{{page.upsite.mwe}}releases/2.11.3/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.17.0]({{page.upsite.eclipse}}releases/2020-0"
"9) (4.7.3) | [2020-09]({{page.upsite.eclipse}}releases/2020-09)|\n"
"| [2.22.0]({{page.upsite.xtext}}releases/2.22.0/)           | [2.22.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.22) (2.20.0)     | [2.11.3]("
"{{page.upsite.mwe}}releases/2.11.3/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.16.0]({{page.upsite.eclipse}}releases/2020-0"
"6) (4.7.3) | [2020-06]({{page.upsite.eclipse}}releases/2020-06)|\n"
"| [2.21.0]({{page.upsite.xtext}}releases/2.21.0/)           | [2.21.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.21) (2.20.0)     | [2.11.2]("
"{{page.upsite.mwe}}releases/2.11.2/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.15.0]({{page.upsite.eclipse}}releases/2020-0"
"3) (4.7.3) | [2020-03]({{page.upsite.eclipse}}releases/2020-03)|\n"
"| [2.20.0]({{page.upsite.xtext}}releases/2.20.0/)           | [2.20.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.20) (2.12.0)     | [2.11.1]("
"{{page.upsite.mwe}}releases/2.11.1/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.14.0]({{page.upsite.eclipse}}releases/2019-1"
"2) (4.7.3) | [2019-12]({{page.upsite.eclipse}}releases/2019-12)|\n"
"| [2.19.0]({{page.upsite.xtext}}releases/2.19.0/)           | [2.19.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.19) (2.12.0)     | [2.11.0]("
"{{page.upsite.mwe}}releases/2.11.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.13.0]({{page.upsite.eclipse}}releases/2019-0"
"9) (4.7.3) | [2019-09]({{page.upsite.eclipse}}releases/2019-09)|\n"
"| [2.18.0]({{page.upsite.xtext}}releases/2.18.0/)           | [2.18.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.18) (2.12.0)     | [2.10.0]("
"{{page.upsite.mwe}}releases/2.10.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.12.0]({{page.upsite.eclipse}}releases/2019-0"
"6) (4.7.3) | [2019-06]({{page.upsite.eclipse}}releases/2019-06)|\n"
"| [2.17.0]({{page.upsite.xtext}}releases/2.17.0/)           | [2.17.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.17) (2.12.0)     | [2.10.0]("
"{{page.upsite.mwe}}releases/2.10.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.11.0]({{page.upsite.eclipse}}releases/2019-0"
"3) (4.7.3) | [2019-03]({{page.upsite.eclipse}}releases/2019-03)|\n"
"| [2.16.0]({{page.upsite.xtext}}releases/2.16.0/)           | [2.16.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.16) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.10.0]({{page.upsite.eclipse}}releases/2018-12/"
"201812191000) (4.7.3) | [2018-12]({{page.upsite.eclipse}}releases/2018-12/2018"
"12191000)|\n"
"| [2.15.0]({{page.upsite.xtext}}releases/2.15.0/)           | [2.15.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.15) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.9.0]({{page.upsite.eclipse}}releases/2018-09/2"
"01809191002) (4.7.3) | [2018-09]({{page.upsite.eclipse}}releases/2018-09/20180"
"9191002)|\n"
"| [2.14.0]({{page.upsite.xtext}}releases/2.14.0/)           | [2.14.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.14) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.8.0]({{page.upsite.eclipse}}releases/photon/20"
"1806271001) (4.7.3) | [Photon]({{page.upsite.eclipse}}releases/photon/20180627"
"1001)|\n"
"| [2.13.0]({{page.upsite.xtext}}releases/2.13.0/)           | [2.13.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.13) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.7.3]({{page.upsite.eclipse}}releases/oxygen/20"
"1804111000) (3.6) | [Oxygen]({{page.upsite.eclipse}}releases/oxygen/2018041110"
"00)|\n"
"| [2.12.0]({{page.upsite.xtext}}releases/2.12.0/)           | [2.13.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.13) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.7.3]({{page.upsite.eclipse}}releases/oxygen/20"
"1804111000) (3.6) | [Oxygen]({{page.upsite.eclipse}}releases/oxygen/2018041110"
"00)|\n"
"| [2.11.0]({{page.upsite.xtext}}releases/2.11.0/)           | [2.12.0]({{page."
"upsite.eclipse}}releases/neon/201606221000) (2.12.0)     | [2.9.0]({{page.upsi"
"te.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}releases/R2016"
"05260315) (1.4)  | [4.6.0]({{page.upsite.eclipse}}eclipse/updates/4.6/R-4.6-20"
"1606061100) (3.6) | [Neon*]({{page.upsite.eclipse}}releases/neon/201606221000)"
"|\n"
"| [2.10.0]({{page.upsite.xtext}}releases/2.10.0/)           | [2.12.0]({{page."
"upsite.eclipse}}releases/neon/201606221000) (2.12.0)     | [2.9.0]({{page.upsi"
"te.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}releases/R2016"
"05260315) (1.4)  | [4.6.0]({{page.upsite.eclipse}}eclipse/updates/4.6/R-4.6-20"
"1606061100) (3.6) | [Neon]({{page.upsite.eclipse}}releases/neon/201606221000)|"
"\n"
"| [2.9.1]({{page.upsite.xtext}}releases/2.9.1/) \t\t\t\t\t| [2.11.1]({{page.upsite."
"emf}}2.11.x/core/) (2.10.2)  \t | [2.8.3]({{page.upsite.mwe}}releases/2.8.3/) ("
"2.7.1) | [2.1.0]({{page.upsite.xpand}}releases/R201505260349) (1.4)  | [4.5.2]"
"({{page.upsite.eclipse}}eclipse/updates/4.5/R-4.5.2-201602121500/) (3.6) | [Ma"
"rs SR2*]({{page.upsite.eclipse}}releases/mars/)|\n"
"| [2.8.4]({{page.upsite.xtext}}releases/2.8.4/) \t\t\t\t\t| [2.11.1]({{page.upsite."
"emf}}2.11.x/core/) (2.10.2)  \t | [2.8.1]({{page.upsite.mwe}}releases/2.8.1/) ("
"2.7.1) | [2.1.0]({{page.upsite.xpand}}releases/R201505260349) (1.4)  | [4.5.1]"
"({{page.upsite.eclipse}}eclipse/updates/4.5/R-4.5-201506032000/) (3.6) | [Mars"
" SR1]({{page.upsite.eclipse}}releases/mars/)|\n"
"| [2.8.3]({{page.upsite.xtext}}releases/2.8.3/), [2.8.2]({{page.upsite.xtext}}"
"releases/2.8.2/), [2.8.1]({{page.upsite.xtext}}releases/2.8.1/) | [2.11.0]({{p"
"age.upsite.emf}}2.11/core/R201506010402/) (2.10.2)  \t | [2.8.0]({{page.upsite."
"mwe}}releases/2.8.0/) (2.7.1) | [2.1.0]({{page.upsite.xpand}}releases/R2015052"
"60349) (1.4)  | [4.5.0]({{page.upsite.eclipse}}eclipse/updates/4.5/R-4.5-20150"
"6032000/) (3.6) | [Mars R]({{page.upsite.eclipse}}releases/mars/201506241002/)"
"|\n"
"| [2.7.3]({{page.upsite.xtext}}releases/maintenance/R201411190455/) | [2.10.2]"
"({{page.upsite.emf}}2.10.x/core/S201501230452/) (2.10) | [2.7.0]({{page.upsite"
".mwe}}releases/R201409021051/mwe2lang/) [1.3.4]({{page.upsite.mwe}}releases/R2"
"01409021027/mwe) (2.7.0/1.2)  | [2.0.0]({{page.upsite.xpand}}releases/R2014060"
"30414) (1.4) | [4.4.2]({{page.upsite.eclipse}}eclipse/updates/4.4/R-4.4.2-2015"
"02041700) (3.6) |[Luna SR2]({{page.upsite.eclipse}}releases/luna/201502271000/"
")|"
msgstr ""
"| Xtext         | EMF           | MWE2/MWE    | Xpand       | Eclipse     | Al"
"l included in |\n"
"| ------------- | ------------- | ----------- | ----------- | ----------- | --"
"--------- |\n"
"| [2.25.0]({{page.upsite.xtext}}releases/2.25.0/)           | [2.25.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.25) (2.20.0)     | [2.12.1]("
"{{page.upsite.mwe}}releases/2.12.1/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.19.0]({{page.upsite.eclipse}}releases/2021-0"
"3) (4.7.3) | [2021-03]({{page.upsite.eclipse}}releases/2021-03)|\n"
"| [2.24.0]({{page.upsite.xtext}}releases/2.24.0/)           | [2.24.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.24) (2.20.0)     | [2.12.0]("
"{{page.upsite.mwe}}releases/2.12.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.18.0]({{page.upsite.eclipse}}releases/2020-1"
"2) (4.7.3) | [2020-12]({{page.upsite.eclipse}}releases/2020-12)|\n"
"| [2.23.0]({{page.upsite.xtext}}releases/2.23.0/)           | [2.23.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.23) (2.20.0)     | [2.11.3]("
"{{page.upsite.mwe}}releases/2.11.3/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.17.0]({{page.upsite.eclipse}}releases/2020-0"
"9) (4.7.3) | [2020-09]({{page.upsite.eclipse}}releases/2020-09)|\n"
"| [2.22.0]({{page.upsite.xtext}}releases/2.22.0/)           | [2.22.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.22) (2.20.0)     | [2.11.3]("
"{{page.upsite.mwe}}releases/2.11.3/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.16.0]({{page.upsite.eclipse}}releases/2020-0"
"6) (4.7.3) | [2020-06]({{page.upsite.eclipse}}releases/2020-06)|\n"
"| [2.21.0]({{page.upsite.xtext}}releases/2.21.0/)           | [2.21.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.21) (2.20.0)     | [2.11.2]("
"{{page.upsite.mwe}}releases/2.11.2/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.15.0]({{page.upsite.eclipse}}releases/2020-0"
"3) (4.7.3) | [2020-03]({{page.upsite.eclipse}}releases/2020-03)|\n"
"| [2.20.0]({{page.upsite.xtext}}releases/2.20.0/)           | [2.20.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.20) (2.12.0)     | [2.11.1]("
"{{page.upsite.mwe}}releases/2.11.1/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.14.0]({{page.upsite.eclipse}}releases/2019-1"
"2) (4.7.3) | [2019-12]({{page.upsite.eclipse}}releases/2019-12)|\n"
"| [2.19.0]({{page.upsite.xtext}}releases/2.19.0/)           | [2.19.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.19) (2.12.0)     | [2.11.0]("
"{{page.upsite.mwe}}releases/2.11.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.13.0]({{page.upsite.eclipse}}releases/2019-0"
"9) (4.7.3) | [2019-09]({{page.upsite.eclipse}}releases/2019-09)|\n"
"| [2.18.0]({{page.upsite.xtext}}releases/2.18.0/)           | [2.18.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.18) (2.12.0)     | [2.10.0]("
"{{page.upsite.mwe}}releases/2.10.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.12.0]({{page.upsite.eclipse}}releases/2019-0"
"6) (4.7.3) | [2019-06]({{page.upsite.eclipse}}releases/2019-06)|\n"
"| [2.17.0]({{page.upsite.xtext}}releases/2.17.0/)           | [2.17.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.17) (2.12.0)     | [2.10.0]("
"{{page.upsite.mwe}}releases/2.10.0/) (2.9.1) | [2.2.0]({{page.upsite.xpand}}re"
"leases/R201605260315) (1.4)  | [4.11.0]({{page.upsite.eclipse}}releases/2019-0"
"3) (4.7.3) | [2019-03]({{page.upsite.eclipse}}releases/2019-03)|\n"
"| [2.16.0]({{page.upsite.xtext}}releases/2.16.0/)           | [2.16.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.16) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.10.0]({{page.upsite.eclipse}}releases/2018-12/"
"201812191000) (4.7.3) | [2018-12]({{page.upsite.eclipse}}releases/2018-12/2018"
"12191000)|\n"
"| [2.15.0]({{page.upsite.xtext}}releases/2.15.0/)           | [2.15.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.15) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.9.0]({{page.upsite.eclipse}}releases/2018-09/2"
"01809191002) (4.7.3) | [2018-09]({{page.upsite.eclipse}}releases/2018-09/20180"
"9191002)|\n"
"| [2.14.0]({{page.upsite.xtext}}releases/2.14.0/)           | [2.14.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.14) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.8.0]({{page.upsite.eclipse}}releases/photon/20"
"1806271001) (4.7.3) | [Photon]({{page.upsite.eclipse}}releases/photon/20180627"
"1001)|\n"
"| [2.13.0]({{page.upsite.xtext}}releases/2.13.0/)           | [2.13.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.13) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.7.3]({{page.upsite.eclipse}}releases/oxygen/20"
"1804111000) (3.6) | [Oxygen]({{page.upsite.eclipse}}releases/oxygen/2018041110"
"00)|\n"
"| [2.12.0]({{page.upsite.xtext}}releases/2.12.0/)           | [2.13.0]({{page."
"upsite.eclipse}}modeling/emf/emf/builds/release/2.13) (2.12.0)     | [2.9.0]({"
"{page.upsite.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}rele"
"ases/R201605260315) (1.4)  | [4.7.3]({{page.upsite.eclipse}}releases/oxygen/20"
"1804111000) (3.6) | [Oxygen]({{page.upsite.eclipse}}releases/oxygen/2018041110"
"00)|\n"
"| [2.11.0]({{page.upsite.xtext}}releases/2.11.0/)           | [2.12.0]({{page."
"upsite.eclipse}}releases/neon/201606221000) (2.12.0)     | [2.9.0]({{page.upsi"
"te.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}releases/R2016"
"05260315) (1.4)  | [4.6.0]({{page.upsite.eclipse}}eclipse/updates/4.6/R-4.6-20"
"1606061100) (3.6) | [Neon*]({{page.upsite.eclipse}}releases/neon/201606221000)"
"|\n"
"| [2.10.0]({{page.upsite.xtext}}releases/2.10.0/)           | [2.12.0]({{page."
"upsite.eclipse}}releases/neon/201606221000) (2.12.0)     | [2.9.0]({{page.upsi"
"te.mwe}}releases/2.9.0/) (2.7.1) | [2.2.0]({{page.upsite.xpand}}releases/R2016"
"05260315) (1.4)  | [4.6.0]({{page.upsite.eclipse}}eclipse/updates/4.6/R-4.6-20"
"1606061100) (3.6) | [Neon]({{page.upsite.eclipse}}releases/neon/201606221000)|"
"\n"
"| [2.9.1]({{page.upsite.xtext}}releases/2.9.1/) \t\t\t\t\t| [2.11.1]({{page.upsite."
"emf}}2.11.x/core/) (2.10.2)  \t | [2.8.3]({{page.upsite.mwe}}releases/2.8.3/) ("
"2.7.1) | [2.1.0]({{page.upsite.xpand}}releases/R201505260349) (1.4)  | [4.5.2]"
"({{page.upsite.eclipse}}eclipse/updates/4.5/R-4.5.2-201602121500/) (3.6) | [Ma"
"rs SR2*]({{page.upsite.eclipse}}releases/mars/)|\n"
"| [2.8.4]({{page.upsite.xtext}}releases/2.8.4/) \t\t\t\t\t| [2.11.1]({{page.upsite."
"emf}}2.11.x/core/) (2.10.2)  \t | [2.8.1]({{page.upsite.mwe}}releases/2.8.1/) ("
"2.7.1) | [2.1.0]({{page.upsite.xpand}}releases/R201505260349) (1.4)  | [4.5.1]"
"({{page.upsite.eclipse}}eclipse/updates/4.5/R-4.5-201506032000/) (3.6) | [Mars"
" SR1]({{page.upsite.eclipse}}releases/mars/)|\n"
"| [2.8.3]({{page.upsite.xtext}}releases/2.8.3/), [2.8.2]({{page.upsite.xtext}}"
"releases/2.8.2/), [2.8.1]({{page.upsite.xtext}}releases/2.8.1/) | [2.11.0]({{p"
"age.upsite.emf}}2.11/core/R201506010402/) (2.10.2)  \t | [2.8.0]({{page.upsite."
"mwe}}releases/2.8.0/) (2.7.1) | [2.1.0]({{page.upsite.xpand}}releases/R2015052"
"60349) (1.4)  | [4.5.0]({{page.upsite.eclipse}}eclipse/updates/4.5/R-4.5-20150"
"6032000/) (3.6) | [Mars R]({{page.upsite.eclipse}}releases/mars/201506241002/)"
"|\n"
"| [2.7.3]({{page.upsite.xtext}}releases/maintenance/R201411190455/) | [2.10.2]"
"({{page.upsite.emf}}2.10.x/core/S201501230452/) (2.10) | [2.7.0]({{page.upsite"
".mwe}}releases/R201409021051/mwe2lang/) [1.3.4]({{page.upsite.mwe}}releases/R2"
"01409021027/mwe) (2.7.0/1.2)  | [2.0.0]({{page.upsite.xpand}}releases/R2014060"
"30414) (1.4) | [4.4.2]({{page.upsite.eclipse}}eclipse/updates/4.4/R-4.4.2-2015"
"02041700) (3.6) |[Luna SR2]({{page.upsite.eclipse}}releases/luna/201502271000/"
")|"

msgid ""
"|:---|:---|\n"
"|**Project name:**|org.example.domainmodel|\n"
"|**Language name:**|org.example.domainmodel.Domainmodel|\n"
"|**DSL-File extensions:**|dmodel|"
msgstr ""
"|:---|:---|\n"
"|**プロジェクト名:**|org.example.domainmodel|\n"
"|**言語名:**|org.example.domainmodel.Domainmodel|\n"
"|**DSL-ファイル拡張子:**|dmodel|"

msgid ""
"|:---|:---|\n"
"|**Project name:**|org.example.domainmodel|\n"
"|**Language name:**|org.example.domainmodel.Domainmodel|\n"
"|**File extension:**|dmodel|"
msgstr ""

msgid ""
"|:---|:---|\n"
"|`e1 += e2`|`+`|\n"
"|`e1 -= e2`|`-`|\n"
"|`e1 *= e2`|`*`|\n"
"|`e1 /= e2`|`/`|\n"
"|`e1 %= e2`|`%`|"
msgstr ""

msgid ""
"|:---|:---|\n"
"|`e1 += e2`|`e1.operator_add(e2)`|\n"
"|`e1 -= e2`|`e1.operator_remove(e2)`|\n"
"|||\n"
"|`e1 || e2`|`e1.operator_or(e2)`|\n"
"|||\n"
"|`e1 && e2`|`e1.operator_and(e2)`|\n"
"|||\n"
"|`e1 == e2`|`e1.operator_equals(e2)`|\n"
"|`e1 != e2`|`e1.operator_notEquals(e2)`|\n"
"|`e1 === e2`|`e1.operator_tripleEquals(e2)`|\n"
"|`e1 !== e2`|`e1.operator_tripleNotEquals(e2)`|\n"
"|||\n"
"|`e1 < e2`|`e1.operator_lessThan(e2)`|\n"
"|`e1 > e2`|`e1.operator_greaterThan(e2)`|\n"
"|`e1 <= e2`|`e1.operator_lessEqualsThan(e2)`|\n"
"|`e1 >= e2`|`e1.operator_greaterEqualsThan(e2)`|\n"
"|||\n"
"|`e1 -> e2`|`e1.operator_mappedTo(e2)`|\n"
"|`e1 .. e2`|`e1.operator_upTo(e2)`|\n"
"|`e1 >.. e2`|`e1.operator_greaterThanDoubleDot(e2)`|\n"
"|`e1 ..< e2`|`e1.operator_doubleDotLessThan(e2)`|\n"
"|`e1 => e2`|`e1.operator_doubleArrow(e2)`|\n"
"|`e1 << e2`|`e1.operator_doubleLessThan(e2)`|\n"
"|`e1 >> e2`|`e1.operator_doubleGreaterThan(e2)`|\n"
"|`e1 <<< e2`|`e1.operator_tripleLessThan(e2)`|\n"
"|`e1 >>> e2`|`e1.operator_tripleGreaterThan(e2)`|\n"
"|`e1 <> e2`|`e1.operator_diamond(e2)`|\n"
"|`e1 ?: e2`|`e1.operator_elvis(e2)`|\n"
"|`e1 <=> e2`|`e1.operator_spaceship(e2)`|\n"
"|||\n"
"|`e1 + e2`|`e1.operator_plus(e2)`|\n"
"|`e1 - e2`|`e1.operator_minus(e2)`|\n"
"|||\n"
"|`e1 * e2`|`e1.operator_multiply(e2)`|\n"
"|`e1 / e2`|`e1.operator_divide(e2)`|\n"
"|`e1 % e2`|`e1.operator_modulo(e2)`|\n"
"|`e1 ** e2`|`e1.operator_power(e2)`|\n"
"|||\n"
"|`! e1`|`e1.operator_not()`|\n"
"|`- e1`|`e1.operator_minus()`|\n"
"|`+ e1`|`e1.operator_plus()`|"
msgstr ""

msgid ""
"|:---|:---|\n"
"|`e1++`|`e1.operator_plusPlus()`|\n"
"|`e1--`|`e1.operator_minusMinus()`|"
msgstr ""

msgid ""
"|:---|:---|\n"
"|org.example.domainmodel|The grammar definition and all language-specific comp"
"onents (parser, lexer, linker, validation, etc.)|\n"
"|org.example.domainmodel.ide|Platform-independent IDE functionality (e.g. serv"
"ices for content assist)|\n"
"|org.example.domainmodel.tests|Unit tests for the language|\n"
"|org.example.domainmodel.ui|The Eclipse editor and other workbench related fun"
"ctionality|\n"
"|org.example.domainmodel.ui.tests|UI tests for the Eclipse editor|"
msgstr ""
"|:---|:---|\n"
"|org.example.domainmodel| 文法定義と全ての言語固有コンポーネント(パーサー、字句解析器、リンカー、バリデーションなど)|\n"
"|org.example.domainmodel.ide| プラットフォームに依存しないIDE機能 (例 コンテントアシスタントサービス)|\n"
"|org.example.domainmodel.tests| 言語のユニットテスト|\n"
"|org.example.domainmodel.ui| Eclipseエディターと、ワークベンチ関連機能|\n"
"|org.example.domainmodel.ui.tests| Eclipseエディター用UIテスト|"

msgid ""
"|:---|:---|\n"
"|org.example.domainmodel|The grammar definition and all language-specific comp"
"onents (parser, lexer, linker, validation, etc.)|\n"
"|org.example.domainmodel.tests|Unit tests for the language|\n"
"|org.example.domainmodel.ide|Platform-independent IDE functionality (e.g. serv"
"ices for content assist)|\n"
"|org.example.domainmodel.ui|The Eclipse editor and other workbench related fun"
"ctionality|\n"
"|org.example.domainmodel.ui.tests|Unit tests for the Eclipse editor|"
msgstr ""

msgid ""
"|Plug-in|Framework|Purpose|Contents|\n"
"|:---|:---|:---|:---|\n"
"|o.e.x.example.gmf|Xtext|Xtext runtime plug-in|Grammar, derived metamodel and "
"language infrastructure|\n"
"|o.e.x.e.g.ui|Xtext|Xtext UI plug-in|Xtext editor and services|\n"
"|o.e.x.e.g.edit|EMF|EMF.edit plug-in|UI services generated from the metamodel|"
"\n"
"|o.e.x.e.g.models|GMF|GMF design models|Input for the GMF code generator|\n"
"|o.e.x.e.g.diagram|GMF|GMF diagram editor|Purely generated from the GMF design"
" models|\n"
"|o.e.x.e.g.d.extensions|GMF and Xtext|GMF diagram editor extensions|Manual ext"
"ensions to the generated GMF editor for integration with Xtext|\n"
"|o.e.x.gmf.glue|Xtext and GMF|Glue code|Generic code to integrate Xtext and GM"
"F|"
msgstr ""

msgid ""
"}\n"
"```"
msgstr ""
