msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: documentation\n"
"title: 15 Minutes Tutorial - Extended\n"
"part: Getting Started\n"
"---"
msgstr ""

msgid "# {{page.title}} {#domainmodel-next-steps}"
msgstr ""

msgid ""
"After you have developed your first own DSL, the question arises how the behav"
"ior and the semantics of the language can be customized. Here you find a few m"
"ini-tutorials that illustrate common use cases when crafting your own DSL. The"
"se lessons are independent from each other. Each of them will be based on the "
"language that was built in the previous [domainmodel tutorial](102_domainmodel"
"walkthrough.html)."
msgstr ""

msgid "## Writing a Code Generator With Xtend {#tutorial-code-generation}"
msgstr ""

msgid ""
"As soon as you generate the Xtext artifacts from the grammar, a code generator"
" stub is put into the runtime project of your language. Let's dive into [Xtend"
"](https://www.eclipse.org/xtend/) and see how you can integrate your own code "
"generator with Eclipse."
msgstr ""

msgid ""
"In this lesson you will generate Java Beans for entities that are defined in t"
"he domainmodel DSL. For each *Entity*, a Java class is generated and each *Fea"
"ture* will lead to a private field in that class including public getters and "
"setters. For the sake of simplicity, we will use fully qualified names all ove"
"r the generated code."
msgstr ""

msgid ""
"```java\n"
"package my.company.blog;"
msgstr ""

msgid ""
"public class HasAuthor {\n"
"    private java.lang.String author;"
msgstr ""

msgid ""
"    public java.lang.String getAuthor() {\n"
"        return author;\n"
"    }"
msgstr ""

msgid ""
"    public void setAuthor(java.lang.String author) {\n"
"        this.author = author;\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"First of all, locate the file *DomainmodelGenerator.xtend* in the package *org"
".example.domainmodel.generator*. This Xtend class is used to generate code for"
" your models in the standalone scenario and in the interactive Eclipse environ"
"ment. Let's make the implementation more meaningful and start writing the code"
" generator. The strategy is to find all entities within a resource and trigger"
" code generation for each one."
msgstr ""

msgid ""
"1.  First of all, you will have to filter the contents of the resource down to"
" the defined entities. Therefore we need to iterate a resource with all its de"
"eply nested elements. This can be achieved with the method `getAllContents()`."
" To use the resulting [TreeIterator]({{site.src.emf}}/plugins/org.eclipse.emf."
"common/src/org/eclipse/emf/common/util/TreeIterator.java) in a `for` loop, we "
"use the extension method `toIterable()` from the built-in library class [Itera"
"torExtensions]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/ecli"
"pse/xtext/xbase/lib/IteratorExtensions.java)."
msgstr ""

msgid ""
"    ```xtend\n"
"    class DomainmodelGenerator extends AbstractGenerator {"
msgstr ""

msgid ""
"        override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IG"
"eneratorContext context) {\n"
"            for (e : resource.allContents.toIterable.filter(Entity)) {"
msgstr ""

msgid ""
"            }\n"
"        }\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"1.  Now let's answer the question how we determine the file name of the Java c"
"lass that each *Entity* should yield. This information should be derived from "
"the qualified name of the *Entity* since Java enforces this pattern. The quali"
"fied name itself has to be obtained from a special service that is available f"
"or each language. Fortunately, Xtend allows to reuse that one easily. We simpl"
"y inject the [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse.xtex"
"t/src/org/eclipse/xtext/naming/IQualifiedNameProvider.java) into the generator"
"."
msgstr ""

msgid ""
"    ```xtend\n"
"      @Inject extension IQualifiedNameProvider\n"
"    ```"
msgstr ""

msgid ""
"    This allows to ask for the name of an entity. It is straightforward to con"
"vert the name into a file name:"
msgstr ""

msgid ""
"    ```xtend\n"
"    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGener"
"atorContext context) {\n"
"        for (e : resource.allContents.toIterable.filter(Entity)) {\n"
"            fsa.generateFile(\n"
"                e.fullyQualifiedName.toString(\"/\") + \".java\",\n"
"                e.compile)\n"
"        }\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"1.  The next step is to write the actual template code for an entity. For now,"
" the function `Entity.compile` does not exist, but it is easy to create it:"
msgstr ""

msgid ""
"    ```xtend\n"
"    private def compile(Entity e) '''\n"
"        package «e.eContainer.fullyQualifiedName»;"
msgstr ""

msgid ""
"        public class «e.name» {\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"1.  This small template is basically the first shot at a Java-Beans generator."
" However, it is currently rather incomplete and will fail if the *Entity* is n"
"ot contained in a package. A small modification fixes this. The `package` decl"
"aration has to be wrapped in an `IF` expression:"
msgstr ""

msgid ""
"    ```xtend\n"
"    private def compile(Entity e) '''\n"
"        «IF e.eContainer.fullyQualifiedName !== null»\n"
"            package «e.eContainer.fullyQualifiedName»;\n"
"        «ENDIF»"
msgstr ""

msgid ""
"    Let's handle the *superType* of an *Entity* gracefully, too, by using anot"
"her `IF` expression:"
msgstr ""

msgid ""
"        public class «e.name» «IF e.superType !== null\n"
"                »extends «e.superType.fullyQualifiedName» «ENDIF»{\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"1.  Even though the template will compile the *Entities* without any complaint"
"s, it still lacks support for the Java properties that each of the declared fe"
"atures should yield. For that purpose, you have to create another Xtend functi"
"on that compiles a single feature to the respective Java code."
msgstr ""

msgid ""
"    ```xtend\n"
"    private def compile(Feature f) '''\n"
"        private «f.type.fullyQualifiedName» «f.name»;"
msgstr ""

msgid ""
"        public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {\n"
"            return «f.name»;\n"
"        }"
msgstr ""

msgid ""
"        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.na"
"me») {\n"
"            this.«f.name» = «f.name»;\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"    As you can see, there is nothing fancy about this one. Last but not least,"
" we have to make sure that the function is actually used."
msgstr ""

msgid ""
"        public class «e.name» «IF e.superType !== null\n"
"                »extends «e.superType.fullyQualifiedName» «ENDIF»{\n"
"            «FOR f : e.features»\n"
"                «f.compile»\n"
"            «ENDFOR»\n"
"        }\n"
"    '''\n"
"    ```"
msgstr ""

msgid ""
"The final code generator is listed below. Now you can give it a try! Launch a "
"new Eclipse Application (*Run As &rarr; Eclipse Application* on the Xtext proj"
"ect) and create a *dmodel* file in a Java Project. Eclipse will ask you to tur"
"n the Java project into an Xtext project then. Simply agree and create a new s"
"ource folder *src-gen* in that project. Then you can see how the compiler will"
" pick up your sample *Entities* and generate Java code for them."
msgstr ""

msgid ""
"```xtend\n"
"package org.example.domainmodel.generator"
msgstr ""

msgid ""
"import com.google.inject.Inject\n"
"import org.eclipse.emf.ecore.resource.Resource\n"
"import org.eclipse.xtext.generator.AbstractGenerator\n"
"import org.eclipse.xtext.generator.IFileSystemAccess2\n"
"import org.eclipse.xtext.generator.IGeneratorContext\n"
"import org.eclipse.xtext.naming.IQualifiedNameProvider\n"
"import org.example.domainmodel.domainmodel.Entity\n"
"import org.example.domainmodel.domainmodel.Feature"
msgstr ""

msgid "class DomainmodelGenerator extends AbstractGenerator {"
msgstr ""

msgid "    @Inject extension IQualifiedNameProvider"
msgstr ""

msgid ""
"    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGener"
"atorContext context) {\n"
"        for (e : resource.allContents.toIterable.filter(Entity)) {\n"
"            fsa.generateFile(\n"
"                e.fullyQualifiedName.toString(\"/\") + \".java\",\n"
"                e.compile)\n"
"        }\n"
"    }"
msgstr ""

msgid ""
"    private def compile(Entity e) '''\n"
"        «IF e.eContainer.fullyQualifiedName !== null»\n"
"            package «e.eContainer.fullyQualifiedName»;\n"
"        «ENDIF»"
msgstr ""

msgid ""
"        public class «e.name» «IF e.superType !== null\n"
"                »extends «e.superType.fullyQualifiedName» «ENDIF»{\n"
"            «FOR f : e.features»\n"
"                «f.compile»\n"
"            «ENDFOR»\n"
"        }\n"
"    '''"
msgstr ""

msgid ""
"    private def compile(Feature f) '''\n"
"        private «f.type.fullyQualifiedName» «f.name»;"
msgstr ""

msgid ""
"        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.na"
"me») {\n"
"            this.«f.name» = «f.name»;\n"
"        }\n"
"    '''\n"
"}\n"
"```"
msgstr ""

msgid ""
"If you want to play around with Xtend, you can try to use the Xtend tutorial w"
"hich can be materialized into your workspace. Simply choose *New &rarr; Exampl"
"e &rarr; Xtend Examples &rarr; Xtend Introductory Examples* and have a look at"
" the features of Xtend. As a small exercise, you could implement support for t"
"he *many* attribute of a *Feature* or enforce naming conventions, e.g. generat"
"ed field names should start with an underscore."
msgstr ""

msgid "## Creating Custom Validation Rules {#tutorial-validation}"
msgstr ""

msgid ""
"One of the main advantages of DSLs is the possibility to statically validate d"
"omain-specific constraints. Because this is a common use case, Xtext provides "
"a dedicated hook for this kind of validation rules. In this lesson, we want to"
" ensure that the name of an *Entity* starts with an upper-case letter and that"
" all features have distinct names across the inheritance relationship of an *E"
"ntity*."
msgstr ""

msgid ""
"Locate the class *DomainmodelValidator* in the package *org.example.domainmode"
"l.validation* of the language project. Defining the constraint itself is only "
"a matter of a few lines of code:"
msgstr ""

msgid ""
"```java\n"
"public static final String INVALID_NAME = \"invalidName\";"
msgstr ""

msgid ""
"@Check\n"
"public void checkNameStartsWithCapital(Entity entity) {\n"
"    if (!Character.isUpperCase(entity.getName().charAt(0))) {\n"
"        warning(\"Name should start with a capital\",\n"
"            DomainmodelPackage.Literals.TYPE__NAME,\n"
"            INVALID_NAME);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Any name for the method will do. The important thing is the [Check]({{site.src"
".xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/Check.java) a"
"nnotation that advises the Xtext framework to use the method as a validation r"
"ule. If the name starts with a lower case letter, a warning will be attached t"
"o the name of the *Entity*."
msgstr ""

msgid ""
"The second validation rule is straight-forward, too. We traverse the inheritan"
"ce hierarchy of the *Entity* and look for features with equal names."
msgstr ""

msgid ""
"```java\n"
"@Check\n"
"public void checkFeatureNameIsUnique(Feature feature) {\n"
"    Entity superEntity = ((Entity) feature.eContainer()).getSuperType();\n"
"    while (superEntity != null) {\n"
"        for (Feature other : superEntity.getFeatures()) {\n"
"            if (Objects.equal(feature.getName(), other.getName())) {\n"
"                error(\"Feature names have to be unique\", DomainmodelPackage.Li"
"terals.FEATURE__NAME);\n"
"                return;\n"
"            }\n"
"        }\n"
"        superEntity = superEntity.getSuperType();\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"The sibling features that are defined in the same entity are automatically val"
"idated by the Xtext framework, thus they do not have to be checked twice. Note"
" that this implementation is not optimal in terms of execution time because th"
"e iteration over the features is done for all features of each entity."
msgstr ""

msgid ""
"You can determine when the `@Check`-annotated methods will be executed with th"
"e help of the [CheckType]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/validation/CheckType.java) enum. The default value is `FAST`, i.e."
" the checks will be executed on editing, saving/building or on request; also a"
"vailable are `NORMAL` (executed on build/save or on request) and `EXPENSIVE` ("
"executed only on request)."
msgstr ""

msgid ""
"```java\n"
"@Check(CheckType.NORMAL)\n"
"public void checkFeatureNameIsUnique(Feature feature) {\n"
"    ...\n"
"}\n"
"```"
msgstr ""

msgid "## Unit Testing the Language {#tutorial-unit-tests}"
msgstr ""

msgid ""
"Automated tests are crucial for the maintainability and the quality of a softw"
"are product. That is why it is strongly recommended to write unit tests for yo"
"ur language. The Xtext project wizard creates two test projects for that purpo"
"se. These simplify the setup procedure for testing the basic language features"
" and the Eclipse UI integration."
msgstr ""

msgid ""
"This tutorial is about testing the parser, the linker, the validator and the g"
"enerator of the *Domainmodel* language. It leverages Xtend to write the test c"
"ases."
msgstr ""

msgid ""
"1. The core of the test infrastructure is the [XtextRunner]({{site.src.xtext_c"
"ore}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/XtextRunner.java"
") (for JUnit 4) and the language-specific [IInjectorProvider]({{site.src.xtext"
"_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvi"
"der.java). Both have to be provided by means of class annotations. An example "
"test class should have already been generated by the Xtext code generator, nam"
"ed *org.example.domainmodel.tests.DomainmodelParsingTest*:"
msgstr ""

msgid ""
"    ```xtend\n"
"    @RunWith(XtextRunner)\n"
"    @InjectWith(DomainmodelInjectorProvider)\n"
"    class DomainmodelParsingTest {"
msgstr ""

msgid ""
"        @Inject\n"
"        ParseHelper<Domainmodel> parseHelper"
msgstr ""

msgid ""
"        @Test \n"
"        def void loadModel() {\n"
"            val result = parseHelper.parse('''\n"
"                Hello Xtext!\n"
"            ''')\n"
"            Assert.assertNotNull(result)\n"
"            val errors = result.eResource.errors\n"
"            Assert.assertTrue('''Unexpected errors: «errors.join(\", \")»''', er"
"rors.isEmpty)\n"
"        }"
msgstr ""

msgid ""
"    }\n"
"    ```"
msgstr ""

msgid ""
"    *Note*: When using JUnit 5 the [InjectionExtension]({{site.src.xtext_core}"
"}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/Injection"
"Extension.java) is used instead of the XtextRunner. The Xtext code generator g"
"enerates the example slightly different, depending on which option you have ch"
"osen in the *New Xtext Project* wizard."
msgstr ""

msgid ""
"1. The utility class [ParseHelper]({{site.src.xtext_core}}/org.eclipse.xtext.t"
"esting/src/org/eclipse/xtext/testing/util/ParseHelper.java) allows to parse an"
" arbitrary string into a *Domainmodel*. The model itself can be traversed and "
"checked afterwards. A static import of [Assert]({{site.javadoc.junit}}/org/jun"
"it/Assert.html) leads to concise and readable test cases. You can rewrite the "
"generated test case as follows:"
msgstr ""

msgid ""
"    ```xtend\n"
"    import static org.junit.Assert.*"
msgstr ""

msgid "    ..."
msgstr ""

msgid ""
"        @Test \n"
"        def void parseDomainmodel() {\n"
"            val model = parseHelper.parse(\n"
"                \"entity MyEntity {\n"
"                    parent: MyEntity\n"
"                }\")\n"
"            val entity = model.elements.head as Entity\n"
"            assertSame(entity, entity.features.head.type)\n"
"        }\n"
"    ```\n"
"2. In addition, the utility class [ValidationTestHelper]({{site.src.xtext_core"
"}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/validation/Validati"
"onTestHelper.java) allows to test the custom validation rules written for the "
"language. Both valid and invalid models can be tested."
msgstr ""

msgid ""
"    ```xtend\n"
"    @Inject ParseHelper<Domainmodel> parseHelper"
msgstr ""

msgid "    @Inject ValidationTestHelper validationTestHelper"
msgstr ""

msgid ""
"    @Test\n"
"    def testValidModel() {\n"
"        val entity = parseHelper.parse(\n"
"            \"entity MyEntity {\n"
"                parent: MyEntity\n"
"            }\")\n"
"        validationTestHelper.assertNoIssues(entity)\n"
"    }"
msgstr ""

msgid ""
"    @Test\n"
"    def testNameStartsWithCapitalWarning() {\n"
"        val entity = parseHelper.parse(\n"
"            \"entity myEntity {\n"
"                parent: myEntity\n"
"            }\")\n"
"        validationTestHelper.assertWarning(entity,\n"
"            DomainmodelPackage.Literals.ENTITY,\n"
"            DomainmodelValidator.INVALID_NAME,\n"
"            \"Name should start with a capital\"\n"
"        )\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"    You can further simplify the code by injecting `ParseHelper` and `Validati"
"onTestHelper` as extensions. This feature of Xtend allows to add new methods t"
"o a given type without modifying it. You can read more about extension methods"
" in the [Xtend documentation](https://www.eclipse.org/xtend/documentation/202_"
"xtend_classes_members.html#extension-methods). You can rewrite the code as fol"
"lows:"
msgstr ""

msgid ""
"    ```xtend\n"
"    @Inject extension ParseHelper<Domainmodel>"
msgstr ""

msgid "    @Inject extension ValidationTestHelper"
msgstr ""

msgid ""
"    @Test\n"
"    def testValidModel() {\n"
"        \"entity MyEntity {\n"
"        parent: MyEntity\n"
"        }\".parse.assertNoIssues\n"
"    }"
msgstr ""

msgid ""
"    @Test\n"
"    def testNameStartsWithCapitalWarning() {\n"
"        \"entity myEntity {\n"
"            parent: myEntity\n"
"        }\".parse.assertWarning(\n"
"            DomainmodelPackage.Literals.ENTITY,\n"
"            DomainmodelValidator.INVALID_NAME,\n"
"            \"Name should start with a capital\"\n"
"        )\n"
"    }\n"
"    ```"
msgstr ""

msgid ""
"3. The [CompilationTestHelper]({{site.src.xtext_extras}}/org.eclipse.xtext.xba"
"se.testing/src/org/eclipse/xtext/xbase/testing/CompilationTestHelper.java) uti"
"lity class comes in handy while unit testing the custom generators:"
msgstr ""

msgid ""
"\t```xtend\n"
"\t@Inject extension CompilationTestHelper"
msgstr ""

msgid ""
"\t@Test def test() {\n"
"\t\t'''\n"
"\t\t\tdatatype String"
msgstr ""

msgid ""
"\t\t\tpackage my.company.blog {\n"
"\t\t\t\tentity Blog {\n"
"\t\t\t\t\ttitle: String\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t'''.assertCompilesTo('''\n"
"\t\t\tpackage my.company.blog;"
msgstr ""

msgid ""
"\t\t\tpublic class Blog {\n"
"\t\t\t\tprivate String title;"
msgstr ""

msgid ""
"\t\t\t\tpublic String getTitle() {\n"
"\t\t\t\t\treturn title;\n"
"\t\t\t\t}"
msgstr ""

msgid ""
"\t\t\t\tpublic void setTitle(String title) {\n"
"\t\t\t\t\tthis.title = title;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t''')\n"
"\t\t}\n"
"```"
msgstr ""

msgid ""
"4. After saving the Xtend file, it is time to run the tests. Select *Run As &r"
"arr; JUnit Test* from the editor's context menu. All implemented test cases sh"
"ould succeed."
msgstr ""

msgid ""
"These tests serve only as a starting point and can be extended to cover the di"
"fferent features of the language. As a small exercise, you could implement e.g"
". test cases for the `checkFeatureNameIsUnique` validation rule. You can find "
"more test cases in the example projects shipped with the Xtext Framework. Simp"
"ly go to *File &rarr; New &rarr; Example &rarr; Xtext Examples* to instantiate"
" them into your workspace."
msgstr ""

msgid "---"
msgstr ""

msgid ""
"**[Next Chapter: Five simple steps to your JVM language](104_jvmdomainmodel.ht"
"ml)**"
msgstr ""
