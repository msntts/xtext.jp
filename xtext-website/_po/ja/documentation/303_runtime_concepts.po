msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: documentation\n"
"title: Language Implementation\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid "# {{page.title}} {#runtime-concepts}"
msgstr ""

msgid ""
"This chapter describes the platform-independent language features that are not"
" covered by the [grammar language](301_grammarlanguage.html)."
msgstr ""

msgid ""
"Some code examples in this chapter are given in the Xtend language, as it is m"
"uch better suited for these tasks than Java. Please refer to the [Xtend docume"
"ntation](http://www.xtend-lang.org) for further details. For Java developers i"
"t's extremely easy to learn, as the basics are similar and you only need to un"
"derstand the additional powerful concepts."
msgstr ""

msgid "## Code Generation {#code-generation}"
msgstr ""

msgid ""
"Once you have a language you probably want to do something with it. There are "
"two options, you can either write an interpreter that inspects the AST and doe"
"s something based on that or you translate your language to another programmin"
"g language or configuration files. In this section we're going to show how to "
"implement a code generator for an Xtext-based language."
msgstr ""

msgid "### IGenerator2"
msgstr ""

msgid ""
"If you go with the default MWE workflow for your language and you haven't used"
" Xbase, you are provided with a callback stub that implements [IGenerator2]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/generator/IGener"
"ator2.java) by extending the [AbstractGenerator]({{site.src.xtext_core}}/org.e"
"clipse.xtext/src/org/eclipse/xtext/generator/AbstractGenerator.java) base clas"
"s. It has three methods that are called from the builder infrastructure whenev"
"er a DSL file has changed or should be translated otherwise. The three paramet"
"ers passed in to those method are:"
msgstr ""

msgid ""
"*   The resource to be processed\n"
"*   An instance of [IFileSystemAccess2]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/generator/IFileSystemAccess2.java)\n"
"*   An instance of [IGeneratorContext]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/generator/IGeneratorContext.java)"
msgstr ""

msgid ""
"The [IFileSystemAccess2]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecl"
"ipse/xtext/generator/IFileSystemAccess2.java) API abstracts over the different"
" file systems the code generator may run over. When the code generator is trig"
"gered within the incremental build infrastructure in Eclipse the underlying fi"
"le system is the one provided by Eclipse, and when the code generator is execu"
"ted outside Eclipse, say in a headless build, it is `java.io.File`."
msgstr ""

msgid ""
"A very simple implementation of a code generator for the [state machine exampl"
"e]({{site.src.xtext_eclipse}}/org.eclipse.xtext.xtext.ui.examples/projects/fow"
"lerdsl/org.eclipse.xtext.example.fowlerdsl/src/org/eclipse/xtext/example/fowle"
"rdsl/Statemachine.xtext) could be the following:"
msgstr ""

msgid ""
"```xtend\n"
"class StatemachineGenerator extends AbstractGenerator {"
msgstr ""

msgid ""
"    override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorC"
"ontext context) {\n"
"        fsa.generateFile(\"relative/path/AllTheStates.txt\", '''\n"
"            «FOR state : resource.allContents.filter(State).toIterable»\n"
"                State «state.name»\n"
"            «ENDFOR»\n"
"        ''')\n"
"    }"
msgstr ""

msgid ""
"}\n"
"```"
msgstr ""

msgid "### Output Configurations"
msgstr ""

msgid ""
"You don't want to deal with platform or even installation dependent paths in y"
"our code generator, rather you want to be able to configure the code generator"
" with some basic outlet roots where the different generated files should be pl"
"aced under. This is what output configurations are made for."
msgstr ""

msgid ""
"By default every language will have a single outlet, which points to `<project"
"-root>/src-gen/`. The files that go here are treated as fully derived and will"
" be erased by the compiler automatically when a new file should be generated. "
"If you need additional outlets or want to have a different default configurati"
"on, you need to implement the interface [IOutputConfigurationProvider]({{site."
"src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/generator/IOutputConf"
"igurationProvider.java). It's straightforward to understand and the default im"
"plementation gives you a good idea about how to implement it."
msgstr ""

msgid ""
"With this implementation you lay out the basic defaults which can be changed b"
"y users on a workspace or per project level using the preferences."
msgstr ""

msgid "## Validation {#validation}"
msgstr ""

msgid ""
"Static analysis is one of the most interesting aspects when developing a progr"
"amming language. The users of your languages will be grateful if they get info"
"rmative feedback as they type. In Xtext there are basically three different ki"
"nds of validation."
msgstr ""

msgid "### Automatic Validation"
msgstr ""

msgid ""
"Some implementation aspects (e.g. the grammar, scoping) of a language have an "
"impact on what is required for a document or semantic model to be valid. Xtext"
" automatically takes care of this."
msgstr ""

msgid "#### Lexer/Parser: Syntactical Validation {#syntactical-validation}"
msgstr ""

msgid ""
"The syntactical correctness of any textual input is validated automatically by"
" the parser. The error messages are generated by the underlying parser technol"
"ogy. One can use the [ISyntaxErrorMessageProvider]({{site.src.xtext_core}}/org"
".eclipse.xtext/src/org/eclipse/xtext/parser/antlr/ISyntaxErrorMessageProvider."
"java) API to customize these messages. Any syntax errors can be retrieved from"
" the Resource using the common EMF API: the [`Resource.getErrors()`]({{site.sr"
"c.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/Resou"
"rce.java) and [`Resource.getWarnings()`]({{site.src.emf}}/plugins/org.eclipse."
"emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java) method invocations"
"."
msgstr ""

msgid "#### Linker: Cross-reference Validation {#linking-validation}"
msgstr ""

msgid ""
"Any broken cross-references can be checked generically. As cross-reference res"
"olution is done lazily (see [linking](#linking)), any broken links are resolve"
"d lazily as well. If you want to validate whether all links are valid, you wil"
"l have to navigate through the model so that all installed EMF proxies get res"
"olved. This is done automatically in the editor."
msgstr ""

msgid ""
"Similarly to syntax errors, any unresolvable cross-links will be reported and "
"can be obtained through the [`Resource.getErrors()`]({{site.src.emf}}/plugins/"
"org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java) and [`"
"Resource.getWarnings()`]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/or"
"g/eclipse/emf/ecore/resource/Resource.java) method invocations."
msgstr ""

msgid "#### Serializer: Concrete Syntax Validation {#concrete-syntax-validation}"
msgstr ""

msgid ""
"The [IConcreteSyntaxValidator]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/validation/IConcreteSyntaxValidator.java) validates all const"
"raints that are implied by a grammar. Meeting these constraints is mandatory f"
"or a model to be serialized."
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
"```xtext\n"
"MyRule:\n"
"    ({MySubRule} \"sub\")? (strVal+=ID intVal+=INT)*;\n"
"```"
msgstr ""

msgid "This implies several constraints:"
msgstr ""

msgid ""
"1.  Types: only instances of *MyRule* and *MySubRule* are allowed for this rul"
"e. Subtypes are prohibited, since the parser never instantiates unknown subtyp"
"es.\n"
"1.  Features: In case the *MyRule* and *MySubRule* have [EStructuralFeatures]("
"{{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EStru"
"cturalFeature.java) besides *strVal* and *intVal*, only *strVal* and *intVal* "
"may have [non-transient values](#transient-values).\n"
"1.  Quantities: The following condition must be true: `strVal.size() == intVal"
".size()`.\n"
"1.  Values: It must be possible to [convert all values](#value-converter) to v"
"alid tokens for the used terminal rules *ID* and *INT*."
msgstr ""

msgid ""
"The typical use case for the concrete syntax validator is validation in non-Xt"
"ext-editors that use an [XtextResource]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/resource/XtextResource.java). This is the case when "
"combining GMF and Xtext, for example. Another use case is when the semantic mo"
"del is modified \"manually\" (not by the parser) and then serialized again. Sinc"
"e it is very difficult for the serializer to provide meaningful error messages"
", the concrete syntax validator is executed by default before serialization. A"
" textual Xtext editor itself is *not* a valid use case. Here, the parser ensur"
"es that all syntactical constraints are met. Therefore there is no value in ad"
"ditionally running the concrete syntax validator."
msgstr ""

msgid ""
"There are some limitations to the concrete syntax validator which result from "
"the fact that it treats the grammar as declarative, which is something the par"
"ser doesn't always do."
msgstr ""

msgid ""
"*   Grammar rules containing assigned actions (e.g. `{MyType.myFeature=current"
"}`) are ignored. Unassigned actions (e.g. `{MyType}`), however, are supported."
"\n"
"*   Grammar rules that delegate to one or more rules containing assigned actio"
"ns via unassigned rule calls are ignored.\n"
"*   Orders within list-features cannot be validated. e.g. `Rule: (foo+=R1 foo+"
"=R2)*` implies that *foo* is expected to contain instances of *R1* and *R2* in"
" an alternating order."
msgstr ""

msgid ""
"To use concrete syntax validation you can let Guice inject an instance of [ICo"
"ncreteSyntaxValidator]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclip"
"se/xtext/validation/IConcreteSyntaxValidator.java) and use it directly. Furthe"
"rmore, there is an [adapter]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/validation/impl/ConcreteSyntaxEValidator.java) which allows to "
"use the concrete syntax validator as an [EValidator]({{site.src.emf}}/plugins/"
"org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EValidator.java). You can, for"
" example, enable it in your runtime module, by adding:"
msgstr ""

msgid ""
"```java\n"
"@SingletonBinding(eager = true)\n"
"public Class<? extends ConcreteSyntaxEValidator> bindConcreteSyntaxEValidator("
") {\n"
"    return ConcreteSyntaxEValidator.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"To customize the error messages please see [IConcreteSyntaxDiagnosticProvider]"
"({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/IC"
"oncreteSyntaxDiagnosticProvider.java) and subclass [ConcreteSyntaxDiagnosticPr"
"ovider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/valida"
"tion/impl/ConcreteSyntaxDiagnosticProvider.java)."
msgstr ""

msgid "### Custom Validation {#custom-validation}"
msgstr ""

msgid ""
"In addition to the afore mentioned kinds of validation, which are more or less"
" done automatically, you can specify additional constraints specific for your "
"Ecore model. The Xtext language generator will provide you two Java classes. T"
"he first is an abstract class generated to *src-gen/* which extends the librar"
"y class [AbstractDeclarativeValidator]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/validation/AbstractDeclarativeValidator.java). This o"
"ne just registers the EPackages for which this validator introduces constraint"
"s. The other class is a subclass of that abstract class and is generated to th"
"e *src/* folder in order to be edited by you. That is where you put the constr"
"aints in."
msgstr ""

msgid ""
"The purpose of the [AbstractDeclarativeValidator]({{site.src.xtext_core}}/org."
"eclipse.xtext/src/org/eclipse/xtext/validation/AbstractDeclarativeValidator.ja"
"va) is to allow you to write constraints in a declarative way - as the class n"
"ame already suggests. That is instead of writing exhaustive if-else constructs"
" or extending the generated EMF switch you just have to add the [Check]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/validation/Check.jav"
"a) annotation to any method and it will be invoked automatically when validati"
"on takes place. Moreover you can state for what type the respective constraint"
" method is, just by declaring a typed parameter. This also lets you avoid any "
"type casts. In addition to the reflective invocation of validation methods the"
" AbstractDeclarativeValidator provides a few convenient assertions."
msgstr ""

msgid ""
"The Check annotation has a parameter that can be used to declare when a check "
"should run: *FAST* will run whenever a file is modified, *NORMAL* checks will "
"run when saving the file, and *EXPENSIVE* checks will run when explicitly vali"
"dating the file via the menu option. Here is an example written in Java:"
msgstr ""

msgid ""
"```java\n"
"public class DomainmodelValidator extends AbstractDomainmodelValidator {"
msgstr ""

msgid ""
"    @Check\n"
"    public void checkNameStartsWithCapital(Entity entity) {\n"
"        if (!Character.isUpperCase(entity.getName().charAt(0))) {\n"
"            warning(\"Name should start with a capital\", \n"
"                DomainmodelPackage.Literals.TYPE__NAME);\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"You can use the [IResourceValidator]({{site.src.xtext_core}}/org.eclipse.xtext"
"/src/org/eclipse/xtext/validation/IResourceValidator.java) to validate a given"
" resource programmatically. Example:"
msgstr ""

msgid ""
"```java\n"
"@Inject IResourceValidator resourceValidator;"
msgstr ""

msgid ""
"public void checkResource(Resource resource) {\n"
"    List<Issue> issues = resourceValidator.validate(resource,\n"
"            CheckMode.ALL, CancelIndicator.NullImpl);\n"
"    for (Issue issue: issues) {\n"
"        switch (issue.getSeverity()) {\n"
"            case ERROR:\n"
"                System.out.println(\"ERROR: \" + issue.getMessage());\n"
"                break;\n"
"            case WARNING:\n"
"                System.out.println(\"WARNING: \" + issue.getMessage());\n"
"                break;\n"
"            default: // do nothing\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"You can also implement quick fixes for individual validation errors and warnin"
"gs. See the [section on quick fixes](310_eclipse_support.html#quick-fixes) for"
" details."
msgstr ""

msgid "## Linking {#linking}"
msgstr ""

msgid ""
"The linking feature allows for specification of cross-references within an Xte"
"xt grammar. The following things are needed for the linking:"
msgstr ""

msgid ""
"1. Declaration of a [cross-reference in the grammar](301_grammarlanguage.html#"
"cross-references) (or at least in the Ecore model)\n"
"1. Specification of linking semantics (usually provided via the [scoping API]("
"#scoping))"
msgstr ""

msgid "### Lazy Linking {#lazy-linking}"
msgstr ""

msgid ""
"Xtext uses lazy linking by default and we encourage users to stick to this bec"
"ause it provides many advantages, one of which is improved performance in all "
"scenarios where you don't have to load all transitively referenced resources. "
"Furthermore it automatically solves situations where one link relies on other "
"links (cyclic linking dependencies are not supported, though)."
msgstr ""

msgid "When parsing a given input string, say"
msgstr ""

msgid "`ref Entity01`"
msgstr ""

msgid ""
"the [LazyLinker]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/linking/lazy/LazyLinker.java) first creates an EMF proxy and assigns it to "
"the corresponding [EReference]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/"
"src/org/eclipse/emf/ecore/EReference.java). In EMF a proxy is described by a ["
"URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/eclipse/emf/commo"
"n/util/URI.java), which points to the real [EObject]({{site.src.emf}}/plugins/"
"org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java). In the case of "
"lazy linking the stored URI comprises of the context information given at pars"
"e time, which is the EObject containing the cross-reference, the actual ERefer"
"ence, the list index (in case it's a multi-valued cross-reference) and the str"
"ing which represented the cross-link in the concrete syntax. The latter usuall"
"y corresponds to the name of the referenced EObject. In EMF a URI consists of "
"information about the resource the EObject is contained in as well as a so cal"
"led fragment part, which is used to find the EObject within that resource. Whe"
"n an EMF proxy is resolved, the current [ResourceSet]({{site.src.emf}}/plugins"
"/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/resource/ResourceSet.java) is"
" asked. The resource set uses the first part to obtain (i.e. load if it is not"
" already loaded) the resource. Then the resource is asked to return the EObjec"
"t based on the fragment in the URI. The actual cross-reference resolution is d"
"one by [LazyLinkingResource.getEObject(String)]({{site.src.xtext_core}}/org.ec"
"lipse.xtext/src/org/eclipse/xtext/linking/lazy/LazyLinkingResource.java) which"
" receives the fragment and delegates to the implementation of the [ILinkingSer"
"vice]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/linking/"
"ILinkingService.java). The default implementation in turn delegates to the [sc"
"oping API](#scoping)."
msgstr ""

msgid ""
"A [simple implementation]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/linking/impl/DefaultLinkingService.java) of the linking service is"
" shipped with Xtext and used for any grammar as default. Usually any necessary"
" customization of the linking behavior can best be described using the [scopin"
"g API](#scoping)."
msgstr ""

msgid "## Scoping {#scoping}"
msgstr ""

msgid ""
"Using the scoping API one defines which elements are referable by a given refe"
"rence. For instance, using the entities example a feature contains a cross-ref"
"erence to a type:"
msgstr ""

msgid ""
"```domainexample\n"
"datatype String"
msgstr ""

msgid ""
"entity HasAuthor {\n"
"    author: String\n"
"}\n"
"```"
msgstr ""

msgid "The grammar rule for features looks like this:"
msgstr ""

msgid ""
"```xtext\n"
"Feature:\n"
"    (many?='many')? name=ID ':' type=[Type];\n"
"```"
msgstr ""

msgid ""
"The grammar declares that for the reference *type* only instances of the type "
"*Type* are allowed. However, this simple declaration doesn't say anything abou"
"t where to find the type. That is the duty of scopes."
msgstr ""

msgid ""
"An [IScopeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/"
"xtext/scoping/IScopeProvider.java) is responsible for providing an [IScope]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/IScope.j"
"ava) for a given context [EObject]({{site.src.emf}}/plugins/org.eclipse.emf.ec"
"ore/src/org/eclipse/emf/ecore/EObject.java) and [EReference]({{site.src.emf}}/"
"plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EReference.java). The "
"returned [IScope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xt"
"ext/scoping/IScope.java) should contain all target candidates for the given ob"
"ject and cross-reference."
msgstr ""

msgid ""
"```java\n"
"public interface IScopeProvider {"
msgstr ""

msgid ""
"\t/**\n"
"\t * Returns a scope for the given context. The scope provides access to the co"
"mpatible\n"
"\t * visible EObjects for a given reference.\n"
"\t *\n"
"\t * @param context the element from which an element shall be referenced. It d"
"oesn't need to be the element\n"
"\t * \t\t  containing the reference, it is just used to find the most inner scope"
" for given {@link EReference}.\n"
"\t * @param reference the reference for which to get the scope.\n"
"\t * @return {@link IScope} representing the innermost {@link IScope} for the\n"
"\t *         passed context and reference. Note for implementors: The result ma"
"y not be <code>null</code>.\n"
"\t *         Return <code>IScope.NULLSCOPE</code> instead.\n"
"\t */\n"
"    IScope getScope(EObject context, EReference reference);"
msgstr ""

msgid ""
"A single [IScope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xt"
"ext/scoping/IScope.java) represents an element of a linked list of scopes. Tha"
"t means that a scope can be nested within an outer scope. Each scope works lik"
"e a symbol table or a map where the keys are strings and the values are so-cal"
"led [IEObjectDescription]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ec"
"lipse/xtext/resource/IEObjectDescription.java), which is effectively an abstra"
"ct description of a real EObject. In order to create IEObjectDescriptions for "
"your model elements, the class [Scopes]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/scoping/Scopes.java) is very useful."
msgstr ""

msgid "To have a concrete example, let's deal with the following simple grammar."
msgstr ""

msgid ""
"```xtext\n"
"grammar org.xtext.example.mydsl.MyScopingDsl with\n"
"                                      org.eclipse.xtext.common.Terminals"
msgstr ""

msgid "generate myDsl \"http://www.xtext.org/example/mydsl/MyScopingDsl\""
msgstr ""

msgid ""
"Root:\n"
"    elements+=Element;"
msgstr ""

msgid ""
"Element:\n"
"    'element' name=ID ('extends' superElement=[Element])?;"
msgstr ""

msgid "```"
msgstr ""

msgid ""
"If you want to define the scope for the *superElement* cross-reference, the fo"
"llowing Java code is one way to go."
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public IScope getScope(EObject context, EReference reference) {\n"
"    // We want to define the Scope for the Element's superElement cross-refere"
"nce\n"
"    if (context instanceof Element\n"
"            && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) {\n"
"        // Collect a list of candidates by going through the model\n"
"        // EcoreUtil2 provides useful functionality to do that\n"
"        // For example searching for all elements within the root Object's tre"
"e\n"
"        EObject rootElement = EcoreUtil2.getRootContainer(context);\n"
"        List<Element> candidates = EcoreUtil2.getAllContentsOfType(rootElement"
", Element.class);\n"
"        // Create IEObjectDescriptions and puts them into an IScope instance\n"
"        return Scopes.scopeFor(candidates);\n"
"    }\n"
"    return super.getScope(context, reference);\n"
"}\n"
"```"
msgstr ""

msgid ""
"There are different useful implementations for IScope shipped with Xtext. We w"
"ant to mention only some of them here."
msgstr ""

msgid ""
"The [MapBasedScope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/"
"xtext/scoping/impl/MapBasedScope.java) comes with the efficiency of a map to l"
"ook up a certain name. If you prefer to deal with Multimaps the [MultimapBased"
"Scope]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping"
"/impl/MultimapBasedScope.java) should work for you. For situations where some "
"elements should be filtered out of an existing scope, the [FilteringScope]({{s"
"ite.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/impl/Filt"
"eringScope.java) is the right way to go. As scopes can be nested, we strongly "
"recommend to use FilteringScope only for leaf scopes without nested scopes."
msgstr ""

msgid ""
"Coming back to our example, one possible scenario for the FilteringScope could"
" be to exclude the context element from the list of candidates as it should no"
"t be a super-element of itself."
msgstr ""

msgid ""
"```java\n"
"    @Override\n"
"    public IScope getScope(EObject context, EReference reference) {\n"
"        if (context instanceof Element\n"
"                && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) "
"{\n"
"            EObject rootElement = EcoreUtil2.getRootContainer(context);\n"
"            List<Element> candidates = EcoreUtil2.getAllContentsOfType(rootEle"
"ment, Element.class);\n"
"            IScope existingScope = Scopes.scopeFor(candidates);\n"
"            // Scope that filters out the context element from the candidates "
"list\n"
"            return new FilteringScope(existingScope, (e) -> !Objects.equal(e.g"
"etEObjectOrProxy(), context));\n"
"        }\n"
"        return super.getScope(context, reference);\n"
"    }\n"
"```"
msgstr ""

msgid "### Global Scopes and Resource Descriptions {#global-scopes}"
msgstr ""

msgid ""
"In the simple scoping example above we don't have references across model file"
"s. Neither is there a concept like a namespace which would make scoping a bit "
"more complicated. Basically, every *Element* declared in the same resource is "
"visible by its name. However, in the real world things are most likely not tha"
"t simple: What if you want to reuse certain declared elements across different"
" files and you want to share those as library between different users? You wou"
"ld want to introduce some kind of cross-resource reference."
msgstr ""

msgid ""
"Defining what is visible from outside the current resource is the responsibili"
"ty of global scopes. As the name suggests, global scopes are provided by insta"
"nces of the [IGlobalScopeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/s"
"rc/org/eclipse/xtext/scoping/IGlobalScopeProvider.java). The data structures ("
"called index) used to store its elements are described in the next section."
msgstr ""

msgid "#### Resource and EObject Descriptions {#resource-descriptions}"
msgstr ""

msgid ""
"In order to make elements of one file referable from another file, you need to"
" export them as part of a so called [IResourceDescription]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescription.jav"
"a)."
msgstr ""

msgid ""
"An IResourceDescription contains information about the resource itself, which "
"primarily its [URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/ec"
"lipse/emf/common/util/URI.java), a list of exported [EObjects]({{site.src.emf}"
"}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) in the"
" form of [IEObjectDescription]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/resource/IEObjectDescription.java)s, as well as information a"
"bout outgoing cross-references and qualified names it references. The cross-re"
"ferences contain only resolved references, while the list of imported qualifie"
"d names also contains the names that couldn't be resolved. This information is"
" leveraged by the indexing infrastructure of Xtext in order to compute the tra"
"nsitive hull of dependent resources."
msgstr ""

msgid ""
"For users, and especially in the context of scoping, the most important inform"
"ation is the list of exported EObjects. An IEObjectDescription stores the URI "
"of the actual EObject, its [QualifiedName]({{site.src.xtext_core}}/org.eclipse"
".xtext/src/org/eclipse/xtext/naming/QualifiedName.java), as well as its [EClas"
"s]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EC"
"lass.java). In addition one can export arbitrary information using the *user d"
"ata* map. The following diagram gives an overview on the description classes a"
"nd their relationships."
msgstr ""

msgid "![The data model of Xtext's index](images/index_datamodel.png)"
msgstr ""

msgid ""
"A language is configured with default implementations of [IResourceDescription"
".Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/reso"
"urce/IResourceDescription.java) and [DefaultResourceDescriptionStrategy]({{sit"
"e.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/impl/Defau"
"ltResourceDescriptionStrategy.java), which are responsible to compute the list"
" of exported [IEObjectDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/"
"src/org/eclipse/xtext/resource/IEObjectDescription.java). The Manager iterates"
" over the whole EMF model for each [Resource]({{site.src.emf}}/plugins/org.ecl"
"ipse.emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java) and asks the "
"ResourceDescriptionStrategy to compute an IEObjectDescription for each EObject"
". The ResourceDescriptionStrategy applies the `getQualifiedName(EObject obj)` "
"from [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/or"
"g/eclipse/xtext/naming/IQualifiedNameProvider.java) on the object, and if it h"
"as a qualified name an IEObjectDescription is created and passed back to the M"
"anager which adds it to the list of exported objects. If an EObject doesn't ha"
"ve a qualified name, the element is considered to be not referable from outsid"
"e the resource and consequently not indexed. If you don't like this behavior, "
"you can implement and bind your own implementation of [IDefaultResourceDescrip"
"tionStrategy]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/"
"resource/IDefaultResourceDescriptionStrategy.java)."
msgstr ""

msgid ""
"There are two different default implementations of [IQualifiedNameProvider]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/naming/IQualifie"
"dNameProvider.java). Both work by looking up an [EAttribute]({{site.src.emf}}/"
"plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribute.java) '*nam"
"e*'. The [SimpleNameProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/or"
"g/eclipse/xtext/naming/SimpleNameProvider.java) simply returns the plain value"
", while the [DefaultDeclarativeQualifiedNameProvider]({{site.src.xtext_core}}/"
"org.eclipse.xtext/src/org/eclipse/xtext/naming/DefaultDeclarativeQualifiedName"
"Provider.java) concatenates the simple name with the qualified name of its par"
"ent exported EObject. This effectively simulates the qualified name computatio"
"n of most namespace-based languages such as Java. It also allows to override t"
"he name computation declaratively: Just add methods named `qualifiedName` in a"
" subclass and give each of them one argument with the type of element you wish"
" to compute a name for."
msgstr ""

msgid ""
"As already mentioned, the default implementation strategy exports every model "
"element that the IQualifiedNameProvider can provide a name for. This is a good"
" starting point, but when your models become bigger and you have a lot of them"
" the index will become larger and larger. In most scenarios only a small part "
"of your model should be visible from outside, hence only that small part needs"
" to be in the index. In order to do this, bind a custom implementation of [IDe"
"faultResourceDescriptionStrategy]({{site.src.xtext_core}}/org.eclipse.xtext/sr"
"c/org/eclipse/xtext/resource/IDefaultResourceDescriptionStrategy.java) and cre"
"ate index representations only for those elements that you want to reference f"
"rom outside the resource they are contained in. From within the resource, refe"
"rences to those filtered elements are still possible as long as they have a na"
"me."
msgstr ""

msgid ""
"Beside the exported elements the index contains [IReferenceDescription]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IReferenceD"
"escription.java)s that contain the information who is referencing who. They ar"
"e created through the IResourceDescription.Manager and IDefaultResourceDescrip"
"tionStrategy, too. If there is a model element that references another model e"
"lement, the IDefaultResourceDescriptionStrategy creates an IReferenceDescripti"
"on that contains the URI of the referencing element (*sourceEObjectURI*) and t"
"he referenced element (*targetEObjectURI*). These IReferenceDescriptions are v"
"ery useful to find references and calculate affected resources."
msgstr ""

msgid ""
"As mentioned above, in order to compute an [IResourceDescription]({{site.src.x"
"text_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescript"
"ion.java) for a resource the framework asks the [IResourceDescription.Manager]"
"({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IRes"
"ourceDescription.java) which delegates to the IDefaultResourceDescriptionStrat"
"egy. To convert between a [QualifiedName]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/naming/QualifiedName.java) and its String represen"
"tation you can use the [IQualifiedNameConverter]({{site.src.xtext_core}}/org.e"
"clipse.xtext/src/org/eclipse/xtext/naming/IQualifiedNameConverter.java). Here "
"is some Xtend code showing how to do that:"
msgstr ""

msgid ""
"```xtend\n"
"@Inject IResourceServiceProvider.Registry rspr\n"
"@Inject IQualifiedNameConverter converter"
msgstr ""

msgid ""
"def void printExportedObjects(Resource resource) {\n"
"    val resServiceProvider = rspr.getResourceServiceProvider(resource.URI)\n"
"    val manager = resServiceProvider.getResourceDescriptionManager()\n"
"    val description = manager.getResourceDescription(resource)\n"
"    for (eod : description.exportedObjects) {\n"
"        println(converter.toString(eod.qualifiedName))\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"In order to obtain a [Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/resource/IResourceDescription.java) it is best to ask the cor"
"responding [IResourceServiceProvider]({{site.src.xtext_core}}/org.eclipse.xtex"
"t/src/org/eclipse/xtext/resource/IResourceServiceProvider.java) as shown above"
". That is because each language might have a totally different implementation,"
" and as you might refer from one language to a different language you cannot r"
"euse the [Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/resource/IResourceDescription.java) of the first language."
msgstr ""

msgid ""
"Now that we know how to export elements to be referable from other resources, "
"we need to learn how those exported [IEObjectDescriptions]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IEObjectDescription.java"
") can be made available to the referencing resources. That is the responsibili"
"ty of [global scoping]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclip"
"se/xtext/scoping/IGlobalScopeProvider.java) which is described in the followin"
"g section."
msgstr ""

msgid ""
"If you would like to see what's in the index, you could use the 'Open Model El"
"ement' dialog from the navigation menu entry."
msgstr ""

msgid "#### Global Scopes Based On External Configuration {#index-based}"
msgstr ""

msgid ""
"Instead of explicitly referring to imported resources, another option is to ha"
"ve some kind of external configuration in order to define what is visible from"
" outside a resource. Java for instance uses the notion of the class path to de"
"fine containers (jars and class folders) which contain referenceable elements."
" In the case of Java the order of such entries is also important."
msgstr ""

msgid ""
"To enable support for this kind of global scoping in Xtext, a [DefaultGlobalSc"
"opeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/s"
"coping/impl/DefaultGlobalScopeProvider.java) has to be bound to the [IGlobalSc"
"opeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/s"
"coping/IGlobalScopeProvider.java) interface. By default Xtext leverages the cl"
"ass path mechanism since it is well designed and already understood by most of"
" our users. The available tooling provided by JDT and PDE to configure the cla"
"ss path adds even more value. However, it is just a default: you can reuse the"
" infrastructure without using Java and be independent of the JDT."
msgstr ""

msgid ""
"In order to know what is available in the \"world\", a global scope provider whi"
"ch relies on external configuration needs to read that configuration in and be"
" able to find all candidates for a certain [EReference]({{site.src.emf}}/plugi"
"ns/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EReference.java). If you do"
"n't want to force users to have a folder and file name structure reflecting th"
"e actual qualified names of the referenceable [EObjects]({{site.src.emf}}/plug"
"ins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java), you'll have"
" to load all resources up front and either keep holding them in memory or reme"
"mber all information which is needed for the resolution of cross-references. I"
"n Xtext that information is provided by a so-called [IEObjectDescription]({{si"
"te.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IEObjectD"
"escription.java)."
msgstr ""

msgid "##### About the Index, Containers and Their Manager {#containers}"
msgstr ""

msgid ""
"Xtext ships with an index which remembers all [IResourceDescription]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescr"
"iption.java) and their [IEObjectDescription]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/resource/IEObjectDescription.java) objects. In "
"the IDE-context (i.e. when running the editor, etc.) the index is updated by a"
"n incremental project builder. As opposed to that, in a non-UI context you typ"
"ically do not have to deal with changes, hence the infrastructure can be much "
"simpler. In both situations the global index state is held by an implementatio"
"n of [IResourceDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/resource/IResourceDescriptions.java) (note the plural form!). T"
"he bound singleton in the UI scenario is even aware of unsaved editor changes,"
" such that all linking happens to the latest possibly unsaved version of the r"
"esources. You will find the Guice configuration of the global index in the UI "
"scenario in [SharedModule]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui.sha"
"red/src/org/eclipse/xtext/ui/shared/internal/SharedModule.java)."
msgstr ""

msgid ""
"The index is basically a flat list of instances of [IResourceDescription]({{si"
"te.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResource"
"Description.java). The index itself doesn't know about visibility constraints "
"due to class path restriction. Rather than that, they are defined by the refer"
"encing language by means of so called [IContainers]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/resource/IContainer.java): While Java mi"
"ght load a resource via [ClassLoader.loadResource()]({{site.javadoc.java}}/jav"
"a/lang/ClassLoader.html) (i.e. using the class path mechanism), another langua"
"ge could load the same resource using the file system paths."
msgstr ""

msgid ""
"Consequently, the information which container a resource belongs to depends on"
" the referencing context. Therefore an [IResourceServiceProvider]({{site.src.x"
"text_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceServiceP"
"rovider.java) provides another interesting service, which is called [IContaine"
"r.Manager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/res"
"ource/IContainer.java). For a given [IResourceDescription]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescription.jav"
"a), the Manager provides you the [IContainer]({{site.src.xtext_core}}/org.ecli"
"pse.xtext/src/org/eclipse/xtext/resource/IContainer.java) as well as a list of"
" all IContainers which are visible from there. Note that the [index]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IResourceDescr"
"iptions.java) is globally shared between all languages while the Manager, whic"
"h adds the semantics of containers, can be very different depending on the lan"
"guage. The following method lists all resources visible from a given [Resource"
"]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/res"
"ource/Resource.java):"
msgstr ""

msgid ""
"```xtend\n"
"@Inject IContainer.Manager manager"
msgstr ""

msgid ""
"def void printVisibleResources(Resource resource, IResourceDescriptions index)"
" {\n"
"    val descr = index.getResourceDescription(resource.URI)\n"
"    for (visibleContainer : manager.getVisibleContainers(descr, index)) {\n"
"        for (visibleResourceDesc : visibleContainer.resourceDescriptions) {\n"
"            println(visibleResourceDesc.URI)\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Xtext ships two implementations of [IContainer.Manager]({{site.src.xtext_core}"
"}/org.eclipse.xtext/src/org/eclipse/xtext/resource/IContainer.java) which are "
"bound with Guice: The default binding is to [SimpleResourceDescriptionsBasedCo"
"ntainerManager]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtex"
"t/resource/impl/SimpleResourceDescriptionsBasedContainerManager.java), which a"
"ssumes all [IResourceDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/s"
"rc/org/eclipse/xtext/resource/IResourceDescription.java) to be in a single com"
"mon container. If you don't care about container support, you'll be fine with "
"this one. Alternatively, you can bind [StateBasedContainerManager]({{site.src."
"xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/State"
"BasedContainerManager.java) and an additional [IAllContainersState]({{site.src"
".xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/IAll"
"ContainersState.java) which keeps track of the set of available containers and"
" their visibility relationships."
msgstr ""

msgid ""
"Xtext offers a couple of strategies for managing containers: If you're running"
" an Eclipse workbench, you can define containers based on Java projects and th"
"eir class paths or based on plain Eclipse projects. Outside Eclipse, you can p"
"rovide a set of file system paths to be scanned for models. All of these only "
"differ in the bound instance of [IAllContainersState]({{site.src.xtext_core}}/"
"org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/IAllContainersStat"
"e.java) of the referring language. These will be described in detail in the fo"
"llowing sections."
msgstr ""

msgid "![IContainer Management](images/index_container.png)"
msgstr ""

msgid "##### JDT-Based Container Manager {#jdt-based-containers}"
msgstr ""

msgid ""
"As JDT is an Eclipse feature, this JDT-based container management is only avai"
"lable in the UI scenario. It assumes so called [IPackageFragmentRoots]({{site."
"javadoc.eclipse-jdt}}/org/eclipse/jdt/core/IPackageFragmentRoot.html) as conta"
"iners. An IPackageFragmentRoot in JDT is the root of a tree of Java model elem"
"ents. It usually refers to"
msgstr ""

msgid ""
"*   a source folder of a Java project,\n"
"*   a referenced jar,\n"
"*   a class path entry of a referenced Java project, or\n"
"*   the exported packages of a required PDE plug-in."
msgstr ""

msgid ""
"So for an element to be referable, its resource must be on the class path of t"
"he caller's Java project and it must be exported (as described above)."
msgstr ""

msgid ""
"As this strategy allows to reuse a lot of nice Java things like jars, OSGi, ma"
"ven, etc. it is part of the default: You should not have to reconfigure anythi"
"ng to make it work. Nevertheless, if you messed something up, make sure you bi"
"nd"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends IContainer.Manager> bindIContainer$Manager() {\n"
"    return StateBasedContainerManager.class;\n"
"}\n"
"```"
msgstr ""

msgid "in the runtime module and"
msgstr ""

msgid ""
"```java\n"
"public Provider<IAllContainersState> provideIAllContainersState() {\n"
"    return org.eclipse.xtext.ui.shared.Access.getJavaProjectsState();\n"
"}\n"
"```"
msgstr ""

msgid ""
"in the Eclipse UI module of the referencing language. The latter looks a bit m"
"ore difficult than a common binding, as we have to bind a global singleton to "
"a Guice provider. A [StrictJavaProjectsState]({{site.src.xtext_eclipse}}/org.e"
"clipse.xtext.ui/src/org/eclipse/xtext/ui/containers/StrictJavaProjectsState.ja"
"va) requires all elements to be on the class path, while the default [JavaProj"
"ectsState]({{site.src.xtext_eclipse}}/org.eclipse.xtext.ui/src/org/eclipse/xte"
"xt/ui/containers/JavaProjectsState.java) also allows models in non-source fold"
"ers."
msgstr ""

msgid "##### Eclipse Project-Based Containers {#project-based-containers}"
msgstr ""

msgid ""
"If the class path based mechanism doesn't work for your case, Xtext offers an "
"alternative container manager based on plain Eclipse projects: Each project ac"
"ts as a container and the project references (*Properties &rarr; Project Refer"
"ences*) are the visible containers."
msgstr ""

msgid ""
"In this case, your runtime module should use the StateBasedContainerManager as"
" shown above and the Eclipse UI module should bind"
msgstr ""

msgid ""
"```java\n"
"public Provider<IAllContainersState> provideIAllContainersState() {\n"
"    return org.eclipse.xtext.ui.shared.Access.getWorkspaceProjectsState();\n"
"}\n"
"```"
msgstr ""

msgid "##### ResourceSet-Based Containers {#resource-set-containers}"
msgstr ""

msgid ""
"If you need an [IContainer.Manager]({{site.src.xtext_core}}/org.eclipse.xtext/"
"src/org/eclipse/xtext/resource/IContainer.java) that is independent of Eclipse"
" projects, you can use the [ResourceSetBasedAllContainersState]({{site.src.xte"
"xt_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/containers/Resource"
"SetBasedAllContainersState.java). This one can be configured with a mapping of"
" container handles to resource URIs."
msgstr ""

msgid "### Local Scoping {#local-scoping}"
msgstr ""

msgid ""
"We now know how the outer world of referenceable elements can be defined in Xt"
"ext. Nevertheless, not everything is available in all contexts and with a glob"
"al name. Rather than that, each context can usually have a different scope. As"
" already stated, scopes can be nested, i.e. a scope can contain elements of a "
"parent scope in addition to its own elements. When parent and child scope cont"
"ain different elements with the same name, the parent scope's element will usu"
"ally be *shadowed* by the element from the child scope."
msgstr ""

msgid ""
"To illustrate that, let's have a look at Java: Java defines multiple kinds of "
"scopes (object scope, type scope, etc.). For Java one would create the scope h"
"ierarchy as commented in the following example:"
msgstr ""

msgid ""
"```java\n"
"// file contents scope\n"
"import static my.Constants.STATIC;"
msgstr ""

msgid ""
"public class ScopeExample { // class body scope\n"
"  private Object field = STATIC;"
msgstr ""

msgid ""
"  private void method(String param) { // method body scope\n"
"    String localVar = \"bar\";\n"
"    innerBlock: { // block scope\n"
"      String innerScopeVar = \"foo\";\n"
"      Object field = innerScopeVar;\n"
"      // the scope hierarchy at this point would look like this:\n"
"      //  blockScope{field,innerScopeVar}->\n"
"      //  methodScope{localVar, param}->\n"
"      //  classScope{field}-> ('field' is shadowed)\n"
"      //  fileScope{STATIC}->\n"
"      //  classpathScope{\n"
"      //      'all qualified names of accessible static fields'} ->\n"
"      //  NULLSCOPE{}\n"
"      //\n"
"    }\n"
"    field.add(localVar);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"In fact the class path scope should also reflect the order of class path entri"
"es. For instance:"
msgstr ""

msgid ""
"```java\n"
"classpathScope{stuff from bin/}\n"
"-> classpathScope{stuff from foo.jar/}\n"
"-> ...\n"
"-> classpathScope{stuff from JRE System Library}\n"
"-> NULLSCOPE{}\n"
"```"
msgstr ""

msgid ""
"Please find the motivation behind this and some additional details in [this bl"
"og post](http://blog.efftinge.de/2009/01/xtext-scopes-and-emf-index.html)."
msgstr ""

msgid "### Imported Namespace Aware Scoping {#namespace-imports}"
msgstr ""

msgid ""
"The imported namespace aware scoping is based on qualified names and namespace"
"s. It adds namespace support to your language, which is comparable and similar"
" to namespaces in Scala and C#. Scala and C# both allow to have multiple neste"
"d packages within one file, and you can put imports per namespace, such that i"
"mported names are only visible within that namespace. See the domain model exa"
"mple: its scope provider extends [ImportedNamespaceAwareLocalScopeProvider]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/impl/Imp"
"ortedNamespaceAwareLocalScopeProvider.java)."
msgstr ""

msgid "#### Importing Namespaces"
msgstr ""

msgid ""
"The [ImportedNamespaceAwareLocalScopeProvider]({{site.src.xtext_core}}/org.ecl"
"ipse.xtext/src/org/eclipse/xtext/scoping/impl/ImportedNamespaceAwareLocalScope"
"Provider.java) looks up [EAttributes]({{site.src.emf}}/plugins/org.eclipse.emf"
".ecore/src/org/eclipse/emf/ecore/EAttribute.java) with name *importedNamespace"
"* and interprets them as import statements."
msgstr ""

msgid ""
"```xtext\n"
"PackageDeclaration:\n"
"    'package' name=QualifiedName '{'\n"
"        (elements+=AbstractElement)*\n"
"    '}';"
msgstr ""

msgid ""
"AbstractElement:\n"
"    PackageDeclaration | Type | Import;"
msgstr ""

msgid ""
"QualifiedName:\n"
"    ID ('.' ID)*;"
msgstr ""

msgid ""
"Import:\n"
"    'import' importedNamespace=QualifiedNameWithWildcard;"
msgstr ""

msgid ""
"QualifiedNameWithWildcard:\n"
"    QualifiedName '.*'?;\n"
"```"
msgstr ""

msgid ""
"Qualified names with or without a wildcard at the end are supported. For an im"
"port of a qualified name the simple name is made available as we know from e.g"
". Java, where `import java.util.Set` makes it possible to refer to [java.util."
"Set]({{site.javadoc.java}}/java/util/Set.html) by its simple name *Set*. Contr"
"ary to Java, the import is not active for the whole file, but only for the nam"
"espace it is declared in and its child namespaces. That is why you can write t"
"he following in the example DSL:"
msgstr ""

msgid ""
"```domainexample\n"
"package foo {\n"
"    import bar.Foo\n"
"    entity Bar extends Foo {\n"
"    }\n"
"}"
msgstr ""

msgid ""
"package bar {\n"
"    entity Foo {}\n"
"}\n"
"```"
msgstr ""

msgid ""
"Of course the declared elements within a package are as well referable by thei"
"r simple name:"
msgstr ""

msgid ""
"```domainexample\n"
"package bar {\n"
"    entity Bar extends Foo {}\n"
"    entity Foo {}\n"
"}\n"
"```"
msgstr ""

msgid "## Value Converter {#value-converter}"
msgstr ""

msgid ""
"Value converters are registered to convert the parsed text into a data type in"
"stance and vice versa. The primary hook is the [IValueConverterService]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueCon"
"verterService.java) and the concrete implementation can be registered via the "
"runtime [Guice module](302_configuration.html#guicemodules). Simply override t"
"he corresponding binding in your runtime module like shown in this example:"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends IValueConverterService> bindIValueConverterService() {\n"
"    return MySpecialValueConverterService.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"The easiest way to register additional value converters is to make use of [Abs"
"tractDeclarativeValueConverterService]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/conversion/impl/AbstractDeclarativeValueConverterServ"
"ice.java), which allows to declaratively register an [IValueConverter]({{site."
"src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueConv"
"erter.java) by means of an annotated method."
msgstr ""

msgid ""
"```java\n"
"@ValueConverter(rule = \"MyRuleName\")\n"
"public IValueConverter<MyDataType> getMyRuleNameConverter() {\n"
"    return new MyValueConverterImplementation();\n"
"}\n"
"```"
msgstr ""

msgid ""
"If you use the common terminals grammar `org.eclipse.xtext.common.Terminals` y"
"ou should extend the [DefaultTerminalConverters]({{site.src.xtext_core}}/org.e"
"clipse.xtext/src/org/eclipse/xtext/common/services/DefaultTerminalConverters.j"
"ava) and override or add value converters by adding the respective methods. In"
" addition to the explicitly defined converters in the default implementation, "
"a delegating converter is registered for each available [EDataType]({{site.src"
".emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EDataType.java)"
". The delegating converter reuses the functionality of the corresponding EMF ["
"EFactory]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/e"
"core/EFactory.java)."
msgstr ""

msgid ""
"Many languages introduce a concept for qualified names, i.e. names composed of"
" namespaces separated by a delimiter. Since this is such a common use case, Xt"
"ext provides an extensible converter implementation for qualified names. The ["
"QualifiedNameValueConverter]({{site.src.xtext_core}}/org.eclipse.xtext/src/org"
"/eclipse/xtext/conversion/impl/QualifiedNameValueConverter.java) handles comme"
"nts and white spaces gracefully and is capable to use the appropriate value co"
"nverter for each segment of a qualified name. This allows for individually quo"
"ted segments. The domainmodel example shows how to use it."
msgstr ""

msgid ""
"The protocol of an [IValueConverter]({{site.src.xtext_core}}/org.eclipse.xtext"
"/src/org/eclipse/xtext/conversion/IValueConverter.java) allows to throw a [Val"
"ueConverterException]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclips"
"e/xtext/conversion/ValueConverterException.java) if something went wrong. The "
"exception is propagated as a syntax error by the parser or as a validation pro"
"blem by the [ConcreteSyntaxValidator]({{site.src.xtext_core}}/org.eclipse.xtex"
"t/src/org/eclipse/xtext/validation/impl/ConcreteSyntaxValidator.java) if the v"
"alue cannot be converted to a valid string. The [AbstractLexerBasedConverter]("
"{{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/imp"
"l/AbstractLexerBasedConverter.java) is useful when implementing a custom value"
" converter. If the converter needs to know about the rule that it currently wo"
"rks with, it may implement the interface [RuleSpecific]({{site.src.xtext_core}"
"}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueConverter.java). Th"
"e framework will set the rule such that the implementation can use it afterwar"
"ds."
msgstr ""

msgid "## Serialization {#serialization}"
msgstr ""

msgid ""
"Serialization is the process of transforming an EMF model into its textual rep"
"resentation. Thereby, serialization complements parsing and lexing."
msgstr ""

msgid "In Xtext, the process of serialization is split into the following steps:"
msgstr ""

msgid ""
"1.  Validating the semantic model. This is optional, enabled by default, done "
"by the [concrete syntax validator](#concrete-syntax-validation) and can be tur"
"ned off in the [save options](#save-options).\n"
"1.  Matching the model elements with the grammar rules and creating a stream o"
"f tokens. This is done by the [parse tree constructor](#parse-tree-constructor"
").\n"
"1.  Associating comments with semantic objects. This is done by the [comment a"
"ssociator](#comment-associater).\n"
"1.  Associating existing nodes from the node model with tokens from the token "
"stream.\n"
"1.  [Merging existing white space](#hidden-token-merger) and line-wraps into t"
"he token stream.\n"
"1.  Adding further needed white space or replacing all white space using a [fo"
"rmatter](#formatting)."
msgstr ""

msgid ""
"Serialization is invoked when calling [XtextResource.save(..)]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResource.java)."
" Furthermore, the [Serializer]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/parsetree/reconstr/Serializer.java) provides resource-indepen"
"dent support for serialization. Another situation that triggers serialization "
"is applying [quick fixes](310_eclipse_support.html#quick-fixes) with semantic "
"modifications. Serialization is *not* called when a textual editors contents i"
"s saved to disk."
msgstr ""

msgid "### The Contract {#serialization-contract}"
msgstr ""

msgid ""
"The contract of serialization says that a model which is saved (serialized) to"
" its textual representation and then loaded (parsed) again yields a new model "
"that is equal to the original model. Please be aware that this does *not* impl"
"y that loading a textual representation and serializing it back produces ident"
"ical textual representations. However, the serialization algorithm tries to re"
"store as much information as possible. That is, if the parsed model was not mo"
"dified in-memory, the serialized output will usually be equal to the previous "
"input. Unfortunately, this cannot be ensured for each and every case. A use ca"
"se where is is hardly possible, is shown in the following example:"
msgstr ""

msgid ""
"```xtext\n"
"MyRule:\n"
"  (xval+=ID | yval+=INT)*;\n"
"```"
msgstr ""

msgid ""
"The given *MyRule* reads *ID*- and *INT*-elements which may occur in an arbitr"
"ary order in the textual representation. However, when serializing the model a"
"ll *ID*-elements will be written first and then all *INT*-elements. If the ord"
"er is important it can be preserved by storing all elements in the same list -"
" which may require wrapping the *ID*- and *INT*-elements into other objects."
msgstr ""

msgid "### Roles of the Semantic Model and the Node Model During Serialization"
msgstr ""

msgid ""
"A serialized document represents the state of the semantic model. However, if "
"there is a node model available (i.e. the semantic model has been created by t"
"he parser), the serializer"
msgstr ""

msgid ""
"*   preserves [existing white spaces](#hidden-token-merger) from the node mode"
"l.\n"
"*   preserves [existing comments](#comment-associater) from the node model.\n"
"*   preserves the representation of cross-references: If a cross-referenced ob"
"ject can be identified by multiple names (i.e. scoping returns multiple [IEObj"
"ectDescriptions]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/resource/IEObjectDescription.java) for the same object), the serializer tri"
"es to keep the name that was used in the input file.\n"
"*   preserves the representation of values: For values handled by the [value c"
"onverter](#value-converter), the serializer checks whether the textual represe"
"ntation converted to a value equals the value from the semantic model. If that"
" is true, the textual representation is kept."
msgstr ""

msgid "### Parse Tree Constructor {#parse-tree-constructor}"
msgstr ""

msgid ""
"The parse tree constructor usually does not need to be customized since it is "
"automatically derived from the [Xtext Grammar](301_grammarlanguage.html). Howe"
"ver, it can be helpful to look into it to understand its error messages and it"
"s runtime performance."
msgstr ""

msgid ""
"For serialization to succeed, the parse tree constructor must be able to *cons"
"ume* every non-transient element of the to-be-serialized EMF model. To *consum"
"e* means, in this context, to write the element to the textual representation "
"of the model. This can turn out to be a not-so-easy-to-fulfill requirement, si"
"nce a grammar usually introduces implicit constraints to the EMF model as expl"
"ained for the [concrete syntax validator](#concrete-syntax-validation)."
msgstr ""

msgid ""
"If a model can not be serialized, an [XtextSerializationException]({{site.src."
"xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parsetree/reconstr/XtextS"
"erializationException.java) is thrown. Possible reasons are listed below:"
msgstr ""

msgid ""
"*   A model element can not be consumed. This can have the following reasons/s"
"olutions:\n"
"    *   The model element should not be stored in the model.\n"
"    *   The grammar needs an assignment which would consume the model element."
"\n"
"    *   The [transient value service](#transient-values) can be used to indica"
"te that this model element should not be consumed.\n"
"*   An assignment in the grammar has no corresponding model element. The defau"
"lt transient value service considers a model element to be transient if it is "
"*unset* or *equals* its default value. However, the parse tree constructor may"
" serialize default values if this is required by a grammar constraint to be ab"
"le to serialize another model element. The following solution may help to solv"
"e such a scenario:\n"
"    *   A model element should be added to the model.\n"
"    *   The assignment in the grammar should be made optional.\n"
"*   The type of the model element differs from the type in the grammar. The ty"
"pe of the model element must be identical to the return type of the grammar ru"
"le or the action's type. Subtypes are not allowed.\n"
"*   [Value conversion](#value-converter) fails. The value converter can indica"
"te that a value is not serializable by throwing a [ValueConverterException]({{"
"site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/conversion/Value"
"ConverterException.java).\n"
"*   An enum literal is not allowed at this position. This can happen if the re"
"ferenced enum rule only lists a subset of the literals of the actual enumerati"
"on."
msgstr ""

msgid ""
"To understand error messages and performance issues of the parse tree construc"
"tor it is important to know that it implements a backtracking algorithm. This "
"basically means that the grammar is used to specify the structure of a tree in"
" which one path (from the root node to a leaf node) is a valid serialization o"
"f a specific model. The parse tree constructor's task is to find this path - w"
"ith the condition that all model elements are consumed while walking this path"
". The parse tree constructor's strategy is to take the most promising branch f"
"irst (the one that would consume the most model elements). If the branch leads"
" to a dead end (for example, if a model element needs to be consumed that is n"
"ot present in the model), the parse tree constructor goes back the path until "
"a different branch can be taken. This behavior has two consequences:"
msgstr ""

msgid ""
"*   In case of an error, the parse tree constructor has found only dead ends b"
"ut no leaf. It cannot tell which dead end is actually erroneous. Therefore, th"
"e error message lists dead ends of the longest paths, a fragment of their seri"
"alization and the reason why the path could not be continued at this point. Th"
"e developer has to judge on his own which reason is the actual error.\n"
"*   For reasons of performance, it is critical that the parse tree constructor"
" takes the most promising branch first and detects wrong branches early. One w"
"ay to achieve this is to avoid having many rules which return the same type an"
"d which are called from within the same alternative in the grammar."
msgstr ""

msgid "### Options {#save-options}"
msgstr ""

msgid ""
"[SaveOptions]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/"
"resource/SaveOptions.java) can be passed to [XtextResource.save(options)]({{si"
"te.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextReso"
"urce.java) and to [Serializer.serialize(..)]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/parsetree/reconstr/Serializer.java). Available "
"options are:"
msgstr ""

msgid ""
"*   **Formatting.** Default: `false`. If enabled, it is the [formatters](#form"
"atting) job to determine all white space information during serialization. If "
"disabled, the formatter only defines white space information for the places in"
" which no white space information can be preserved from the node model. E.g. W"
"hen new model elements are inserted or there is no node model.\n"
"*   **Validating.** Default: `true`: Run the [concrete syntax validator](#conc"
"rete-syntax-validation) before serializing the model."
msgstr ""

msgid "### Preserving Comments from the Node Model {#comment-associater}"
msgstr ""

msgid ""
"The [ICommentAssociater]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecl"
"ipse/xtext/parsetree/reconstr/ICommentAssociater.java) associates comments wit"
"h semantic objects. This is important in case an element in the semantic model"
" is moved to a different position and the model is serialized, one expects the"
" comments to be moved to the new position in the document as well."
msgstr ""

msgid ""
"Which comment belongs to which semantic object is surely a very subjective iss"
"ue. The [default implementation]({{site.src.xtext_core}}/org.eclipse.xtext/src"
"/org/eclipse/xtext/parsetree/reconstr/impl/DefaultCommentAssociater.java) beha"
"ves as follows, but can be customized:"
msgstr ""

msgid ""
"*   If there is a semantic token before a comment and in the same line, the co"
"mment is associated with this token's semantic object.\n"
"*   In all other cases, the comment is associated with the semantic object of "
"the next following object."
msgstr ""

msgid "### Transient Values {#transient-values}"
msgstr ""

msgid ""
"Transient values are values or model elements which are not persisted (written"
" to the textual representation in the serialization phase). If a model contain"
"s model elements which can not be serialized with the current grammar, it is c"
"ritical to mark them transient using the [ITransientValueService]({{site.src.x"
"text_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parsetree/reconstr/ITransi"
"entValueService.java), or serialization will fail. The default implementation "
"marks all model elements transient, which are `eStructuralFeature.isTransient("
")` or not `eObject.eIsSet(eStructuralFeature)`. By default, EMF returns `false"
"` for `eIsSet(..)` if the value equals the default value."
msgstr ""

msgid "### Unassigned Text {#unassigned-text}"
msgstr ""

msgid ""
"If there are calls of data type rules or terminal rules that do not reside in "
"an assignment, the serializer by default doesn't know which value to use for s"
"erialization."
msgstr ""

msgid ""
"```xtext\n"
"PluralRule:\n"
"  'contents:' count=INT Plural;"
msgstr ""

msgid ""
"terminal Plural:\n"
"  'item' | 'items';\n"
"```"
msgstr ""

msgid ""
"Valid models for this example are `contents 1 item` or `contents 5 items`. How"
"ever, it is not stored in the semantic model whether the keyword *item* or *it"
"ems* has been parsed. This is due to the fact that the rule call *Plural* is u"
"nassigned. However, the [parse tree constructor](#parse-tree-constructor) need"
"s to decide which value to write during serialization. This decision can be be"
" made by customizing the [IValueSerializer.serializeUnassignedValue(EObject, R"
"uleCall, INode)]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/parsetree/reconstr/ITokenSerializer.java)."
msgstr ""

msgid "### Cross-Reference Serializer {#cross-reference-serializer}"
msgstr ""

msgid ""
"The cross-reference serializer specifies which values are to be written to the"
" textual representation for cross-references. This behavior can be customized "
"by implementing [ICrossReferenceSerializer]({{site.src.xtext_core}}/org.eclips"
"e.xtext/src/org/eclipse/xtext/parsetree/reconstr/ITokenSerializer.java). The d"
"efault implementation delegates to various other services such as the [IScopeP"
"rovider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scopi"
"ng/IScopeProvider.java) or the [LinkingHelper]({{site.src.xtext_core}}/org.ecl"
"ipse.xtext/src/org/eclipse/xtext/linking/impl/LinkingHelper.java) each of whic"
"h may be the better place for customization."
msgstr ""

msgid "### Merge White Space {#hidden-token-merger}"
msgstr ""

msgid ""
"After the [parse tree constructor](#parse-tree-constructor) has done its job t"
"o create a stream of tokens which are to be written to the textual representat"
"ion, and the [comment associator](#comment-associater) has done its work, the "
"existing white spaces from the node model are merged into the stream."
msgstr ""

msgid ""
"The strategy is as follows: If two tokens follow each other in the stream and "
"the corresponding nodes in the node model follow each other as well, then the "
"white space information in between is kept. In all other cases it is up to the"
" [formatter](#formatting) to calculate new white space information."
msgstr ""

msgid "### Token Stream {#token-stream}"
msgstr ""

msgid ""
"The [parse tree constructor](#parse-tree-constructor) and the [formatter](#for"
"matting) use an [ITokenStream]({{site.src.xtext_core}}/org.eclipse.xtext/src/o"
"rg/eclipse/xtext/parsetree/reconstr/ITokenStream.java) for their output, and t"
"he latter for its input as well. This allows for chaining the two components. "
"Token streams can be converted to a [String]({{site.javadoc.java}}/java/lang/S"
"tring.html) using the [TokenStringBuffer]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/parsetree/reconstr/impl/TokenStringBuffer.java) an"
"d to a [Writer]({{site.javadoc.java}}/java/io/Writer.html) using the [WriterTo"
"kenStream]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/par"
"setree/reconstr/impl/WriterTokenStream.java)."
msgstr ""

msgid ""
"```java\n"
"public interface ITokenStream {"
msgstr ""

msgid ""
"  void flush() throws IOException;\n"
"  void writeHidden(EObject grammarElement, String value);\n"
"  void writeSemantic(EObject grammarElement, String value);\n"
"}\n"
"```"
msgstr ""

msgid "## Formatting {#formatting}"
msgstr ""

msgid ""
"Formatting (aka. pretty printing) is the process of rearranging the text in a "
"document to improve the readability without changing the semantic value of the"
" document. Therefore a formatter is responsible for arranging line-wraps, inde"
"ntation, whitespace, etc. in a text to emphasize its structure, but it is not "
"supposed to alter a document in a way that impacts the semantic model."
msgstr ""

msgid ""
"The actual formatting is done by constructing a list of text replacements. A t"
"ext replacement describes a new text which should replace an existing part of "
"the document, described by offset and length. Applying the text replacements t"
"urns the unformatted document into a formatted document."
msgstr ""

msgid ""
"To invoke the formatter programmatically, you need to instantiate a [request]("
"{{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/Fo"
"rmatterRequest.java) and pass it to the [formatter]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/formatting2/IFormatter2.java). The forma"
"tter will return a list of text replacements. The document modification itself"
" can be performed by an [ITextRegionRewriter]({{site.src.xtext_core}}/org.ecli"
"pse.xtext/src/org/eclipse/xtext/formatting2/regionaccess/ITextRegionRewriter.j"
"ava)."
msgstr ""

msgid ""
"Implementors of a formatter should extend [AbstractFormatter2]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/AbstractFormatter"
"2.java) and add dispatch methods for the model elements that should be formatt"
"ed. The format routine has to be invoked recursively if the children of an obj"
"ect should be formatted, too."
msgstr ""

msgid ""
"The following example illustrates that pattern. An instance of PackageDeclarat"
"ion is passed to the format method along with the current [formattable documen"
"t]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2"
"/IFormattableDocument.java). In this scenario, the package name is surrounded "
"by a single space, the curly brace is followed by a new line and increased ind"
"entation etc. All elements within that package should be formatted, too, thus "
"`format(..)` is invoked on these as well."
msgstr ""

msgid ""
"```xtend\n"
"def dispatch void format(PackageDeclaration p, extension IFormattableDocument "
"doc) {\n"
"    p.regionFor.feature(PACKAGE_DECLARATION__NAME).surround[oneSpace]\n"
"    interior(\n"
"        p.regionFor.keyword('{').append[newLine],\n"
"        p.regionFor.keyword('}'),\n"
"        [indent]\n"
"    )\n"
"    for (element : p.elements) {\n"
"        format(element, doc)\n"
"        element.append[setNewLines(1, 1, 2)]\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"The API is designed in a way that allows to describe the formatting in a decla"
"rative way by calling methods on the [IHiddenRegionFormatter]({{site.src.xtext"
"_core}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/IHiddenRegionForma"
"tter.java) which is made available inside invocations of `prepend`, `surround`"
" or `append` to specify the formatting rules. This can be done in arbitrary or"
"der &ndash; the infrastructure will reorder all the configurations to execute "
"them from top to bottom of the document. If the configuration-based approach i"
"s not sufficient for a particular use case, the [document]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/formatting2/IFormattableDocument."
"java) also accepts imperative logic that is associated with a given range. The"
" [ITextReplacer]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xte"
"xt/formatting2/ITextReplacer.java) that can be added directly to the document "
"allows to perform all kinds of modifications to the text in the region that it"
" is associated with."
msgstr ""

msgid ""
"More detailed information about the API is available as [JavaDoc on the org.ec"
"lipse.xtext.formatting2 package]({{site.src.xtext_core}}/org.eclipse.xtext/src"
"/org/eclipse/xtext/formatting2/package-info.java)."
msgstr ""

msgid "## Character Encoding {#encoding}"
msgstr ""

msgid ""
"Encoding, aka. *character set*, describes the way characters are encoded into "
"bytes and vice versa. Famous standard encodings are *UTF-8* or *ISO-8859-1*. T"
"he list of available encodings can be determined by calling [Charset.available"
"Charsets()]({{site.javadoc.java}}/java/nio/charset/Charset.html). There is als"
"o a list of encodings and their canonical Java names in the [API docs](http://"
"download.oracle.com/javase/1.5.0/docs/guide/intl/encoding.doc.html)."
msgstr ""

msgid ""
"Unfortunately, each platform and/or spoken language tends to define its own na"
"tive encoding, e.g. *Cp1258* on Windows in Vietnamese or *MacIceland* on Mac O"
"S X in Icelandic."
msgstr ""

msgid ""
"In an Eclipse workspace, files, folders, projects can have individual encoding"
"s, which are stored in the hidden file *.settings/org.eclipse.core.resources.p"
"refs* in each project. If a resource does not have an explicit encoding, it in"
"herits the one from its parent recursively. Eclipse chooses the native platfor"
"m encoding as the default for the workspace root. You can change the default w"
"orkspace encoding in the Eclipse preferences *Preferences &rarr; Workspace &ra"
"rr; Default text encoding*. If you develop on different platforms, you should "
"consider choosing an explicit common encoding for your text or code files, esp"
"ecially if you use special characters."
msgstr ""

msgid ""
"While Eclipse allows to define and inspect the encoding of a file, your file s"
"ystem usually doesn't. Given an arbitrary text file there is no general strate"
"gy to tell how it was encoded. If you deploy an Eclipse project as a jar (even"
" a plug-in), any encoding information not stored in the file itself is lost, t"
"oo. Some languages define the encoding of a file explicitly, as in the first p"
"rocessing instruction of an XML file. Most languages don't. Others imply a fix"
"ed encoding or offer enhanced syntax for character literals, e.g. the unicode "
"escape sequences *\\uXXXX* in Java."
msgstr ""

msgid ""
"As Xtext is about textual modeling, it allows to tweak the encoding in various"
" places."
msgstr ""

msgid "### Encoding at Language Design Time"
msgstr ""

msgid ""
"The plug-ins created by the *New Xtext Project* wizard are by default encoded "
"in the workspace standard encoding. The same holds for all files that Xtext ge"
"nerates in there. If you want to change that, e.g. because your grammar uses/a"
"llows special characters, you should manually set the encoding in the properti"
"es of these projects after their creation. Do this before adding special chara"
"cters to your grammar or at least make sure the grammar reads correctly after "
"the encoding change. To tell the Xtext generator to generate files in the same"
" encoding, set the encoding property in the workflow, e.g."
msgstr ""

msgid ""
"```mwe2\n"
"component = XtextGenerator {\n"
"    configuration = {\n"
"        code = {\n"
"            encoding = \"UTF-8\"\n"
"        }\n"
"    ...\n"
"```"
msgstr ""

msgid "### Encoding at Language Runtime"
msgstr ""

msgid ""
"As each language could handle the encoding problem differently, Xtext offers a"
" service here. The [IEncodingProvider]({{site.src.xtext_core}}/org.eclipse.xte"
"xt/src/org/eclipse/xtext/parser/IEncodingProvider.java) has a single method `g"
"etEncoding(URI)` to define the encoding of the resource with the given URI. Us"
"ers can implement their own strategy, but keep in mind that this is not intend"
"ed to be a long running method. If the encoding is stored within the model fil"
"e itself, it should be extractable in an easy way, like from the first line in"
" an XML file. The default implementation returns the default Java character se"
"t in a standalone scenario."
msgstr ""

msgid ""
"In the Eclipse UI scenario, when there is a workspace, users will expect the e"
"ncoding of the model files to be settable the same way as for other files in t"
"he workspace. The default implementation of the [IEncodingProvider]({{site.src"
".xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parser/IEncodingProvider"
".java) in the Eclipse context therefore returns the file's workspace encoding "
"for files in the workspace and delegates to the runtime implementation for all"
" other resources, e.g. models in a jar or from a deployed plug-in. Keep in min"
"d that you are going to lose the workspace encoding information as soon as you"
" leave this workspace, e.g. deploy your project."
msgstr ""

msgid ""
"Unless you want to enforce a uniform encoding for all models of your language,"
" we advise to override the runtime service only. It is bound in the runtime mo"
"dule using the binding annotation [@Runtime]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/service/DispatchingProvider.java):"
msgstr ""

msgid ""
"```java\n"
"@Override\n"
"public void configureRuntimeEncodingProvider(Binder binder) {\n"
"    binder.bind(IEncodingProvider.class)\n"
"        .annotatedWith(DispatchingProvider.Runtime.class)\n"
"        .to(MyEncodingProvider.class);\n"
"}\n"
"```"
msgstr ""

msgid ""
"For a uniform encoding, bind the plain [IEncodingProvider]({{site.src.xtext_co"
"re}}/org.eclipse.xtext/src/org/eclipse/xtext/parser/IEncodingProvider.java) to"
" the same implementation in all modules. In the Eclipse UI module you can use "
"similar code as above, but with *DispatchingProvider.Ui* instead of *Runtime*."
msgstr ""

msgid "### Encoding of an XtextResource"
msgstr ""

msgid ""
"An [XtextResource]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/resource/XtextResource.java) uses the [IEncodingProvider]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/parser/IEncodingProvider.java"
") of your language by default. You can override that by passing an option on l"
"oad and save, e.g."
msgstr ""

msgid ""
"```xtend\n"
"myXtextResource.load(#{XtextResource.OPTION_ENCODING -> \"UTF-8\"})\n"
"```"
msgstr ""

msgid "or"
msgstr ""

msgid ""
"```xtend\n"
"myXtextResource.save(#{XtextResource.OPTION_ENCODING -> \"ISO-8859-1\"})\n"
"```"
msgstr ""

msgid "## Unit Testing {#testing}"
msgstr ""

msgid ""
"Automated tests are crucial for the maintainability and the quality of a softw"
"are product. That is why it is strongly recommended to write unit tests for yo"
"ur language, too. The Xtext project wizard creates test projects for that purp"
"ose, which simplify the setup procedure for the basic language implementation "
"as well as platform-specific integrations. It supports an option to either cre"
"ate your tests for JUnit 4 or JUnit 5. Depending on your choice your test layo"
"ut will vary in some details."
msgstr ""

msgid "### Creating a Simple Test Class"
msgstr ""

msgid ""
"The core of the test infrastructure for JUnit 4 is the [XtextRunner]({{site.sr"
"c.xtext_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/XtextRu"
"nner.java) and the language specific [IInjectorProvider]({{site.src.xtext_core"
"}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvider.j"
"ava). Both have to be provided by means of class annotations. Your test cases "
"should be annotated with [org.junit.Test](https://github.com/junit-team/junit4"
"/blob/master/src/main/java/org/junit/Test.java). A static import [org.junit.As"
"sert](https://github.com/junit-team/junit4/blob/master/src/main/java/org/junit"
"/Assert.java) makes your tests more readable."
msgstr ""

msgid ""
"```xtend\n"
"import org.eclipse.xtext.testing.InjectWith\n"
"import org.eclipse.xtext.testing.XtextRunner\n"
"import org.junit.runner.RunWith\n"
"import org.junit.Test\n"
"import static org.junit.Assert.*\n"
"import org.example.domainmodel.DomainmodelInjectorProvider"
msgstr ""

msgid ""
"@InjectWith(DomainmodelInjectorProvider)\n"
"@RunWith(XtextRunner)\n"
"class ParserTest {\n"
"    @Test def void simple() {\n"
"        assertTrue(true)\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"This configuration will make sure that you can use dependency injection in you"
"r test class, and that the global EMF registries are properly populated before"
" and cleaned up after each test."
msgstr ""

msgid ""
"A test class for JUnit 5 looks quite similar. Instead of runners JUnit 5 has a"
" notion of [Extensions](https://junit.org/junit5/docs/current/user-guide/#exte"
"nsions). While there can only be one runner per test class for JUnit 4 there c"
"ould be multiple extensions for JUnit 5. The replacement for the XtextRunner i"
"s the new [InjectionExtension]({{site.src.xtext_core}}/org.eclipse.xtext.testi"
"ng/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java). Still ne"
"eded is the language specific [IInjectorProvider]({{site.src.xtext_core}}/org."
"eclipse.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvider.java). I"
"nstead of `org.junit.Test` you have to annotate your cases with [org.junit.jup"
"iter.api.Test](https://github.com/junit-team/junit5/blob/master/junit-jupiter-"
"api/src/main/java/org/junit/jupiter/api/Test.java) and import the methods from"
" [org.junit.jupiter.api.Assertions](https://github.com/junit-team/junit5/blob/"
"master/junit-jupiter-api/src/main/java/org/junit/jupiter/api/Assertions.java)."
" A simple test class for JUnit 5 will then look like this:"
msgstr ""

msgid ""
"```xtend\n"
"import org.eclipse.xtext.testing.InjectWith\n"
"import org.eclipse.xtext.testing.extensions.InjectionExtension\n"
"import org.junit.jupiter.api.^extension.ExtendWith\n"
"import org.junit.jupiter.api.Test\n"
"import static org.junit.jupiter.api.Assertions.*\n"
"import org.example.domainmodel.DomainmodelInjectorProvider"
msgstr ""

msgid ""
"@InjectWith(DomainmodelInjectorProvider)\n"
"@ExtendWith(InjectionExtension)\n"
"class ParserTest {\n"
"    @Test def void simple() {\n"
"        assertTrue(true)\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid "### Testing the Parser"
msgstr ""

msgid ""
"The class [ParseHelper]({{site.src.xtext_core}}/org.eclipse.xtext.testing/src/"
"org/eclipse/xtext/testing/util/ParseHelper.java) allows to parse an arbitrary "
"string into an AST model. The AST model itself can be traversed and checked af"
"terwards."
msgstr ""

msgid ""
"```xtend\n"
"import org.eclipse.xtext.testing.util.ParseHelper\n"
"..."
msgstr ""

msgid "@Inject ParseHelper<Domainmodel> parser"
msgstr ""

msgid ""
"@Test\n"
"def void parseDomainmodel() {\n"
"    val model = parser.parse('''\n"
"        entity MyEntity {\n"
"            parent: MyEntity\n"
"        }\n"
"    ''')\n"
"    val entity = model.elements.head as Entity\n"
"    assertSame(entity, entity.features.head.type)\n"
"}\n"
"```"
msgstr ""

msgid "### Testing the Validator {#test-validators}"
msgstr ""

msgid ""
"Testing your validation is very simple with the [ValidationTestHelper]({{site."
"src.xtext_core}}/org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/valid"
"ation/ValidationTestHelper.java):"
msgstr ""

msgid ""
"```xtend\n"
"..."
msgstr ""

msgid ""
"@Inject extension ParseHelper\n"
"@Inject extension ValidationTestHelper"
msgstr ""

msgid ""
"@Test\n"
"def void testLowercaseName() {\n"
"    val model = \"entity foo {}\".parse\n"
"    model.assertWarning(DomainmodelPackage.Literals.ENTITY, null,\n"
"            \"Name should start with a capital\")\n"
"}\n"
"```"
msgstr ""

msgid ""
"See the various *assert* methods in that helper class to explore the testing c"
"apabilities. You can either assert that a given model has specific issues as i"
"n the example above, or assert that it has no issues."
msgstr ""

msgid "### Testing Multiple Languages"
msgstr ""

msgid ""
"If in addition to the main language your tests require using other languages f"
"or references from/to your main language, you'll have to parse and load depend"
"ent resources into the same ResourceSet first for cross-reference resolution t"
"o work."
msgstr ""

msgid ""
"As the default generated [IInjectorProvider]({{site.src.xtext_core}}/org.eclip"
"se.xtext.testing/src/org/eclipse/xtext/testing/IInjectorProvider.java) of your"
" main language (e.g. DomainmodelInjectorProvider) does not know about any othe"
"r dependent languages, they must be initialized explicitly. The recommended pa"
"ttern for this is to create a new subclass of the generated *MyLanguageInjecto"
"rProvider* in your *\\*.test* project and make sure the dependent language is i"
"ntizialized properly. Then you can use this new injector provider instead of t"
"he original one in your test's *@InjectWith*:"
msgstr ""

msgid ""
"```java\n"
"public class MyLanguageWithDependenciesInjectorProvider extends MyLanguageInje"
"ctorProvider {\n"
"    @Override\n"
"    protected Injector internalCreateInjector() {\n"
"        MyOtherLangLanguageStandaloneSetup.doSetup();\n"
"        return super.internalCreateInjector();\n"
"    }\n"
"}"
msgstr ""

msgid ""
"// @RunWith(XtextRunner.class) // JUnit 4\n"
"@ExtendWith(InjectionExtension.class) // JUnit 5\n"
"@InjectWith(MyLanguageWithDependenciesInjectorProvider.class)\n"
"public class YourTest {\n"
"    ...\n"
"}\n"
"```"
msgstr ""

msgid ""
"You should not put injector creation for referenced languages in your standalo"
"ne setup. Note that for the headless code generation use case, the Maven plug-"
"in is configured with multiple setups, so usually there is no problem there."
msgstr ""

msgid ""
"You may also need to initialize imported Ecore models that are not generated b"
"y your Xtext language. This should be done by using an explicit *MyModelPackag"
"e.eINSTANCE.getName();* in the *doSetup()* method of your respective language'"
"s StandaloneSetup class. Note that it is strongly recommended to follow this p"
"attern instead of just using *@Before* methods in your \\*Test class, as due to"
" internal technical reasons that won't work anymore as soon as you have more t"
"han just one *@Test*."
msgstr ""

msgid ""
"```java\n"
"public class MyLanguageStandaloneSetup extends MyLanguageStandaloneSetupGenera"
"ted {"
msgstr ""

msgid ""
"    public static void doSetup() {\n"
"        if (!EPackage.Registry.INSTANCE.containsKey(MyPackage.eNS_URI))\n"
"            EPackage.Registry.INSTANCE.put(MyPackage.eNS_URI, MyPackage.eINSTA"
"NCE);\n"
"        new MyLanguageStandaloneSetup().createInjectorAndDoEMFRegistration();\n"
"    }"
msgstr ""

msgid ""
"This only applies to referencing dependencies to imported Ecore models and lan"
"guages based on them which may be used in the test. The inherited dependencies"
" from mixed-in grammars are automatically listed in the generated super class "
"already, and nothing needs to be done for those."
msgstr ""

msgid ""
"The Xtext example projects (*File &rarr; New &rarr; Example &rarr; Xtext Examp"
"les*) contain further unit test cases, e.g. testing the formatter, serializer,"
" compiler, ...etc . Feel free to study the corresponding `org.eclipse.xtext.ex"
"ample.<language>.tests` projects to get some inspirations on how to implement "
"automated unit test cases for your Xtext-based language."
msgstr ""

msgid "---"
msgstr ""

msgid "**[Next Chapter: Integration with Java](305_xbase.html)**"
msgstr ""
