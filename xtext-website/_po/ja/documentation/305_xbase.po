msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: documentation\n"
"title: Integration with Java\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid "# {{page.title}} {#xbase}"
msgstr ""

msgid ""
"The following chapter demonstrates how to integrate your own DSL with Java. We"
" will do this in four stages: First, you will learn how to refer to existing J"
"ava elements from within your language. Then you will use Xbase to refer to ge"
"neric types. In the third step, you will map your own DSL's concepts to Java c"
"oncepts. Last but not least, you will use both Java types and your concepts wi"
"thin Xbase expressions and execute it."
msgstr ""

msgid ""
"Throughout this chapter, we will step by step improve the [domain model exampl"
"e from the tutorial](103_domainmodelnextsteps.html)."
msgstr ""

msgid "## Referring to Java Elements using JVM Types {#jvmtypes}"
msgstr ""

msgid ""
"A common case when developing languages is the requirement to refer to existin"
"g concepts of other languages. Xtext makes this very easy for other self defin"
"ed DSLs. However, it is often very useful to have access to the available type"
"s of the Java Virtual Machine as well. The [JVM types Ecore model]({{site.src."
"xtext_extras}}/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore) enables"
" clients to do exactly this. It is possible to create cross-references to clas"
"ses, interfaces, and their fields and methods. Basically every information abo"
"ut the structural concepts of the Java type system is available via the JVM ty"
"pes. This includes annotations and their specific values and enumeration liter"
"als, too."
msgstr ""

msgid ""
"The implementation will be selected transparently depending on how the client "
"code is executed. If the environment is a plain stand-alone Java or OSGi envir"
"onment, the *java.lang.reflect* API will be used to deduce the necessary data."
" On the contrary, the type-model will be created from the live data of the JDT"
" in an interactive Eclipse environment. All this happens transparently for the"
" clients behind the scenes via different implementations that are bound to spe"
"cific interfaces by means of Google Guice."
msgstr ""

msgid ""
"Using the JVM types model is very simple. First of all, the grammar has to imp"
"ort the *JavaVMTypes* Ecore model. Thanks to content assist this is easy to sp"
"ot in the list of proposals."
msgstr ""

msgid ""
"```xtext\n"
"grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.xbase.Xtype\n"
"...\n"
"import \"http://www.eclipse.org/xtext/common/JavaVMTypes\" as jvmTypes\n"
"```"
msgstr ""

msgid ""
"The next step is to actually refer to an imported concept. Let's define a mapp"
"ing to available Java types for the simple data types in the domain model lang"
"uage. This can be done with a simple cross-reference:"
msgstr ""

msgid ""
"```xtext\n"
"// simple cross reference to a Java type\n"
"DataType:\n"
"  'datatype' name=ID \n"
"  'mapped-to' javaType=[jvmTypes::JvmType|QualifiedName];\n"
"```"
msgstr ""

msgid ""
"After regenerating your language, it will be allowed to define a type `Date` t"
"hat maps to the [Date]({{site.javadoc.java}}/java/util/Date.html) like this:"
msgstr ""

msgid ""
"```javatypesexample\n"
"  datatype Date mapped-to java.util.Date\n"
"```"
msgstr ""

msgid ""
"These two steps will provide a nice integration into the Eclipse JDT. There is"
" *Find References* on Java methods, fields and types that will reveal results "
"in your language files. *Go To Declaration* works as expected and content assi"
"st will propose the list of available types. Even the *import*Â statements will"
" also apply for Java types."
msgstr ""

msgid "### Customization Points"
msgstr ""

msgid ""
"There are several customization hooks in the runtime layer of the JVM types an"
"d on the editor side as well:"
msgstr ""

msgid ""
"The [AbstractTypeScopeProvider]({{site.src.xtext_extras}}/org.eclipse.xtext.co"
"mmon.types/src/org/eclipse/xtext/common/types/xtext/AbstractTypeScopeProvider."
"java) can be used to create scopes for members with respect to the override se"
"mantics of the Java language. Of course it is possible to use this implementat"
"ion to create scopes for types as well."
msgstr ""

msgid ""
"As the Java VM types expose a lot of information about visibility, parameter t"
"ypes and return types, generics, available annotations or enumeration literals"
", it is very easy to define constraints for the referred types."
msgstr ""

msgid ""
"The [ITypesProposalProvider]({{site.src.xtext_eclipse}}/org.eclipse.xtext.comm"
"on.types.ui/src/org/eclipse/xtext/common/types/xtext/ui/ITypesProposalProvider"
".java) can be used to provide optimized proposals based on various filter crit"
"eria. The most common selector can be used directly via `createSubTypeProposal"
"s(..)`. The implementation is optimized and uses the JDT Index directly to min"
"imize the effort for object instantiation. The class [TypeMatchFilters]({{site"
".src.xtext_eclipse}}/org.eclipse.xtext.common.types.ui/src/org/eclipse/xtext/c"
"ommon/types/xtext/ui/TypeMatchFilters.java) provides a comprehensive set of re"
"usable filters that can be easily combined to reduce the list of proposals to "
"a smaller number of valid entries."
msgstr ""

msgid "## Referring to Java Types Using Xbase {#xbase-java-references}"
msgstr ""

msgid ""
"While the JVM types approach from the previous chapter allows to refer to any "
"Java element, it is quite limited when it comes to generics. Usually, a type r"
"eference in Java can have type arguments which can also include wildcards, upp"
"er and lower bounds etc. A simple cross-reference using a qualified name is no"
"t enough to express neither the syntax nor the structure of such a type refere"
"nce."
msgstr ""

msgid ""
"Xbase offers a parser rule *JvmTypeReference* which supports the full syntax o"
"f a Java type reference and instantiates a JVM element of type [JvmTypeReferen"
"ce]({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/org/eclip"
"se/xtext/common/types/JvmTypeReference.java). So let us start by inheriting fr"
"om Xbase:"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.eclipse.xtext.example.Domainmodel\n"
"   with org.eclipse.xtext.xbase.Xbase\n"
"```"
msgstr ""

msgid ""
"Because we can express all kinds of Java type references directly now, an indi"
"rection for *DataTypes* as in the previous section is no longer necessary. If "
"we start from the [domain model example in the tutorial](103_domainmodelnextst"
"eps.html) again, we have to replace all cross-references to *Types* by calls t"
"o the production rule *JvmTypeReference*. The rules *DataType*, *Type*, and *Q"
"ualifiedName* become obsolete (the latter is already defined in Xbase). As we "
"now have all kinds of generic Java collections at hand, *Feature.many* is obso"
"lete, too. The whole grammar now reads concisely:"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.eclipse.xtext.example.Domainmodel with\n"
"                                      org.eclipse.xtext.xbase.Xbase"
msgstr ""

msgid "generate domainmodel \"http://www.eclipse.org/xtext/example/Domainmodel\""
msgstr ""

msgid ""
"Domainmodel:\n"
"  importSection=XImportSection?\n"
"  (elements += AbstractElement)*\n"
";"
msgstr ""

msgid ""
"PackageDeclaration:\n"
"  'package' name = QualifiedName '{'\n"
"    (elements += AbstractElement)*\n"
"  '}'\n"
";"
msgstr ""

msgid ""
"AbstractElement:\n"
"  PackageDeclaration | Entity\n"
";"
msgstr ""

msgid ""
"Entity:\n"
"  'entity' name = ID \n"
"              ('extends' superType = JvmTypeReference)?\n"
"  '{'\n"
"    (features += Feature)*\n"
"  '}'\n"
";"
msgstr ""

msgid ""
"Feature:\n"
"  name = ID ':' type = JvmTypeReference\n"
"; \n"
"```"
msgstr ""

msgid "As we changed the grammar, we have to regenerate the language now."
msgstr ""

msgid ""
"Being able to parse a Java type reference is already nice, but we also have to"
" write them back to their string representation when we generate Java code. Un"
"fortunately, a generic type reference with fully qualified class names can bec"
"ome a bit bulky. Therefore, the [ImportManager]({{site.src.xtext_extras}}/org."
"eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/ImportManager.java) s"
"hortens fully qualified names, keeps track of imported namespaces, avoids name"
" collisions, and helps to serialize [JvmTypeReferences]({{site.src.xtext_extra"
"s}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmT"
"ypeReference.java) by means of the [TypeReferenceSerializer]({{site.src.xtext_"
"extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TypeRefe"
"renceSerializer.java). This utility encapsulates how type references may be se"
"rialized depending on the concrete context in the output."
msgstr ""

msgid ""
"The following snippet shows our code generator using an [ImportManager]({{site"
".src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compil"
"er/ImportManager.java) in conjunction with a [TypeReferenceSerializer]({{site."
"src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compile"
"r/TypeReferenceSerializer.java). We create a new instance and pass it through "
"the generation functions, collecting types on the way. As the import section i"
"n a Java file precedes the class body, we create the body into a String variab"
"le and assemble the whole file's content in a second step."
msgstr ""

msgid ""
"```xtend\n"
"class DomainmodelGenerator implements IGenerator {"
msgstr ""

msgid ""
"  @Inject extension IQualifiedNameProvider\n"
"  @Inject extension TypeReferenceSerializer"
msgstr ""

msgid ""
"  override void doGenerate(Resource resource, IFileSystemAccess fsa) {\n"
"    for(e: resource.allContents.toIterable.filter(typeof(Entity))) {\n"
"      fsa.generateFile(\n"
"        e.fullyQualifiedName.toString(\"/\") + \".java\",\n"
"        e.compile)\n"
"    }\n"
"  }"
msgstr ""

msgid ""
"  def compile(Entity it) '''\n"
"    Â«val importManager = new ImportManager(true)Â» \n"
"    Â«val body = body(importManager)Â»\n"
"    Â«IF eContainer != nullÂ»\n"
"      package Â«eContainer.fullyQualifiedNameÂ»;\n"
"    Â«ENDIFÂ»"
msgstr ""

msgid ""
"    Â«FOR i:importManager.importsÂ»\n"
"      import Â«iÂ»;\n"
"    Â«ENDFORÂ»"
msgstr ""

msgid ""
"    Â«bodyÂ»\n"
"  '''"
msgstr ""

msgid ""
"  def body(Entity it, ImportManager importManager) '''\n"
"    public class Â«nameÂ» Â«IF superType != nullÂ»\n"
"      extends Â«superType.shortName(importManager)Â» Â«ENDIFÂ»{\n"
"      Â«FOR f : featuresÂ»\n"
"        Â«f.compile(importManager)Â»\n"
"      Â«ENDFORÂ»\n"
"    }\n"
"  '''"
msgstr ""

msgid ""
"  def compile(Feature it, ImportManager importManager) '''\n"
"    private Â«type.shortName(importManager)Â» Â«nameÂ»;"
msgstr ""

msgid ""
"    public Â«type.shortName(importManager)Â» \n"
"      getÂ«name.toFirstUpperÂ»() {\n"
"      return Â«nameÂ»;\n"
"    }"
msgstr ""

msgid ""
"    public void setÂ«name.toFirstUpperÂ»(\n"
"      Â«type.shortName(importManager)Â» Â«nameÂ») {\n"
"      this.Â«nameÂ» = Â«nameÂ»;\n"
"    }\n"
"  '''"
msgstr ""

msgid ""
"  def shortName(JvmTypeReference ref, \n"
"          ImportManager importManager) {\n"
"    val result = new StringBuilderBasedAppendable(importManager)\n"
"    ref.serialize(ref.eContainer, result);\n"
"    result.toString\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Please note that when *org.eclipse.xtext.xbase.Xbase* is used the default bind"
"ing for the interface [IGenerator]({{site.src.xtext_core}}/org.eclipse.xtext/s"
"rc/org/eclipse/xtext/generator/IGenerator.java) is [JvmModelGenerator]({{site."
"src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compile"
"r/JvmModelGenerator.xtend). To use a custom one we have to bind our own implem"
"entation in *org.example.domainmodel.DomainmodelRuntimeModule* like this:"
msgstr ""

msgid ""
"```java\n"
"public class DomainmodelRuntimeModule extends org.example.domainmodel.Abstract"
"DomainmodelRuntimeModule {\n"
"\tpublic Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator"
"() {\n"
"\t\treturn org.example.domainmodel.generator.DomainmodelGenerator.class;\n"
"\t}\n"
"}\n"
"```"
msgstr ""

msgid "## Inferring a JVM Model {#xbase-inferred-type}"
msgstr ""

msgid ""
"In many cases, you will want your DSLs concepts to be usable as Java elements,"
" e.g. an *Entity* will become a Java class and should be usable as such. In th"
"e domain model example, you can write"
msgstr ""

msgid ""
"```domainexample\n"
"entity Employee extends Person {\n"
"  boss: Person\n"
"..."
msgstr ""

msgid ""
"entity Person {\n"
"  friends: List<Person>\n"
"...\n"
"```"
msgstr ""

msgid ""
"You can use entities instead of Java types or even mix Java types as [List]({{"
"site.javadoc.java}}/java/util/List.html) with entities such as *Person*. One w"
"ay to achieve this is to let your concepts inherit from a corresponding JVM ty"
"pe, e.g. let *Entity* inherit from [JvmGenericType]({{site.src.xtext_extras}}/"
"org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmGener"
"icType.java). But this would result in a lot of accidentally inherited propert"
"ies in your domain model. In Xbase there is an alternative: You can simply def"
"ine how to derive a JVM model from your model. This *inferred JVM model* is th"
"e representation of your concepts in the type system of Xbase."
msgstr ""

msgid ""
"The main component for the inferred JVM model is the [IJvmModelInferrer]({{sit"
"e.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmo"
"del/IJvmModelInferrer.java). It has a single method that takes the root model "
"element as an argument and produces a number of [JvmDeclaredTypes]({{site.src."
"xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common"
"/types/JvmDeclaredType.java). As Xbase cannot guess how you would like to map "
"your concepts to JVM elements, you have to implement this component yourself. "
"This usually boils down to using an injected [JvmTypesBuilder]({{site.src.xtex"
"t_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmTyp"
"esBuilder.java) to create a hierarchy of JVM elements. The [builder]({{site.sr"
"c.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/"
"JvmTypesBuilder.java) helps to initialize the produced types with sensible def"
"aults and encapsulates the logic that associates the source elements with the "
"derived JVM concepts. As this kind of transformation can be elegantly implemen"
"ted using polymorphic dispatch functions and extension methods, it is a good c"
"hoice to write the [IJvmModelInferrer]({{site.src.xtext_extras}}/org.eclipse.x"
"text.xbase/src/org/eclipse/xtext/xbase/jvmmodel/IJvmModelInferrer.java) in Xte"
"nd. It becomes even simpler if you inherit from the [AbstractModelInferrer]({{"
"site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jv"
"mmodel/AbstractModelInferrer.java) which traverses the input model and dispatc"
"hes to its contents until you decide which elements to handle."
msgstr ""

msgid ""
"The inference runs in two phases: In the first phase all the types are created"
" with empty bodies. This way you make sure all types exist when you might look"
"up types during initializing the members in the second phase. Use `acceptor.ac"
"cept(JvmDeclaredType, Procedure1<JvmDeclaredType>)` and pass in the created Ja"
"va type as the first argument and the initialization block as the second. For "
"our domain model example, we implement a polymorphic dispatch function *infer*"
" for *Entities* to transform them into [JvmGenericTypes]({{site.src.xtext_extr"
"as}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/Jvm"
"GenericType.java) in the first phase. In the second phase, we add a [JvmField]"
"({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/org/eclipse/"
"xtext/common/types/JvmField.java) and corresponding accessors for each *Proper"
"ty*. The final *DomainmodelJvmModelInferrer* looks like this:"
msgstr ""

msgid ""
"```xtend\n"
"class DomainmodelJvmModelInferrer extends AbstractModelInferrer {"
msgstr ""

msgid "  @Inject extension JvmTypesBuilder"
msgstr ""

msgid "  @Inject extension IQualifiedNameProvider"
msgstr ""

msgid ""
"  def dispatch void infer(Entity element, \n"
"                IJvmDeclaredTypeAcceptor acceptor, \n"
"                boolean isPrelinkingPhase) {"
msgstr ""

msgid ""
"    acceptor.accept(element.toClass(element.fullyQualifiedName)) [\n"
"      documentation = element.documentation\n"
"      for (feature : element.features) {\n"
"        members += feature.toField(feature.name, feature.type)\n"
"        members += feature.toSetter(feature.name, feature.type)\n"
"        members += feature.toGetter(feature.name, feature.type)\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Out of the inferred model the corresponding Java class gets generated. To ensu"
"re that this will work make sure that the binding in the rumtime module for [I"
"Generator]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/gen"
"erator/IGenerator.java) is pointing to [JvmModelGenerator]({{site.src.xtext_ex"
"tras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/JvmModelGe"
"nerator.xtend). This is the default case, but as we dealt with a custom implem"
"entation in the last section this may lead to problems."
msgstr ""

msgid "### Linking and Indexing"
msgstr ""

msgid ""
"As Java elements and your concepts are now represented as JVM model elements, "
"other models can now transparently link to Java or your DSL. In other words, y"
"ou can use a mapped element of your DSL in the same places as the correspondin"
"g Java type."
msgstr ""

msgid ""
"The Xbase framework will automatically switch between the JVM element or the D"
"SL element when needed, e.g. when following hyperlinks. The component allowing"
" to navigate between the source model and the JVM model is called [IJvmModelAs"
"sociations]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/"
"xtext/xbase/jvmmodel/IJvmModelAssociations.java), the read-only antagonist of "
"the [IJvmModelAssociator]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/sr"
"c/org/eclipse/xtext/xbase/jvmmodel/IJvmModelAssociator.java) that is used by t"
"he [JvmTypesBuilder]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org"
"/eclipse/xtext/xbase/jvmmodel/JvmTypesBuilder.java)."
msgstr ""

msgid ""
"By default, the inferred model is [indexed](303_runtime_concepts.html#global-s"
"copes), so it can be cross referenced from other models."
msgstr ""

msgid "## Using Xbase Expressions {#xbase-expressions}"
msgstr ""

msgid ""
"Xbase is an expression language that can be embedded into Xtext languages. Its"
" syntax is close to Java, but it additionally offers type inference, lambda ex"
"pressions, a powerful switch expression and a lot more. For details on this ex"
"pression language, please consult the [reference documentation](#xbase-languag"
"e-ref-introduction) and the Xbase tutorial *(File &rarr; New &rarr; Example &r"
"arr; Xtext Examples &rarr; Xbase Tutorial)*."
msgstr ""

msgid ""
"Xbase ships with an interpreter and a compiler that produces Java code. Thus, "
"it is easy to add behavior to your DSLs and make them executable. As Xbase int"
"egrates tightly with Java, there is usually no additional code needed to run y"
"our DSL as part of a Java application."
msgstr ""

msgid "### Making Your Grammar Refer To Xbase"
msgstr ""

msgid "To use Xbase expressions let your grammar extend the Xbase grammar."
msgstr ""

msgid ""
"```xtext\n"
"grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.xbase.Xbase\n"
"```"
msgstr ""

msgid ""
"If you want to refer to [EClassifiers]({{site.src.emf}}/plugins/org.eclipse.em"
"f.ecore/src/org/eclipse/emf/ecore/EClassifier.java) from the Xbase model, you "
"need to import Xbase first:"
msgstr ""

msgid ""
"```xtext\n"
"import \"http://www.eclipse.org/xtext/xbase/Xbase\" as xbase\n"
"```"
msgstr ""

msgid ""
"Now identify the location in your grammar where you want references to Java ty"
"pes and Xbase expressions to appear and call the appropriate rules of the supe"
"r grammar. Adding Xbase expression to the domainmodel example leads to the add"
"itional concept *Operation*: An *Operation*'s parameters are *FullJvmFormalPar"
"ameters*. The production rule for *FullJvmFormalParameters* expects both the n"
"ame and the type here. That is reasonable since the type of parameters should "
"not be inferred. The operation's return type is a *JvmTypeReference* and its *"
"body* is an *XBlockExpression*. The final parser rule reads as:"
msgstr ""

msgid ""
"```xtext\n"
"Operation:\n"
"  'op' name=ValidID '(' \n"
"  (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'\n"
"  ':' type=JvmTypeReference \n"
"    body=XBlockExpression;\n"
"```"
msgstr ""

msgid ""
"If you are unsure which entry point to choose for your expressions, consider t"
"he *XBlockExpression*."
msgstr ""

msgid ""
"To integrate *Operations*Â in our models, we have to call this rule. We copy th"
"e previous *Feature* to a new rule *Property* and let *Feature* become the sup"
"er type of *Property* and *Operation*:"
msgstr ""

msgid ""
"```xtext\n"
"Feature:\n"
"  Property | Operation\n"
";"
msgstr ""

msgid ""
"Property:\n"
"  name = ID ':' type = JvmTypeReference\n"
";\n"
"```"
msgstr ""

msgid ""
"Note: You will have to adapt the [IJvmModelInferrer]({{site.src.xtext_extras}}"
"/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/IJvmModelInferre"
"r.java) to these changes, i.e. rename *Feature* to *Property* and create a [Jv"
"mOperation]({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen/o"
"rg/eclipse/xtext/common/types/JvmOperation.java) for each *Operation*. We leav"
"e that as an exercise :-)"
msgstr ""

msgid ""
"If you are done with that, everything will work out of the box. Since each exp"
"ression is now logically contained in an [operation]({{site.src.xtext_extras}}"
"/org.eclipse.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmOper"
"ation.java), all the scoping rules and visibility constraints are implied from"
" that context. The framework will take care that the operation's parameters ar"
"e visible inside the operation's body and that the declared return types are v"
"alidated against the actual expression types."
msgstr ""

msgid ""
"There is yet another aspect of the JVM model that can be explored. Since all t"
"he coarse grained concepts such as [types]({{site.src.xtext_extras}}/org.eclip"
"se.xtext.common.types/emf-gen/org/eclipse/xtext/common/types/JvmType.java) and"
" [operations]({{site.src.xtext_extras}}/org.eclipse.xtext.common.types/emf-gen"
"/org/eclipse/xtext/common/types/JvmOperation.java) were already derived from t"
"he model, a generator can be used to serialize that information to Java code. "
"There is no need to write a code generator on top of that. The [JvmModelGenera"
"tor]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/x"
"base/compiler/JvmModelGenerator.xtend) knows how to generate operation bodies "
"properly."
msgstr ""

msgid "### Using the Xbase Interpreter"
msgstr ""

msgid ""
"Sometimes it is more convenient to interpret a model that uses Xbase than to g"
"enerate code from it. Xbase ships with the [XbaseInterpreter]({{site.src.xtext"
"_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl"
"/XbaseInterpreter.java) which makes this rather easy."
msgstr ""

msgid ""
"An interpreter is essentially an external visitor, that recursively processes "
"a model based on the model element's types. In the [XbaseInterpreter]({{site.s"
"rc.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpre"
"ter/impl/XbaseInterpreter.java), the method *doEvaluate(XExpression, IEvaluati"
"onContext, CancelIndicator)* delegates to more specialised implementations e.g"
"."
msgstr ""

msgid ""
"```java\n"
"protected Object _doEvaluate(XBlockExpression literal,\n"
"                             IEvaluationContext context,\n"
"                             CancelIndicator indicator)\n"
"```"
msgstr ""

msgid ""
"The [IEvaluationContext]({{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src"
"/org/eclipse/xtext/xbase/interpreter/IEvaluationContext.java) keeps the state "
"of the running application, i.e. the local variables and their values. Additio"
"nally, it can be *fork*ed, thus allowing to shadow the elements of the origina"
"l context. Here is an example code snippet how to call the [XbaseInterpreter]("
"{{site.src.xtext_extras}}/org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/"
"interpreter/impl/XbaseInterpreter.java):"
msgstr ""

msgid ""
"```java\n"
"@Inject private XbaseInterpreter xbaseInterpreter;"
msgstr ""

msgid "@Inject private Provider<IEvaluationContext> contextProvider;"
msgstr ""

msgid ""
"...\n"
"public Object evaluate(XExpression expression, Object thisElement) {\n"
"  IEvaluationContext evaluationContext = contextProvider.get();\n"
"  // provide initial context and implicit variables\n"
"  evaluationContext.newValue(XbaseScopeProvider.THIS, thisElement);"
msgstr ""

msgid ""
"  IEvaluationResult result = xbaseInterpreter.evaluate(expression,\n"
"    evaluationContext, CancelIndicator.NullImpl);\n"
"  if (result.getException() != null) {\n"
"    // handle exception\n"
"  } \n"
"  return result.getResult();\n"
"}\n"
"```"
msgstr ""

msgid "## Xbase Language Reference {#xbase-language-ref-introduction}"
msgstr ""

msgid ""
"This document describes the expression language library Xbase. Xbase is a part"
"ial programming language implemented in Xtext and is meant to be embedded and "
"extended within other programming languages and domain-specific languages (DSL"
") written in Xtext. Xtext is a highly extendible language development framewor"
"k covering all aspects of language infrastructure such as parsers, linkers, co"
"mpilers, interpreters and even full-blown IDE support based on Eclipse."
msgstr ""

msgid ""
"Developing DSLs has become incredibly easy with Xtext. Structural languages wh"
"ich introduce new coarse-grained concepts, such as services, entities, value o"
"bjects or state-machines can be developed in minutes. However, software system"
"s do not consist of structures solely. At some point a system needs to have so"
"me behavior, which is usually specified using so called *expressions*. Express"
"ions are the heart of every programming language and are not easy to get right"
". On the other hand, expressions are well understood and many programming lang"
"uages share a common set and understanding of expressions."
msgstr ""

msgid ""
"That is why most people do not add support for expressions in their DSL but tr"
"y to solve this differently. The most often used workaround is to define only "
"the structural information in the DSL and add behavior by modifying or extendi"
"ng the generated code. It is not only unpleasant to write, read and maintain i"
"nformation which closely belongs together in two different places, abstraction"
" levels and languages. Also, modifying the generated source code comes with a "
"lot of additional problems. This has long time been the preferred solution sin"
"ce adding support for expressions (and a corresponding execution environment) "
"for your language has been hard - even with Xtext."
msgstr ""

msgid ""
"Xbase serves as a language library providing a common expression language boun"
"d to the Java platform (i.e. Java Virtual Machine). It consists of an Xtext gr"
"ammar, as well as reusable and adaptable implementations for the different asp"
"ects of a language infrastructure such as an AST structure, a compiler, an int"
"erpreter, a linker, and a static analyzer. In addition it comes with implement"
"ations to integrate the expression language within an Xtext-based Eclipse IDE."
" Default implementations for aspects like content assistance, syntax coloring,"
" hovering, folding and navigation can be easily integrated and reused within a"
"ny Xtext based language."
msgstr ""

msgid ""
"Conceptually and syntactically, Xbase is very close to Java statements and exp"
"ressions, but with a few differences:"
msgstr ""

msgid ""
"*   No checked exceptions\n"
"*   Everything is an expression, there are no statements\n"
"*   Lambda expressions\n"
"*   Type inference\n"
"*   Properties\n"
"*   Simple operator overloading\n"
"*   Powerful switch expressions"
msgstr ""

msgid "---"
msgstr ""

msgid "### Lexical Syntax {#xbase-language-ref-syntax}"
msgstr ""

msgid ""
"Xbase comes with a small set of terminal rules, which can be overridden and he"
"nce changed by users. However the default implementation is carefully chosen a"
"nd it is recommended to stick with the lexical syntax described in the followi"
"ng."
msgstr ""

msgid "#### Identifiers {#xbase-syntax-identifiers}"
msgstr ""

msgid ""
"Identifiers are used to name all constructs, such as types, methods and variab"
"les. Xbase uses the default identifier-syntax from Xtext - compared to Java, t"
"hey are slightly simplified to match the common cases while having less ambigu"
"ities. They start with a letter *a*-*z*, *A*-*Z* or an underscore/dollar symbo"
"l followed by more of these characters or any digit *0*-*9*."
msgstr ""

msgid "##### Escaped Identifiers {#xbase-syntax-escaped-identifiers}"
msgstr ""

msgid ""
"Identifiers must not have the same spelling as any reserved keyword. However, "
"this limitation can be avoided by escaping identifiers with the prefix `^`. Es"
"caped identifiers are used in cases when there is a conflict with a reserved k"
"eyword. Imagine you have introduced a keyword `service` in your language but w"
"ant to call a Java property *service*. In such cases you can use the escaped i"
"dentifier `^service` to reference the Java property."
msgstr ""

msgid "##### Syntax"
msgstr ""

msgid ""
"```xtext\n"
"terminal ID: \n"
"  '^'? ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*\n"
";\n"
"```"
msgstr ""

msgid "##### Examples"
msgstr ""

msgid ""
"*   `Foo`\n"
"*   `Foo42`\n"
"*   `FOO`\n"
"*   `_42`\n"
"*   `_foo`\n"
"*   `$$foo$$`\n"
"*   `^extends`"
msgstr ""

msgid "#### Comments {#xbase-syntax-comments}"
msgstr ""

msgid ""
"Xbase comes with two different kinds of comments: Single-line comments and mul"
"ti-line comments. The syntax is the same as the one known from Java (see [Â§ 3."
"7 Comments](http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3."
"7))."
msgstr ""

msgid "#### White Space {#xbase-syntax-whitespace}"
msgstr ""

msgid ""
"The white space characters `' '`, `'\t'`, `'\n"
"'`, and `''` are allowed to occur anywhere between the other syntactic elemen"
"ts."
msgstr ""

msgid "#### Reserved Keywords {#xbase-syntax-keywords}"
msgstr ""

msgid ""
"The following list of words are reserved keywords, thus reducing the set of po"
"ssible identifiers:"
msgstr ""

msgid ""
"1.  `as`\n"
"1.  `case`\n"
"1.  `catch`\n"
"1.  `default`\n"
"1.  `do`\n"
"1.  `else`\n"
"1.  `extends`\n"
"1.  `extension`\n"
"1.  `false`\n"
"1.  `finally`\n"
"1.  `for`\n"
"1.  `if`\n"
"1.  `import`\n"
"1.  `instanceof`\n"
"1.  `new`\n"
"1.  `null`\n"
"1.  `return`\n"
"1.  `static`\n"
"1.  `super`\n"
"1.  `switch`\n"
"1.  `throw`\n"
"1.  `true`\n"
"1.  `try`\n"
"1.  `typeof`\n"
"1.  `val`\n"
"1.  `var`\n"
"1.  `while`"
msgstr ""

msgid ""
"The four keywords `extends, static, import, extension` can be used when invoki"
"ng operations. In case some of the other keywords have to be used as identifie"
"rs, the escape character for [identifiers](#xbase-syntax-escaped-identifiers) "
"comes in handy."
msgstr ""

msgid "### Types {#xbase-language-ref-types}"
msgstr ""

msgid "Basically all kinds of JVM types are available and referable."
msgstr ""

msgid "#### Simple Type References {#xbase-types-type-references}"
msgstr ""

msgid ""
"A simple type reference only consists of a *qualified name*. A qualified name "
"is a name made up of identifiers which are separated by a dot (like in Java)."
msgstr ""

msgid ""
"There is no parser rule for a simple type reference, as it is expressed as a p"
"arameterized type references without parameters."
msgstr ""

msgid ""
"*   `java.lang.String`\n"
"*   `String`"
msgstr ""

msgid "#### Parameterized Type References {#xbase-types-parameterized-type-reference}"
msgstr ""

msgid ""
"The general syntax for type references allows to take any number of type argum"
"ents. The semantics as well as the syntax is almost the same as in Java, so pl"
"ease refer to the third edition of the [Java Language Specification](http://do"
"cs.oracle.com/javase/specs/jls/se7/html/index.html)."
msgstr ""

msgid ""
"The only difference is that in Xbase a type reference can also be a function t"
"ype. In the following the full syntax of type references is shown, including f"
"unction types and type arguments."
msgstr ""

msgid ""
"*   `String`\n"
"*   `java.lang.String`\n"
"*   `List<?>`\n"
"*   `List<? extends Comparable<? extends FooBar>`\n"
"*   `List<? super MyLowerBound>`\n"
"*   `List<? extends =>Boolean>`"
msgstr ""

msgid "#### Primitives {#xbase-types-primitives}"
msgstr ""

msgid ""
"Xbase supports all Java primitives. The conformance rules (e.g. boxing and unb"
"oxing) are also exactly like defined in the Java Language Specification."
msgstr ""

msgid "#### Arrays {#xbase-types-arrays}"
msgstr ""

msgid ""
"Arrays cannot be instantiated arbitrarily, but there are a couple of useful li"
"brary functions that allow to create arrays with a fixed length or an initial "
"value set. Besides this restriction, they can be passed around and they are tr"
"ansparently converted to a List of the component type on demand."
msgstr ""

msgid ""
"In other words, the return type of a Java method that returns an array of ints"
" (`int[]`) can be directly assigned to a variable of type [List\\<Integer\\>]({{"
"site.javadoc.java}}/java/util/List.html). Due to type inference this conversio"
"n happens implicitly. The conversion is bi-directional: Any method that takes "
"an array as argument can be invoked with an argument that has the type `List<C"
"omponentType>` instead."
msgstr ""

msgid "#### Function Types {#xbase-types-function-types}"
msgstr ""

msgid ""
"Xbase introduces *lambda expressions*, and therefore an additional function ty"
"pe signature. On the JVM-Level a lambda expression (or more generally any func"
"tion object) is just an instance of one of the types in [Functions]({{site.src"
".xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/eclipse/xtext/xbase/lib/Funct"
"ions.java), depending on the number of arguments. However, as lambda expressio"
"ns are a very important language feature, a special sugared syntax for functio"
"n types has been introduced. So instead of writing `Function1<String, Boolean>"
"` one can write `(String)=>boolean`."
msgstr ""

msgid ""
"For more information on lambda expressions see [the corresponding section](#xb"
"ase-expressions-lambda)."
msgstr ""

msgid ""
"*   `=>Boolean // predicate without parameters`\n"
"*   `()=>String // provider of string`\n"
"*   `(String)=>boolean // One argument predicate`\n"
"*   `(Mutable)=>void // A procedure doing side effects only`\n"
"*   `(List<String>, Integer)=>String`"
msgstr ""

msgid "#### Conformance and Conversion {#xbase-types-conformance-rules}"
msgstr ""

msgid ""
"Type conformance rules are used in order to find out whether some expression c"
"an be used in a certain situation. For instance when assigning a value to a va"
"riable, the type of the right hand expression needs to conform to the type of "
"the variable."
msgstr ""

msgid ""
"As Xbase implements the type system of Java it also fully supports the conform"
"ance rules defined in the [Java Language Specification](http://docs.oracle.com"
"/javase/specs/jls/se7/html/jls-5.html)."
msgstr ""

msgid ""
"Some types in Xbase can be used synonymously even if they do not conform to ea"
"ch other in Java. An example for this are arrays and lists or function types w"
"ith compatible function parameters. Objects of these types are implicitly conv"
"erted by Xbase on demand."
msgstr ""

msgid "#### Common Super Type {#xbase-types-common-super-type}"
msgstr ""

msgid ""
"Because of type inference Xbase sometimes needs to compute the most common sup"
"er type of a given set of types."
msgstr ""

msgid ""
"For a set *\\[T1,T2,...Tn\\]* of types the common super type is computed by usin"
"g the linear type inheritance sequence of *T1* and is iterated until one type "
"conforms to each *T2,..,Tn*. The linear type inheritance sequence of *T1* is c"
"omputed by ordering all types which are part in the type hierarchy of *T1* by "
"their specificity. A type *T1* is considered more specific than *T2* if *T1* i"
"s a subtype of *T2*. Any types with equal specificity will be sorted by the ma"
"ximal distance to the originating subtype. *CharSequence* has distance 2 to *S"
"tringBuilder* because the super type *AbstractStringBuilder* implements the in"
"terface, too. Even if *StringBuilder* implements *CharSequence* directly, the "
"interface gets distance 2 in the ordering because it is not the most general c"
"lass in the type hierarchy that implements the interface. If the distances for"
" two classes are the same in the hierarchy, their qualified name is used as th"
"e compare-key to ensure deterministic results."
msgstr ""

msgid "### Expressions {#xbase-language-ref-expressions}"
msgstr ""

msgid ""
"Expressions are the main language constructs which are used to express behavio"
"r and compute values. The concept of statements is not supported, but instead "
"powerful expressions are used to handle situations in which the imperative nat"
"ure of statements would be helpful. An expression always results in a value (i"
"t might be the value `null` or of type `void` though). In addition, every reso"
"lved expression is of a static type."
msgstr ""

msgid "#### Literals {#xbase-expressions-literals}"
msgstr ""

msgid ""
"A literal denotes a fixed unchangeable value. Literals for strings, numbers, b"
"ooleans, `null` and Java types are supported. Additionally, there exists a lit"
"eral syntax for collections and arrays."
msgstr ""

msgid "##### String Literals {#xbase-expressions-string-literal}"
msgstr ""

msgid ""
"String literals can either use `'single quotes'` or `\"double quotes\"` as their"
" enclosing characters. When using double quotes all literals allowed by Java s"
"tring literals are supported. In addition new line characters are allowed, i.e"
". in Xbase string literals can span multiple lines. When using single quotes t"
"he only difference is that single quotes within the literal have to be escaped"
" while double quotes do not."
msgstr ""

msgid ""
"See [Â§ 3.10.5 String Literals](http://docs.oracle.com/javase/specs/jls/se7/htm"
"l/jls-3.html#jls-3.10.5)"
msgstr ""

msgid ""
"In contrast to Java, equal string literals within the same class do not necess"
"arily refer to the same instance at runtime, especially in the interpreted mod"
"e."
msgstr ""

msgid ""
"*   `'Foo Bar Baz'`\n"
"*   `\"Foo Bar Baz\"`\n"
"*"
msgstr ""

msgid ""
"    ```xbase\n"
"\"the quick brown fox\n"
"    jumps over the lazy dog.\"\n"
"    ```"
msgstr ""

msgid ""
"*   `'Escapes : \\' '`\n"
"*   `\"Escapes : \\\" \"`"
msgstr ""

msgid "##### Number Literals {#xbase-expressions-number-literal}"
msgstr ""

msgid ""
"Xbase supports roughly the same number literals as Java with a few notable dif"
"ferences. As in Java 7, you can separate digits using `_` for better readabili"
"ty of large numbers. An integer literal represents an `int`, a `long` (suffix "
"`L`) or even a [BigInteger]({{site.javadoc.java}}/java/math/BigInteger.html) ("
"suffix `BI`). There are no octal number literals."
msgstr ""

msgid ""
"```xbase\n"
"  42\n"
"  1_234_567_890 \n"
"  0xbeef    // hexadecimal\n"
"  077       // decimal 77 (*NOT* octal)\n"
"  42L\n"
"  0xbeef#L // hexadecimal, mind the '#'\n"
"  0xbeef_beef_beef_beef_beef#BI // BigInteger\n"
"```"
msgstr ""

msgid ""
"A floating-point literal creates a `double` (suffix `D` or omitted), a `float`"
" (suffix `F`) or a [BigDecimal]({{site.javadoc.java}}/java/math/BigDecimal.htm"
"l) (suffix `BD`). If you use a `.` sign you have to specify both, the integer "
"and the fractional part of the mantissa. There are only decimal floating-point"
" literals."
msgstr ""

msgid ""
"```xbase\n"
"  42d     // double\n"
"  0.42e2  // implicit double\n"
"  0.42e2f // float\n"
"  4.2f    // float\n"
"  0.123_456_789_123_456_789_123_456_789e2000bd // BigDecimal\n"
"```"
msgstr ""

msgid "##### Boolean Literals {#xbase-expressions-boolean-literal}"
msgstr ""

msgid ""
"There are two boolean literals, `true` and `false` which correspond to their J"
"ava counterpart of type *boolean*."
msgstr ""

msgid ""
"*   `true`\n"
"*   `false`"
msgstr ""

msgid "##### Null Literal {#xbase-expressions-null-literal}"
msgstr ""

msgid ""
"The null literal is, as in Java, `null`. It is compatible to any reference typ"
"e and therefore always of the null type."
msgstr ""

msgid "*   `null`"
msgstr ""

msgid "##### Type Literals {#xbase-expressions-type-literal}"
msgstr ""

msgid ""
"The syntax for type literals is generally the plain name of the type, e.g. the"
" Xbase snippet `String` is equivalent to the Java code `String.class`. Nested "
"types use the delimiter `'.'`."
msgstr ""

msgid ""
"To disambiguate the expression, type literals may also be specified using the "
"keyword `typeof`."
msgstr ""

msgid ""
"*   `Map.Entry` is equivalent to `Map.Entry.class`\n"
"*   `typeof(StringBuilder)` yields `StringBuilder.class`"
msgstr ""

msgid ""
"Consequently it is possible to access the members of a type reflectively by us"
"ing its plain name `String.getDeclaredFields`."
msgstr ""

msgid ""
"Previous versions of Xbase used the dollar as the delimiter character for nest"
"ed types:"
msgstr ""

msgid "*   `typeof(Map$Entry)` yields `Map.Entry.class`"
msgstr ""

msgid "#### Type Casts {#xbase-expressions-type-casts}"
msgstr ""

msgid ""
"Type cast behave the same as in Java, but have a more readable syntax. Type ca"
"sts bind stronger than any other operator but weaker than feature calls."
msgstr ""

msgid ""
"The conformance rules for casts are defined in the [Java Language Specificatio"
"n](http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.5)."
msgstr ""

msgid ""
"*   `my.foo as MyType`\n"
"*   `(1 + 3 * 5 * (- 23)) as BigInteger`"
msgstr ""

msgid "#### Infix Operators / Operator Overloading {#xbase-expressions-operators}"
msgstr ""

msgid ""
"There are a couple of common predefined infix operators. In contrast to Java, "
"the operators are not limited to operations on certain types. Instead an opera"
"tor-to-method mapping allows users to redefine the operators for any type just"
" by implementing the corresponding method signature. The following defines the"
" operators and the corresponding Java method signatures / expressions."
msgstr ""

msgid ""
"|:---|:---|\n"
"|`e1 += e2`|`e1.operator_add(e2)`|\n"
"|`e1 -= e2`|`e1.operator_remove(e2)`|\n"
"|||\n"
"|`e1 || e2`|`e1.operator_or(e2)`|\n"
"|||\n"
"|`e1 && e2`|`e1.operator_and(e2)`|\n"
"|||\n"
"|`e1 == e2`|`e1.operator_equals(e2)`|\n"
"|`e1 != e2`|`e1.operator_notEquals(e2)`|\n"
"|`e1 === e2`|`e1.operator_tripleEquals(e2)`|\n"
"|`e1 !== e2`|`e1.operator_tripleNotEquals(e2)`|\n"
"|||\n"
"|`e1 < e2`|`e1.operator_lessThan(e2)`|\n"
"|`e1 > e2`|`e1.operator_greaterThan(e2)`|\n"
"|`e1 <= e2`|`e1.operator_lessEqualsThan(e2)`|\n"
"|`e1 >= e2`|`e1.operator_greaterEqualsThan(e2)`|\n"
"|||\n"
"|`e1 -> e2`|`e1.operator_mappedTo(e2)`|\n"
"|`e1 .. e2`|`e1.operator_upTo(e2)`|\n"
"|`e1 >.. e2`|`e1.operator_greaterThanDoubleDot(e2)`|\n"
"|`e1 ..< e2`|`e1.operator_doubleDotLessThan(e2)`|\n"
"|`e1 => e2`|`e1.operator_doubleArrow(e2)`|\n"
"|`e1 << e2`|`e1.operator_doubleLessThan(e2)`|\n"
"|`e1 >> e2`|`e1.operator_doubleGreaterThan(e2)`|\n"
"|`e1 <<< e2`|`e1.operator_tripleLessThan(e2)`|\n"
"|`e1 >>> e2`|`e1.operator_tripleGreaterThan(e2)`|\n"
"|`e1 <> e2`|`e1.operator_diamond(e2)`|\n"
"|`e1 ?: e2`|`e1.operator_elvis(e2)`|\n"
"|`e1 <=> e2`|`e1.operator_spaceship(e2)`|\n"
"|||\n"
"|`e1 + e2`|`e1.operator_plus(e2)`|\n"
"|`e1 - e2`|`e1.operator_minus(e2)`|\n"
"|||\n"
"|`e1 * e2`|`e1.operator_multiply(e2)`|\n"
"|`e1 / e2`|`e1.operator_divide(e2)`|\n"
"|`e1 % e2`|`e1.operator_modulo(e2)`|\n"
"|`e1 ** e2`|`e1.operator_power(e2)`|\n"
"|||\n"
"|`! e1`|`e1.operator_not()`|\n"
"|`- e1`|`e1.operator_minus()`|\n"
"|`+ e1`|`e1.operator_plus()`|"
msgstr ""

msgid ""
"The table above also defines the operator precedence in ascending order. The b"
"lank lines separate precedence levels. The assignment operator `+=` is right-t"
"o-left associative in the same way as the plain assignment operator `=` is. Co"
"nsequently, `a = b = c` is executed as `a = (b = c)`. All other operators are "
"left-to-right associative. Parentheses can be used to adjust the default prece"
"dence and associativity."
msgstr ""

msgid "##### Short-Circuit Boolean Operators"
msgstr ""

msgid ""
"If the operators `||` and `&&` are used in a context where the left hand opera"
"nd is of type boolean, the operation is evaluated in short circuit mode, which"
" means that the right hand operand is not evaluated at all in the following ca"
"ses:"
msgstr ""

msgid ""
"1.  in the case of `||` the operand on the right hand side is not evaluated if"
" the left operand evaluates to `true`.\n"
"1.  in the case of `&&` the operand on the right hand side is not evaluated if"
" the left operand evaluates to `false`."
msgstr ""

msgid ""
"*   `my.foo = 23`\n"
"*   `myList += 23`\n"
"*   `x > 23 && y < 23`\n"
"*   `x && y || z`\n"
"*   `1 + 3 * 5 * (- 23)`\n"
"*   `!(x)`\n"
"*   `my.foo = 23`\n"
"*   `my.foo = 23`"
msgstr ""

msgid "##### Assignment Operators"
msgstr ""

msgid ""
"Compound assignment operators can be used as a shorthand for the assignment of"
" a binary expression."
msgstr ""

msgid ""
"```xtend\n"
"var BigDecimal bd = 45bd\n"
"bd += 12bd // equivalent to bd = bd + 12bd\n"
"bd -= 12bd // equivalent to bd = bd - 12bd\n"
"bd /= 12bd // equivalent to bd = bd / 12bd\n"
"bd *= 12bd // equivalent to bd = bd * 12bd\n"
"```"
msgstr ""

msgid ""
"Compound assignments work automatically if the binary operator is declared. Th"
"e following compound assignment operators are supported:"
msgstr ""

msgid ""
"|:---|:---|\n"
"|`e1 += e2`|`+`|\n"
"|`e1 -= e2`|`-`|\n"
"|`e1 *= e2`|`*`|\n"
"|`e1 /= e2`|`/`|\n"
"|`e1 %= e2`|`%`|"
msgstr ""

msgid "##### Postfix Operators"
msgstr ""

msgid "The two postfix operators `++` and `--` use the following method mapping:"
msgstr ""

msgid ""
"|:---|:---|\n"
"|`e1++`|`e1.operator_plusPlus()`|\n"
"|`e1--`|`e1.operator_minusMinus()`|"
msgstr ""

msgid "##### With Operator"
msgstr ""

msgid ""
"The *with* operator `=>` executes the [lambda expression](#xbase-expressions-l"
"ambda) with a single parameter on the right-hand side with a given argument on"
" its left-hand side. The result is the left operand after applying the lambda "
"expression. In combination with the [implicit parameter](#xbase-expressions-im"
"plicit-parameter)`it` this allows very convenient initialization of newly crea"
"ted objects. Example:"
msgstr ""

msgid ""
"```xbase\n"
"  val person = new Person => [\n"
"    firstName = 'John'\n"
"    lastName = 'Coltrane'\n"
"  ]\n"
"  // equivalent to\n"
"  val person = new Person\n"
"  person.firstName = 'John'\n"
"  person.lastName = 'Coltrane'\n"
"```"
msgstr ""

msgid "#### Assignments {#xbase-expressions-property-assignment}"
msgstr ""

msgid ""
"[Local variables](#xbase-expressions-variable-declaration) can be reassigned u"
"sing the `=` operator. Also properties can be set using that operator: Given t"
"he expression"
msgstr ""

msgid ""
"```xbase\n"
"  myObj.myProperty = \"foo\"\n"
"```"
msgstr ""

msgid ""
"The compiler first looks for an accessible Java Field called `myProperty` on t"
"he declared or inferred type of `myObj`. If such a field can be found, the exp"
"ressions translates to the following Java code:"
msgstr ""

msgid ""
"```java\n"
"  myObj.myProperty = \"foo\";\n"
"```"
msgstr ""

msgid ""
"Remember, in Xbase everything is an expression and has to return something. In"
" the case of simple assignments the return value is the value returned from th"
"e corresponding Java expression, which is the assigned value."
msgstr ""

msgid ""
"If there is no accessible field on the left operand's type, a method called `s"
"etMyProperty(OneArg)` (JavaBeans setter method) is looked up. It has to take o"
"ne argument of the type (or a super type) of the right hand operand. The retur"
"n value of the assignment will be the return value of the setter method (which"
" is usually of type `void` and therefore the value `null`). As a result the co"
"mpiler translates to:"
msgstr ""

msgid ""
"```java\n"
"  myObj.setMyProperty(\"foo\")\n"
"```"
msgstr ""

msgid "#### Feature Calls {#xbase-expressions-feature-calls}"
msgstr ""

msgid ""
"A feature call is used to access members of objects, such as fields and method"
"s, but it can also refer to local variables and parameters, which are made ava"
"ilable by the current expression's scope."
msgstr ""

msgid "##### Property Access {#xbase-expressions-property-access}"
msgstr ""

msgid ""
"Feature calls are directly translated to their Java equivalent with the except"
"ion, that access to properties follows similar rules as described in [the prev"
"ious section](#xbase-expressions-property-assignment). That is, for the expres"
"sion"
msgstr ""

msgid ""
"```xbase\n"
"  myObj.myProperty\n"
"```"
msgstr ""

msgid ""
"the compiler first looks for an accessible field `myProperty` in the type of `"
"myObj`. If no such field exists it tries to find a method called `myProperty()"
"` before it looks for the getter methods `getMyProperty()`. If none of these m"
"embers can be found, the expression is unbound and a compilation error is indi"
"cated."
msgstr ""

msgid "##### Null-Safe Feature Call {#xbase-expressions-null-safe-feature-calls}"
msgstr ""

msgid ""
"Checking for null references can make code very unreadable. In many situations"
" it is ok for an expression to return `null` if a receiver was `null`. Xbase s"
"upports the safe navigation operator `?.` to make such code more readable."
msgstr ""

msgid "Instead of writing"
msgstr ""

msgid ""
"```java\n"
"  if ( myRef != null ) myRef.doStuff()\n"
"```"
msgstr ""

msgid "one can write"
msgstr ""

msgid ""
"```xbase\n"
"  myRef?.doStuff()\n"
"```"
msgstr ""

msgid "##### Static Feature Calls {#xbase-expressions-static-feature-calls}"
msgstr ""

msgid ""
"Static feature calls use the same notation as in Java, e.g. it is possible to "
"write `Collections.emptyList()` in Xbase. To make the static invocation more e"
"xplicit, the double colon can be used as the delimiter. The following snippets"
" are fully equivalent:"
msgstr ""

msgid ""
"```xbase\n"
"   java.util.Collections::emptyList\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"   java.util.Collections.emptyList\n"
"```"
msgstr ""

msgid "#### Implicit variables 'this' and 'it' {#xbase-expressions-implicit-this}"
msgstr ""

msgid ""
"If the current scope contains a variable named `this` or `it`, the compiler wi"
"ll make all its members available implicitly. That is if one of"
msgstr ""

msgid ""
"```xbase\n"
"  it.myProperty\n"
"  this.myProperty\n"
"```"
msgstr ""

msgid "is a valid expression"
msgstr ""

msgid ""
"```xbase\n"
"  myProperty\n"
"```"
msgstr ""

msgid ""
"is valid as well. It resolves to the same feature as long as there is no local"
" variable `myProperty` declared, which would have higher precedence."
msgstr ""

msgid ""
"As `this` is bound to the surrounding object in Java, `it` can be used in fine"
"r-grained constructs such as function parameters. That is why `it.myProperty` "
"has higher precedence than `this.myProperty`. `it` is also the [default parame"
"ter name in lambda expressions](#xbase-expressions-implicit-parameter)."
msgstr ""

msgid "#### Constructor Call {#xbase-expressions-constructor-call}"
msgstr ""

msgid ""
"Construction of objects is done by invoking Java constructors. The syntax is e"
"xactly as in Java."
msgstr ""

msgid "*"
msgstr ""

msgid ""
"    ```xbase\n"
"      new String()\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      new java.util.ArrayList<java.math.BigDecimal>()\n"
"    ```"
msgstr ""

msgid "#### Lambda Expressions {#xbase-expressions-lambda}"
msgstr ""

msgid ""
"A lambda expression is a literal that defines an anonymous function. Xbase' la"
"mbda expressions are allowed to access variables of the declarator. Any final "
"variables and parameters visible at construction time can be referred to in th"
"e lambda expression's body. These expressions are also known as closures."
msgstr ""

msgid "Lambda expressions are surrounded by square brackets (\\`[]`):"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst([ e | e.name==null ])\n"
"```"
msgstr ""

msgid ""
"When a function object is expected to be the last parameter of a feature call,"
" you may declare the lambda expression after the parentheses:"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst() [ e | e.name==null ]\n"
"```"
msgstr ""

msgid ""
"Since in Xbase parentheses are optional for method calls, the same can be writ"
"ten as:"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst[ e | e.name==null ]\n"
"```"
msgstr ""

msgid ""
"This example can be further simplified since the lambda's parameter is availab"
"le as the implicit variable `it`, if the parameter is not declared explicitly:"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst[ it.name==null ]\n"
"```"
msgstr ""

msgid "Since `it` is implicit, this is the same as:"
msgstr ""

msgid ""
"```xbase\n"
"  myList.findFirst[ name==null ]\n"
"```"
msgstr ""

msgid ""
"Another use case for lambda expressions is to store function objects in variab"
"les:"
msgstr ""

msgid ""
"```xbase\n"
"  val func = [ String s | s.length>3 ]\n"
"```"
msgstr ""

msgid "##### Typing {#xbase-expressions-lambda-type-inference}"
msgstr ""

msgid ""
"Lambda expressions produce function objects. The type is a [function type](#xb"
"ase-types-function-types), parameterized with the types of the lambda's parame"
"ters as well as the return type. The return type is never specified explicitly"
" but is always inferred from the expression. The parameter types can be inferr"
"ed if the lambda expression is used in a context where this is possible."
msgstr ""

msgid "For instance, given the following Java method signature:"
msgstr ""

msgid ""
"```java\n"
"  public T <T>getFirst(List<T> list, Function0<T,Boolean> predicate)\n"
"```"
msgstr ""

msgid "the type of the parameter can be inferred. Which allows users to write:"
msgstr ""

msgid ""
"```xbase\n"
"  newArrayList( \"Foo\", \"Bar\" ).findFirst[ e | e == \"Bar\" ]\n"
"```"
msgstr ""

msgid "instead of"
msgstr ""

msgid ""
"```xbase\n"
"  newArrayList( \"Foo\", \"Bar\" ).findFirst[ String e | e == \"Bar\" ]\n"
"```"
msgstr ""

msgid "##### Function Mapping {#xbase-expressions-function-mapping}"
msgstr ""

msgid ""
"An Xbase lambda expression is a Java object of one of the *Function* interface"
"s that are part of the runtime library of Xbase. There is an interface for eac"
"h number of parameters (up to six parameters). The names of the interfaces are"
msgstr ""

msgid ""
"*   [Function0\\<ReturnType\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.l"
"ib/src/org/eclipse/xtext/xbase/lib/Functions.java) for zero parameters,\n"
"*   [Function1\\<Param1Type, ReturnType\\>]({{site.src.xtext_lib}}/org.eclipse.x"
"text.xbase.lib/src/org/eclipse/xtext/xbase/lib/Functions.java) for one paramet"
"ers,\n"
"*   [Function2\\<Param1Type, Param2Type, ReturnType\\>]({{site.src.xtext_lib}}/o"
"rg.eclipse.xtext.xbase.lib/src/org/eclipse/xtext/xbase/lib/Functions.java) for"
" two parameters,\n"
"*   ... \n"
"*   [Function6\\<Param1Type, Param2Type, Param3Type, Param4Type, Param5Type, Pa"
"ram6Type, ReturnType\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src"
"/org/eclipse/xtext/xbase/lib/Functions.java) for six parameters,"
msgstr ""

msgid "or"
msgstr ""

msgid ""
"*   [Procedure0]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/ec"
"lipse/xtext/xbase/lib/Procedures.java) for zero parameters,\n"
"*   [Procedure1\\<Param1Type\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase."
"lib/src/org/eclipse/xtext/xbase/lib/Procedures.java) for one parameters,\n"
"*   [Procedure2\\<Param1Type, Param2Type\\>]({{site.src.xtext_lib}}/org.eclipse."
"xtext.xbase.lib/src/org/eclipse/xtext/xbase/lib/Procedures.java) for two param"
"eters,\n"
"*   ... \n"
"*   [Procedure6\\<Param1Type, Param2Type, Param3Type, Param4Type, Param5Type, P"
"aram6Type\\>]({{site.src.xtext_lib}}/org.eclipse.xtext.xbase.lib/src/org/eclips"
"e/xtext/xbase/lib/Procedures.java) for six parameters,"
msgstr ""

msgid "if the return type is `void`."
msgstr ""

msgid ""
"In order to allow seamless integration with existing Java libraries such as th"
"e JDK or Google Guava (formerly known as Google Collect) lambda expressions ar"
"e auto coerced to expected types if those types declare only one abstract meth"
"od (methods from `java.lang.Object` don't count)."
msgstr ""

msgid ""
"As a result given the method [Collections.sort(List\\<T\\>, Comparator\\<? super "
"T\\>)]({{site.javadoc.java}}/java/util/Collections.html) is available as an ext"
"ension method, it can be invoked like this"
msgstr ""

msgid ""
"```xbase\n"
"newArrayList( 'aaa', 'bb', 'c' ).sort [\n"
"  e1, e2 | if ( e1.length > e2.length ) {\n"
"        -1 \n"
"       } else if ( e1.length < e2.length ) { \n"
"        1\n"
"       } else { \n"
"        0\n"
"       }\n"
"]\n"
"```"
msgstr ""

msgid "##### Implicit Parameter *it* {#xbase-expressions-implicit-parameter}"
msgstr ""

msgid ""
"If a lambda expression has a single parameter whose type can be inferred, the "
"declaration of the parameter can be omitted. Use `it` to refer to the paramete"
"r inside the lambda expression's body."
msgstr ""

msgid ""
"```xbase\n"
"val (String s)=>String function = [ toUpperCase ]\n"
"  // equivalent to [it |Â it.toUpperCase]\n"
"```"
msgstr ""

msgid ""
"*   `[ | \"foo\" ]   // lambda expression without parameters`\n"
"*   `[ String s | s.toUpperCase() ] // explicit argument type`\n"
"*   `[ a, b, c | a+b+c ] // inferred argument types`"
msgstr ""

msgid "##### Refering the current function {#xbase-lambda-self}"
msgstr ""

msgid ""
"If a lambda expression implements an abstract SAM type that offers additional "
"methods, those can be accessed on the receiver `self`:"
msgstr ""

msgid ""
"```xbase\n"
"val AbstractIterator<String> emptyIterator = [\n"
"\treturn self.endOfData\n"
"]\n"
"```"
msgstr ""

msgid "#### If Expression {#xbase-expressions-if-expression}"
msgstr ""

msgid ""
"An if expression is used to choose two different values based on a predicate. "
"While it has the syntax of Java's if statement it behaves like Java's ternary "
"operator (`predicate ? thenPart : elsePart`), i.e. it is an expression that re"
"turns a value. Consequently, you can use if expressions deeply nested within o"
"ther expressions."
msgstr ""

msgid ""
"An expression `if (p) e1 else e2` results in either the value `e1` or `e2` dep"
"ending on whether the predicate `p` evaluates to `true` or `false`. The else p"
"art is optional which is a shorthand for a default value, e.g `else null` if t"
"he type of the `if` expression is a reference type. If the type is a primitive"
" type, its default value is assumed accordingly, e.g. `else false` for `boolea"
"n` or `else 1` for numbers."
msgstr ""

msgid "That means"
msgstr ""

msgid ""
"```xbase\n"
"  if (foo) x\n"
"```"
msgstr ""

msgid "is the a short hand for"
msgstr ""

msgid ""
"```xbase\n"
"  if (foo) x else null\n"
"```"
msgstr ""

msgid "##### Typing {#xbase-expressions-if-type-inference}"
msgstr ""

msgid ""
"The type of an `if` expression is calculated from the types `T1` and `T2` of t"
"he two expressions `e1` and `e2`. It uses the rules defined in the [common sup"
"er types](#xbase-types-common-super-type) section, if an explicit `else` branc"
"h is given. If it is ommitted, the type of the `if` expression is the type `T`"
" of the expression `e` of the form `if (b) e`."
msgstr ""

msgid ""
"*   `if (isFoo) this else that`\n"
"*   `if (isFoo) { this } else if (thatFoo) { that } else { other }`\n"
"*   `if (isFoo) this`"
msgstr ""

msgid "#### Switch Expression {#xbase-expressions-switch-expression}"
msgstr ""

msgid ""
"The switch expression is a bit different from Java's, as the use of switch is "
"not limited to certain values but can be used for any object reference instead"
". For a switch expression"
msgstr ""

msgid ""
"```xbase\n"
"switch e {\n"
"  case e1 : er1\n"
"  case e2 : er2\n"
"  ...\n"
"  case en : ern\n"
"  default : er\n"
"}\n"
"```"
msgstr ""

msgid ""
"the main expression `e` is evaluated first and then each case sequentially. If"
" the switch expression contains a variable declaration using the syntax known "
"from [for loops](#xbase-expressions-for-loop), the value is bound to the given"
" name. Expressions of type [Boolean]({{site.javadoc.java}}/java/lang/Boolean.h"
"tml) or `boolean` are not allowed in a switch expression."
msgstr ""

msgid ""
"The guard of each case clause is evaluated until the switch value equals the r"
"esult of the case's guard expression or if the case's guard expression evaluat"
"es to `true`. Then the right hand expression of the case evaluated and the res"
"ult is returned."
msgstr ""

msgid ""
"If none of the guards matches the default expression is evaluated and returned"
". If no default expression is specified the expression evaluates to the defaul"
"t value of the common type of all available case expressions."
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
"```xbase\n"
"switch myString {\n"
"  case myString.length>5 : 'a long string.'\n"
"  case 'foo' : \"It's a foo.\"\n"
"  default : \"It's a short non-foo string.\"\n"
"}\n"
"```"
msgstr ""

msgid "##### Type guards"
msgstr ""

msgid ""
"In addition to the case guards one can add a so called *Type Guard* which is s"
"yntactically just a [type reference](#xbase-types-type-references) preceding t"
"he optional case keyword. The compiler will use that type for the switch expre"
"ssion in subsequent expressions. Example:"
msgstr ""

msgid ""
"```xbase\n"
"var Object x = ...;\n"
"switch x {\n"
"  String case x.length()>0 : x.length()\n"
"  List<?> : x.size()\n"
"  default : -1\n"
"}\n"
"```"
msgstr ""

msgid ""
"Only if the switch value passes a type guard, i.e. an `instanceof` test succee"
"ds, the case's guard expression is executed using the same semantics as explai"
"ned above. If the switch expression contains an explicit declaration of a loca"
"l variable or the expression references a local variable, the type guard works"
" like an automated cast. All subsequent references to the switch value will be"
" of the type specified in the type guard, unless it is reassigned to a new val"
"ue."
msgstr ""

msgid "##### Fall Through"
msgstr ""

msgid ""
"One can have multiple *type guards* and *cases* separated with a comma, to hav"
"e all of them share the same *then-expression*."
msgstr ""

msgid ""
"```xtend\n"
"  def isMale(String salutation) {\n"
"    switch salutation {\n"
"      case \"Mr.\", \n"
"      case \"Sir\" : true\n"
"      default : false\n"
"    }\n"
"  }\n"
"```"
msgstr ""

msgid "##### Typing"
msgstr ""

msgid ""
"The type of a switch expression is computed using the rules defined in the sec"
"tion on [common super types](#xbase-types-common-super-type). The set of types"
" from which the common super type is computed corresponds to the types of each"
" case expression."
msgstr ""

msgid ""
"    ```xbase\n"
"      switch foo {\n"
"        Entity : foo.superType.name\n"
"        Datatype : foo.name\n"
"        default : throw new IllegalStateException\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      switch x : foo.bar.complicated('hello', 42) {\n"
"        case \"hello42\" : ...\n"
"        case x.length<2 : ...\n"
"        default : ...\n"
"      }\n"
"    ```"
msgstr ""

msgid "#### Variable Declarations {#xbase-expressions-variable-declaration}"
msgstr ""

msgid ""
"Variable declarations are only allowed within [blocks](#xbase-expressions-bloc"
"ks). They are visible in any subsequent expressions in the block. Generally, o"
"verriding or shadowing variables from outer scopes is not allowed. However, it"
" can be used to overload the [implicit variable](#xbase-expressions-implicit-t"
"his) `it`, in order to subsequently access an object's features in an unqualif"
"ied manner."
msgstr ""

msgid ""
"A variable declaration starting with the keyword `val` denotes an unchangeable"
" value, which is essentially a final variable. In rare cases, one needs to upd"
"ate the value of a reference. In such situations the variable needs to be decl"
"ared with the keyword `var`, which stands for variable."
msgstr ""

msgid "A typical example for using `var` is a counter in a loop."
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  val max = 100\n"
"  var i = 0\n"
"  while (i > max) {\n"
"    println(\"Hi there!\")\n"
"    i = i +1\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Variables declared outside a lambda expression using the `var` keyword are not"
" accessible from the lambda expression."
msgstr ""

msgid ""
"The type of a variable declaration expression is always `void`. The type of th"
"e variable itself can either be explicitly declared or be inferred from the ri"
"ght hand side expression. Here is an example for an explicitly declared type:"
msgstr ""

msgid ""
"```xbase\n"
"  var List<String> strings = new ArrayList<String>(); \n"
"```"
msgstr ""

msgid ""
"In such cases, the right hand expression's type must [conform](#xbase-types-co"
"nformance-rules) to the type on the left hand side."
msgstr ""

msgid ""
"Alternatively the type can be left out and will be inferred from the initializ"
"ation expression:"
msgstr ""

msgid ""
"```xbase\n"
"  var strings = new ArrayList<String> // -> strings is of type ArrayList<Strin"
"g>\n"
"```"
msgstr ""

msgid "#### Blocks {#xbase-expressions-blocks}"
msgstr ""

msgid ""
"The block expression allows to have imperative code sequences. It consists of "
"a sequence of expressions, and returns the value of the last expression. The t"
"ype of a block is also the type of the last expression. Empty blocks return `n"
"ull`. [Variable declarations](#xbase-expressions-variable-declaration) are onl"
"y allowed within blocks and cannot be used as a block's last expression."
msgstr ""

msgid ""
"A block expression is surrounded by curly braces and contains at least one exp"
"ression. It can optionally be terminated by a semicolon."
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  doSideEffect(\"foo\")\n"
"  result\n"
"}\n"
"```"
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  var x = greeting();\n"
"  if (x.equals(\"Hello \")) {\n"
"    x+\"World!\"; \n"
"  } else {\n"
"    x;\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid "#### For Loop {#xbase-expressions-for-loop}"
msgstr ""

msgid ""
"The for loop `for (T1 variable : iterableOfT1) expression` is used to execute "
"a certain expression for each element of an array of an instance of [Iterable]"
"({{site.javadoc.java}}/java/lang/Iterable.html). The local `variable` is final"
", hence cannot be updated."
msgstr ""

msgid ""
"The type of a for loop is `void`. The type of the local variable can optionall"
"y be inferred from the type of the array or the element type of the [Iterable]"
"({{site.javadoc.java}}/java/lang/Iterable.html) returned by the iterable expre"
"ssion."
msgstr ""

msgid ""
"    ```xbase\n"
"      for (String s : myStrings) {\n"
"        doSideEffect(s);\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      for (s : myStrings)\n"
"        doSideEffect(s)\n"
"    ```"
msgstr ""

msgid "#### Basic For Loop {#xbase-expressions-basic-for-loop}"
msgstr ""

msgid ""
"The traditional for loop is very similar to the one known from Java, or even C"
"."
msgstr ""

msgid ""
"```xtend\n"
"  for (<init-expression> ;  <predicate> ; <update-expression>) body-expression"
"\n"
"```"
msgstr ""

msgid ""
"When executed, it first executes the `init-expression`, where local variables "
"can be declared. Next the `predicate` is executed and if it evaluates to `true"
"`, the `body-expression` is executed. On any subsequent iterations the `update"
"-expression` is executed instead of the init-expression. This happens until th"
"e `predicate` returns `false`."
msgstr ""

msgid "The type of a for loop is `void`."
msgstr ""

msgid ""
"```xtend\n"
"  for (val i = 0 ; i < s.length ; i++) {\n"
"    println(s.subString(0,i)\n"
"  }\n"
"```"
msgstr ""

msgid "#### While Loop {#xbase-expressions-while-expression}"
msgstr ""

msgid ""
"A while loop `while (predicate) expression` is used to execute a certain expre"
"ssion unless the predicate is evaluated to `false`. The type of a while loop i"
"s `void`."
msgstr ""

msgid ""
"    ```xbase\n"
"      while (true) {\n"
"        doSideEffect(\"foo\");\n"
"      }\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      while ( ( i = i + 1 ) < max ) \n"
"        doSideEffect( \"foo\" )\n"
"    ```"
msgstr ""

msgid "#### Do-While Loop {#xbase-expressions-do-while-expression}"
msgstr ""

msgid ""
"A do-while loop `do expression while (predicate)` is used to execute a certain"
" expression until the predicate is evaluated to `false`. The difference to the"
" [while loop](#xbase-expressions-while-expression) is that the execution start"
"s by executing the block once before evaluating the predicate for the first ti"
"me. The type of a do-while loop is `void`."
msgstr ""

msgid ""
"    ```xbase\n"
"      do {\n"
"        doSideEffect(\"foo\");\n"
"      } while (true)\n"
"    ```"
msgstr ""

msgid ""
"    ```xbase\n"
"      do doSideEffect(\"foo\") while ((i=i+1)<max)\n"
"    ```"
msgstr ""

msgid "#### Return Expression {#xbase-expressions-return}"
msgstr ""

msgid ""
"Although an explicit return is often not necessary, it is supported. In a lamb"
"da expression for instance a return expression is always implied if the expres"
"sion itself is not of type `void`. Anyway you can make it explicit:"
msgstr ""

msgid ""
"```xbase\n"
"  listOfStrings.map [ e |\n"
"    if (e==null) \n"
"      return \"NULL\"\n"
"    e.toUpperCase\n"
"  ]\n"
"```"
msgstr ""

msgid "#### Throwing Exceptions {#xbase-expressions-throw}"
msgstr ""

msgid ""
"It is possible to throw [Throwable]({{site.javadoc.java}}/java/lang/Throwable."
"html). The syntax is exactly the same as in Java."
msgstr ""

msgid ""
"```xbase\n"
"{\n"
"  ...\n"
"  if (myList.isEmpty)\n"
"    throw new IllegalArgumentException(\"the list must not be empty\")\n"
"  ...\n"
"}   \n"
"```"
msgstr ""

msgid "#### Try, Catch, Finally {#xbase-expressions-try-catch}"
msgstr ""

msgid ""
"The try-catch-finally expression is used to handle exceptional situations. You"
" are not forced to declare checked exceptions. If you don't catch checked exce"
"ptions, they are thrown in a way the compiler does not complain about a missin"
"g throws clause, using the sneaky-throw technique introduced by [Lombok](http:"
"//projectlombok.org/features/SneakyThrows.html)."
msgstr ""

msgid ""
"```xbase\n"
"  try {\n"
"    throw new RuntimeException()\n"
"  } catch (NullPointerException e) {\n"
"    // handle e\n"
"  } finally {\n"
"    // do stuff\n"
"  }\n"
"```"
msgstr ""

msgid "#### Synchronized {#xbase-expressions-synchronized}"
msgstr ""

msgid ""
"The synchonized expression does the same as it does in Java (see [Java Languag"
"e Specification](http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#"
"jls-14.19)). The only difference is that in Xbase it is an expression and can "
"therefore be used at more places."
msgstr ""

msgid ""
"```xtend\n"
"  synchronized(lock) {\n"
"    println(\"Hello\")\n"
"  }\n"
"```"
msgstr ""

msgid ""
"```xtend\n"
"  val name = synchronized(lock) { \n"
"    doStuff() \n"
"  }\n"
"```"
msgstr ""

msgid "### Extension Methods {#xbase-language-ref-library-extension}"
msgstr ""

msgid ""
"Languages extending Xbase might want to contribute to the feature scope. Besid"
"es that, one can of course change the whole implementation as it seems fit. Th"
"ere is a special hook, which can be used to add so-called extension methods to"
" existing types."
msgstr ""

msgid ""
"Xbase itself comes with a standard library of such extension methods adding su"
"pport for various operators for the common types, such as [String]({{site.java"
"doc.java}}/java/lang/String.html), [List]({{site.javadoc.java}}/java/util/List"
".html), etc."
msgstr ""

msgid ""
"These extension methods are declared in separate Java classes. There are vario"
"us ways how extension methods can be added. In the simplest case the language "
"designer predefines which extension methods are available. Language users cann"
"ot add additional library functions using this mechanism."
msgstr ""

msgid ""
"Another alternative is to have them looked up by a certain naming convention. "
"Also for more general languages it is possible to let users add extension meth"
"ods using imports or similar mechanisms. This approach can be seen in the lang"
"uage [Xtend](https://www.eclipse.org/xtend/), where extension methods are lexi"
"cally imported through static imports or dependency injection."
msgstr ""

msgid ""
"The precedence of extension methods is always lower than real member methods, "
"i.e. you cannot override member features. Also the extension methods are not i"
"nvoked polymorphic. If you have two extension methods on the scope (`foo(Objec"
"t)` and `foo(String)`) the expression `(foo as Object).foo` would bind and inv"
"oke `foo(Object)`."
msgstr ""

msgid "#### Examples"
msgstr ""

msgid ""
"*   `foo`\n"
"*   `my.foo`\n"
"*   `my.foo(x)`\n"
"*   `oh.my.foo(bar)`"
msgstr ""

msgid "#### Builder Syntax {#xbase-language-ref-builder-syntax}"
msgstr ""

msgid ""
"If the last argument of a method call is a lambda expression, it can be append"
"ed to the method call. Thus,"
msgstr ""

msgid ""
"```xbase\n"
"foo(42) [ String s | s.toUpperCase ]\n"
"```"
msgstr ""

msgid "will call a Java method with the signature"
msgstr ""

msgid ""
"```java\n"
"void foo(int, Function1<String, String>)\n"
"```"
msgstr ""

msgid ""
"Used in combination with the [implicit parameter name in lambda expressions](#"
"xbase-expressions-implicit-parameter) you can write [extension libraries](#xba"
"se-language-ref-library-extension) to create and initialize graphs of objects "
"in a concise builder syntax like in Groovy. Consider you have a set of library"
" methods"
msgstr ""

msgid ""
"```java\n"
"HtmlNode html(Function1<HtmlNode, Void> initializer)\n"
"HeadNode head(HtmlNode parent, Function1<HeadNode, Void> initializer)\n"
"...\n"
"```"
msgstr ""

msgid ""
"that create DOM elements for HTML pages inside their respective parent element"
"s. You can then create a DOM using the following Xbase code:"
msgstr ""

msgid ""
"```xbase\n"
"html([ html |\n"
"  head(html, [ \n"
"    // initialize head\n"
"  ]) \n"
"] )\n"
"```"
msgstr ""

msgid ""
"Appending the lambda expression parameters and prepending the parent parameter"
"s using extension syntax yields"
msgstr ""

msgid ""
"```xbase\n"
"html() [ html |\n"
"  html.head() [ \n"
"    // initialize head\n"
"  ]  \n"
"] \n"
"```"
msgstr ""

msgid ""
"Using implicit parameter `it` and skipping empty parentheses you can simplify "
"this to"
msgstr ""

msgid ""
"```xbase\n"
"html [ \n"
"  head [ \n"
"    // initialize head\n"
"  ]  \n"
"] \n"
"```"
msgstr ""

msgid ""
"**[Next Chapter: Typical Language Configurations](307_special_languages.html)*"
"*"
msgstr ""
