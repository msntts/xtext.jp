msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: documentation\n"
"title: The Grammar Language\n"
"part: Reference Documentation\n"
"---"
msgstr ""
"---\n"
"layout: documentation\n"
"title: 文法言語\n"
"part: リファレンスドキュメント\n"
"---"

msgid "# {{page.title}} {#grammarLanguage}"
msgstr "# {{page.title}} {#grammarLanguage}"

msgid ""
"The [grammar language]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclip"
"se/xtext/Xtext.xtext) is the corner stone of Xtext. It is a domain-specific la"
"nguage, carefully designed for the description of textual languages. The main "
"idea is to describe the concrete syntax and how it is mapped to an in-memory r"
"epresentation &ndash; the semantic model. This model will be created by the pa"
"rser on-the-fly when it consumes an input file. Of course the Xtext grammar la"
"nguage itself is implemented with Xtext, so you will find parts of its syntax "
"described with its own means in this documentation."
msgstr ""
"[文法言語]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/Xtext.x"
"text)はXtextの基礎であり、テキスト言語の記述のために注意深く設計されたドメイン固有言語です。主な目的は、具象的な構文とメモリ内表現(つまり意味モデ"
"ル)がどのようにマッピングされるかを記述することです。このモデルはファイル入力を受けると即座にパーサーによって生成されます。もちろん、Xtext文法言語その"
"ものがXtextによって実装されているので、このドキュメント内に構文の説明を見つけることができます。"

msgid ""
"An example grammar is shown in the [15 Minutes Tutorial](102_domainmodelwalkth"
"rough.html#write-your-own-grammar)"
msgstr ""
"文法の例は [15分チュートリアル](102_domainmodelwalkthrough.html#write-your-own-grammar)で確認す"
"ることができます。"

msgid "## The Syntax {#syntax}"
msgstr "## 構文 {#syntax}"

msgid ""
"In the following the different concepts and syntactical constructs of the gram"
"mar language are explained."
msgstr "以下に、複数の概念と文法言語の構文構造を説明します。"

msgid "### Language Declaration"
msgstr "### 言語宣言"

msgid ""
"Each Xtext grammar starts with a header that defines some properties of the gr"
"ammar."
msgstr "各Xtext文法は文法の特徴を定義したヘッダーから開始します。"

msgid ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel\n"
"        with org.eclipse.xtext.common.Terminals\n"
"```"
msgstr ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel\n"
"        with org.eclipse.xtext.common.Terminals\n"
"```"

msgid ""
"The first line declares the name of the language. Xtext leverages Java's class"
" path mechanism. This means that the name can be any valid Java qualifier. The"
" grammar file name needs to correspond to the language name and have the file "
"extension `.xtext`. This means that the name has to be e.g. *Domainmodel.xtext"
"* and must be placed in a package *org.example.domainmodel* on your project's "
"class path. In other words, your `.xtext` file has to reside in a Java source "
"folder to be valid."
msgstr ""
"最初の行は言語の名前を宣言しています。XtextはJavaのクラスパスメカニズムを利用しています。これは、名前にJavaの有効な修飾子を利用できるということ"
"を意味しています。文法ファイル名は言語名と拡張子`.xtext`がそれぞれ必要です。例えば、ファイル *Domainmodel.xtext* は、プロジェク"
"トクラスパス内のパッケージ *org.example.domainmodel* に配置されるべきであることを意味しています。言い換えると、`.xtext`フ"
"ァイルは、Javaソースフォルダとして有効な場所に存在すべきということです。"

msgid ""
"The second aspect that can be deduced from the first line of the grammar is it"
"s relationship to other languages. An Xtext grammar can declare another existi"
"ng grammar to be reused. The mechanism is called [grammar mixin](301_grammarla"
"nguage.html#grammar-mixins)."
msgstr ""
"最初の行から推測できる2つ目の側面は、他の言語との関連です。Xtext文法は既存の文法を再利用するための宣言が可能であり、このメカニズムは [文法ミックスイ"
"ン](301_grammarlanguage.html#grammar-mixins) と呼ばれています。"

msgid "### EPackage Declarations {#package-declarations}"
msgstr "### EPackage 宣言 {#package-declarations}"

msgid ""
"Xtext parsers create in-memory object graphs while consuming text. Such object"
"-graphs are instances of [EMF](https://www.eclipse.org/modeling/emf/) Ecore mo"
"dels. An Ecore model basically consists of an EPackage containing EClasses, ED"
"ataTypes and EEnums (see the [section on EMF](308_emf_integration.html#model-m"
"etamodel) for more details) and describes the structure of the instantiated ob"
"jects. Xtext can infer Ecore models from a grammar (see [Ecore model inference"
"](301_grammarlanguage.html#metamodel-inference)) but it is also possible to im"
"port existing Ecore models. You can even mix both approaches and use multiple "
"existing Ecore models and infer some others from a single grammar. This allows"
" for easy reuse of existing abstractions while still having the advantage of s"
"hort turnarounds with derived Ecore models."
msgstr ""
"Xtextパーサーはテキストからメモリ内オブジェクトグラフを生成します。オブジェクトグラフは [EMF](https://www.eclipse.org/m"
"odeling/emf/) Ecoreモデルのインスタンスです。Ecoreモデルは基本的にEPckageに含まれるEClaases、EDataTypesとE"
"Enums (詳細は [EMF節](308_emf_integration.html#model-metamodel)を参照) と、インスタンス化されたオブ"
"ジェクトの構造を示しています。Xtextは文法([Ecoreモデル推論](301_grammarlanguage.html#metamodel-infere"
"nce))からEcoreモデルを類推できるが、既存のEcoreモデルをインポートすることも可能です。我々は、複数の既存のEcoreモデルを使用するアプローチ"
"と単一文法から他を推論するアプローチの両方をとることができます。これにより、既存の抽象化の再利用を容易にすると同時に、派生したEcoreモデルを用いた短いタ"
"ーンアラウンドの利点を得ることができます。"

msgid "#### EPackage Generation"
msgstr "#### EPackage 生成"

msgid ""
"The easiest way to get started is to let Xtext infer the Ecore model from your"
" grammar. The `generate` declaration in the grammar advises the framework to d"
"o so:"
msgstr "最も簡単な開始方法は、あなたの文法からEcoreモデルをXtextに推論させることです。文法中の`生成`宣言はフレームワークに推論するよう通知します。"

msgid ""
"```xtext\n"
"generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\"\n"
"```"
msgstr ""
"```xtext\n"
"generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\"\n"
"```"

msgid ""
"That statement could actually be read as: generate an [EPackage]({{site.src.em"
"f}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPackage.java) wit"
"h the *name* `domainmodel` and the *nsURI* `\"http://www.example.org/domainmode"
"l/Domainmodel\"`. Xtext will then add [EClasses]({{site.src.emf}}/plugins/org.e"
"clipse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java) with [EAttributes]({{s"
"ite.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribu"
"te.java) and [EReferences]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/"
"org/eclipse/emf/ecore/EReference.java) for the different parser rules in your "
"grammar, as described in [Ecore model inference](301_grammarlanguage.html#meta"
"model-inference)."
msgstr ""
"この命令文は実際には次のように解釈されます:　*名前* `domainmodel`、*nsURI*  `\"http://www.example.org/do"
"mainmodel/Domainmodel\"` で、[EPackage]({{site.src.emf}}/plugins/org.eclipse.emf."
"ecore/src/org/eclipse/emf/ecore/EPackage.java)を生成する。Xtextは[Ecore model inferen"
"ce](301_grammarlanguage.html#metamodel-inference)に記述されている文法内の複数のパーサールールに対して、[E"
"Classes]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ec"
"ore/EClass.java)と[EReferences]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/"
"src/org/eclipse/emf/ecore/EReference.java)を含む[EAttributes]({{site.src.emf}}/pl"
"ugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EAttribute.java)を追加します。"

msgid "#### EPackage Import {#epackage-import}"
msgstr "#### EPackage インポート {#epackage-import}"

msgid ""
"If you already have an existing EPackage, you can import it using its namespac"
"e URI:"
msgstr "すでにEPackageを持っている場合、ネームスペースURIを用いることでインポートすることができます:"

msgid ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\"\n"
"```"
msgstr ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\"\n"
"```"

msgid ""
"A [URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/eclipse/emf/co"
"mmon/util/URI.java) (Uniform Resource Identifier) provides a simple and extens"
"ible means for identifying an abstract or physical resource. It is also possib"
"le to import EPackages using resource URIs, but it is strongly recommended to "
"use the namespace URI instead because it is independent from the concrete loca"
"tion in the file system, much more portable across different machines, easier "
"to configure in the workflow, and works better with language mixins. The impor"
"t via platform URIs or file URIs can be considered deprecated and is only supp"
"orted for backwards compatibility."
msgstr ""
"[URI]({{site.src.emf}}/plugins/org.eclipse.emf.common/src/org/eclipse/emf/comm"
"on/util/URI.java) (Uniform Resource Identifier)は、抽象もしくは物理的なリソースを特定するための拡張可能かつシ"
"ンプルな手段を提供します。リソースURIを用いてEPackageをインポートすることも可能だが、ネームスペースURIを用いることを強く進めます。なぜなら、ネ"
"ームスペースURIはファイルシステムの具体的な位置から独立しているため、他のマシーンへの移植やワークフローの構築がやりやすく、そして言語のミックスインがより"
"よく動作します。プラットフォームURIもしくはファイルURI経由のインポートは非推奨とみなされ、下位互換性のためだけにサポートされます。"

msgid ""
"Using package imports usually requires some [adaptations in the generator work"
"flow](302_configuration.html#importing-metamodels)."
msgstr ""
"パッケージインポートは通常、いくらかの[生成ワークフローへの適応](302_configuration.html#importing-metamodels)"
" が必要です。"

msgid "#### Ecore Model Aliases for EPackages"
msgstr "#### EPackageのためのEcoreモデル エイリアス"

msgid ""
"If you want to use multiple EPackages you need to specify aliases in the follo"
"wing way:"
msgstr "もし複数のEPackageを使用するのであれば、次の方法でエイリアスを指定する必要があります:"

msgid ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\" as dmodel\n"
"import 'http://www.eclipse.org/anotherPackage' as another\n"
"```"
msgstr ""
"```xtext\n"
"import \"http://www.xtext.org/example/Domainmodel\" as dmodel\n"
"import 'http://www.eclipse.org/anotherPackage' as another\n"
"```"

msgid ""
"When referring to a type somewhere in the grammar you need to qualify the refe"
"rence using that alias (e.g. `another::SomeType`). Cases where such type refer"
"ences occur are explained below."
msgstr ""
"文法内で型を参照する場合、エイリアスを使って参照を修飾する必要があります。(例`another::SomeType`)以下にこのような型の参照が起こる箇所を"
"説明します。"

msgid ""
"It is also supported to put multiple EPackage imports into one alias. This is "
"no problem as long as there are not any two [EClassifiers]({{site.src.emf}}/pl"
"ugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.java) with t"
"he same name. In that case none of them can be referenced. It is even possible"
" to `import` multiple and `generate` one Ecore model and declare all of them w"
"ith the same alias. If you do so, for a reference to an [EClassifier]({{site.s"
"rc.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.j"
"ava) first the imported [EPackages]({{site.src.emf}}/plugins/org.eclipse.emf.e"
"core/src/org/eclipse/emf/ecore/EPackage.java) are scanned before it is assumed"
" that a type needs to be generated into the inferred package."
msgstr ""
"複数のEPckageインポートを1つのエイリアスに入れることもサポートされています。これは、[EClassifiers]({{site.src.emf}}/"
"plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.java)に同じ名前"
"のものが2つない限り問題ありません。同じ名前のものが存在する場合、どれも参照できません。複数のEcoreモデルを`import`し、1つのEcoreモデルを"
"`generate`し、そしてそれら全てを同じエイリアスを用いて宣言することも可能です。その場合、[EClassifier]({{site.src.emf}"
"}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClassifier.java)を参照"
"するため、最初にインポートされた[EPackages]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src"
"/org/eclipse/emf/ecore/EPackage.java)がスキャンされ、その後、推測されたパッケージから型を生成する必要があるとみなされま"
"す。"

msgid ""
"Note that using the same alias for multiple EPackages is not recommended, beca"
"use it might cause problems that are hard to track down. For instance, a refer"
"ence to `classA` could mistakenly be linked to a newly created EClass instead "
"of an existing EClass `ClassA` because the latter is written with a capital le"
"tter."
msgstr ""
"複数のEPackageに対して同じエイリアスをつけることは追跡が困難である問題を引き起こすため非推奨です。例えば、`classA`への参照は既存のEClas"
"s `ClassA`が大文字で書かれているため、既存のEClass `ClassA`ではなく、新規に作成したEClassに誤ってリンクされることがあります。"

msgid "### Terminal Rules {#terminal-rules}"
msgstr "### 終端ルール {#terminal-rules}"

msgid "Basically parsing can be separated in the following phases:"
msgstr "基本的に、パースは以下のフェーズに分割することができます:"

msgid ""
"1.  Lexing\n"
"1.  Parsing\n"
"1.  Linking\n"
"1.  Validation"
msgstr ""
"1.  字句解析\n"
"1.  パース\n"
"1.  リンク\n"
"1.  検証"

msgid ""
"In the first stage called *lexing*, a sequence of characters (the text input) "
"is transformed into a sequence of so-called *tokens*. In this context, a token"
" is a sort of a strongly typed part or region of the input sequence. It consis"
"ts of one or more characters and is matched by a particular terminal rule or k"
"eyword and therefore represents an atomic symbol. Terminal rules are also refe"
"rred to as *token rules* or *lexer rules*. There is an informal naming convent"
"ion that names of terminal rules are all upper-case."
msgstr ""

msgid ""
"In the [domainmodel tutorial](102_domainmodelwalkthrough.html) there are no ex"
"plicitly defined terminal rules, since it only uses the *ID* rule which is inh"
"erited from the grammar `org.eclipse.xtext.common.Terminals` (see [Common Term"
"inals](#common-terminals)). Therein the *ID* rule is defined as follows:"
msgstr ""

msgid ""
"```xtext\n"
"terminal ID: \n"
"    ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;\n"
"```"
msgstr ""

msgid ""
"It says that a token *ID* starts with an optional `'^'` character (caret), fol"
"lowed by a letter `('a'..'z'|'A'..'Z')` or underscore `'_'` followed by any nu"
"mber of letters, underscores and numbers `('0'..'9')`."
msgstr ""

msgid ""
"The caret is used to escape an identifier if there are conflicts with existing"
" keywords. It is removed by the *ID* rule's [ValueConverter](303_runtime_conce"
"pts.html#value-converter)."
msgstr ""

msgid "This is the simplified formal definition of terminal rules:"
msgstr ""

msgid ""
"```xtext\n"
"TerminalRule:\n"
"    'terminal' name=ID ('returns' type=TypeRef)? ':'\n"
"    alternatives=TerminalAlternatives ';';\n"
"```"
msgstr ""

msgid ""
"Note that *the order of the terminal rules is crucial for your grammar*, as th"
"ey may shadow each other. This is especially important for newly introduced ru"
"les in connection with imported rules from used grammars."
msgstr ""

msgid ""
"It's almost in any case recommended to use [data type rules](#datatype-rules) "
"instead. Let's assume you want to add a rule to allow fully qualified names in"
" addition to simple IDs. Since a qualified name with only one segment looks li"
"ke a plain ID, you should implement it as a data type rule instead of adding a"
"nother terminal rule. The same rule of thumb applies to floating point literal"
"s, too."
msgstr ""

msgid "#### Return Types"
msgstr ""

msgid ""
"Each terminal rule returns an atomic value (an [EDataType]({{site.src.emf}}/pl"
"ugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EDataType.java)). By def"
"ault, it's assumed that an instance of `ecore::EString` should be returned. Ho"
"wever, if you want to provide a different type you can specify it. For instanc"
"e, the rule *INT* is defined as:"
msgstr ""

msgid ""
"```xtext\n"
"import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore\n"
"//...\n"
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;\n"
"```"
msgstr ""

msgid ""
"This means that the terminal rule *INT* returns instances of `ecore::EInt`. It"
" is possible to define any kind of data type here, which just needs to be an i"
"nstance of `ecore::EDataType`. In order to tell the framework how to convert t"
"he parsed string to a value of the declared data type, you need to provide you"
"r own implementation of the [IValueConverterService]({{site.src.xtext_core}}/o"
"rg.eclipse.xtext/src/org/eclipse/xtext/conversion/IValueConverterService.java)"
" (see [Value Converter](303_runtime_concepts.html#value-converter)). The value"
" converter is also the service that allows to remove escape sequences or seman"
"tically unnecessary characters such as quotes from string literals or the care"
"t symbol `'^'` from the identifiers."
msgstr ""

msgid "#### Extended Backus-Naur Form Expressions"
msgstr ""

msgid ""
"Terminal rules are described using *Extended Backus-Naur Form*-like (EBNF) exp"
"ressions. The different expressions are described in the following. Each of th"
"ese expressions allows to define a cardinality. There are four different possi"
"ble cardinalities:"
msgstr ""

msgid ""
"1.  exactly one (the default, no operator)\n"
"1.  zero or one (operator `?`)\n"
"1.  zero or more (operator `*`)\n"
"1.  one or more (operator `+`)"
msgstr ""

msgid "##### Keywords / Characters {#keywords}"
msgstr ""

msgid ""
"Keywords are a kind of terminal rule literals. The *ID* rule in `org.eclipse.x"
"text.common.Terminals` for instance starts with a keyword:"
msgstr ""

msgid ""
"```xtext\n"
"terminal ID:\n"
"    '^'? ... ;\n"
"```"
msgstr ""

msgid ""
"The question mark sets the cardinality to *zero or one* (i.e. optional) as exp"
"lained above."
msgstr ""

msgid ""
"A keyword can have any length, e.g. `'entity'`, and contain arbitrary characte"
"rs. The following standard Java notations for special characters are allowed: "
"`\n"
msgstr ""

msgid "##### Character Ranges"
msgstr ""

msgid "A character range can be declared using the `..` operator. Example:"
msgstr ""

msgid ""
"```xtext\n"
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;\n"
"```"
msgstr ""

msgid ""
"In this case an *INT* is comprised of one or more (note the `+` operator) char"
"acters between (and including) `'0'` and `'9'`."
msgstr ""

msgid "##### Wildcard"
msgstr ""

msgid ""
"If you want to allow any character you can simply write the wildcard operator "
"`.` (dot). Example:"
msgstr ""

msgid ""
"```xtext\n"
"terminal FOO:\n"
"    'f' . 'o';\n"
"```"
msgstr ""

msgid "The rule above would allow expressions like `foo`, `f0o` or even `f°o`."
msgstr ""

msgid "##### Until Token"
msgstr ""

msgid ""
"With the *until token* it is possible to state that everything should be consu"
"med until a certain token occurs. The multi-line comment is implemented this w"
"ay:"
msgstr ""

msgid ""
"```xtext\n"
"terminal ML_COMMENT:\n"
"    '/*' -> '*/';\n"
"```"
msgstr ""

msgid ""
"This is the rule for Java-style comments that begin with `/*` and end with `*/"
"`."
msgstr ""

msgid "##### Negated Token {#negated-tokens}"
msgstr ""

msgid ""
"All the tokens explained above can be inverted using a preceding exclamation m"
"ark:"
msgstr ""

msgid ""
"```xtext\n"
"terminal BETWEEN_HASHES:\n"
"    '#' (!'#')* '#';\n"
"```"
msgstr ""

msgid "##### Rule Calls {#rule-calls}"
msgstr ""

msgid ""
"Rules can refer to other rules. This is simply done by using the name of the r"
"ule to be called. We refer to this as *rule calls*. Rule calls in terminal rul"
"es can only point to terminal rules. Example:"
msgstr ""

msgid ""
"```xtext\n"
"terminal DOUBLE:\n"
"    INT '.' INT;\n"
"```"
msgstr ""

msgid ""
"Note: It is generally not a good idea to implement floating point literals wit"
"h terminal rules. You should use [data type rules](#datatype-rules) instead du"
"e to possible shadowing problems explained above."
msgstr ""

msgid "##### Alternatives {#alternatives}"
msgstr ""

msgid ""
"Alternatives allow to define multiple valid options in the input file. For ins"
"tance, the white space rule uses alternatives like this:"
msgstr ""

msgid ""
"```xtext\n"
"terminal WS:\n"
"')+;\n"
"```"
msgstr ""

msgid "'`)."
msgstr ""

msgid "##### Groups {#groups}"
msgstr ""

msgid ""
"Finally, if you put tokens one after another, the whole sequence is referred t"
"o as a group. Example:"
msgstr ""

msgid ""
"```xtext\n"
"terminal ASCII:\n"
"    '0x' ('0'..'7') ('0'..'9'|'A'..'F');\n"
"```"
msgstr ""

msgid ""
"This group has three elements `'0x'`, `('0'..'7')`, and `('0'..'9'|'A'..'F')`,"
" which have to appear in this order."
msgstr ""

msgid "#### Terminal Fragments {#terminal-fragment}"
msgstr ""

msgid ""
"Since terminal rules are used in a stateless context, it's not easily possible"
" to reuse parts of their definition. Fragments solve this problem. They allow "
"the same EBNF elements as terminal rules do but may not be consumed by the lex"
"er. Instead, they have to be used by other terminal rules. This allows to extr"
"act repeating parts of a definition:"
msgstr ""

msgid ""
"```xtext\n"
"terminal fragment ESCAPED_CHAR:\n"
"    '\\\\' ('n'|'t'|'r'|'\\\\');\n"
"terminal STRING: \n"
"    '\"' ( ESCAPED_CHAR | !('\\\\'|'\"') )* '\"' |\n"
"    \"'\" ( ESCAPED_CHAR | !('\\\\'|\"'\") )* \"'\";\n"
"```"
msgstr ""

msgid "#### EOF &ndash; End Of File {#eof}"
msgstr ""

msgid ""
"The `EOF` (End Of File) token may be used to describe that the end of the inpu"
"t stream is a valid situation at a certain point in a terminal rule. This allo"
"ws to consume the complete remaining input of a file starting with a special d"
"elimiter."
msgstr ""

msgid "`terminal UNCLOSED_STRING : '\"' (!'\"')* EOF;`"
msgstr ""

msgid "The `EOF` token cannot be [negated](301_grammarlanguage.html#negated-tokens)."
msgstr ""

msgid "### Parser Rules {#parser-rules}"
msgstr ""

msgid ""
"The parser is fed with a sequence of terminals and walks through the so-called"
" *parser rules*. Hence a parser rule &ndash; contrary to a terminal rule &ndas"
"h; does not produce a single atomic terminal token, but a tree of non-terminal"
" and terminal tokens. They lead to a so-called *parse tree* (in Xtext it is al"
"so referred as *node model*). Furthermore, parser rules are handled as kind of"
" a building plan for the creation of the [EObjects]({{site.src.emf}}/plugins/o"
"rg.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) that form the sem"
"antic model (the linked *abstract syntax tree* or AST). Due to this fact, pars"
"er rules are also called production or EObject rules. Different constructs lik"
"e actions and assignments are used to derive types and initialize the semantic"
" objects accordingly."
msgstr ""

msgid ""
"Not all the expressions that are available in terminal rules can be used in pa"
"rser rules. Character ranges, wildcards, the until token and the negation as w"
"ell as the EOF token are only available for terminal rules."
msgstr ""

msgid ""
"The elements that are available in parser rules as well as in terminal rules a"
"re"
msgstr ""

msgid ""
"1.  [Groups](301_grammarlanguage.html#groups)\n"
"1.  [Alternatives](301_grammarlanguage.html#alternatives)\n"
"1.  [Keywords](301_grammarlanguage.html#keywords)\n"
"1.  [Rule Calls](301_grammarlanguage.html#rule-calls)"
msgstr ""

msgid ""
"In addition to these elements, there are some expressions used to direct how t"
"he AST is constructed. They are listed and explained in the following."
msgstr ""

msgid "##### Assignments {#assignments}"
msgstr ""

msgid ""
"Assignments are used to assign the consumed information to a feature of the cu"
"rrently produced object. The type of the current object, its [EClass]({{site.s"
"rc.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java),"
" is specified by the return type of the parser rule. If it is not explicitly s"
"tated it is implied that the type's name equals the rule's name. The type of t"
"he assigned feature is inferred from the right hand side of the assignment."
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
"```xtext\n"
"DataType:\n"
"    'datatype' name = ID;\n"
"```"
msgstr ""

msgid ""
"The syntactic declaration for datatypes starts with a keyword `datatype` follo"
"wed by an assignment: `name = ID`. The left hand side refers to a feature *nam"
"e* of the current object (which has the EClass *DataType* in this case). The r"
"ight hand side can be a rule call, a keyword, a [cross-reference](301_grammarl"
"anguage.html#cross-references) or an alternative comprised by the former optio"
"ns. The type of the feature needs to be compatible with the type of the expres"
"sion on the right. As *ID* returns an [EString]({{site.javadoc.java}}/java/lan"
"g/String.html) in this case, the feature *name* needs to be of type EString as"
" well."
msgstr ""

msgid "There are three different assignment operators, each with different semantics."
msgstr ""

msgid ""
"1.  The simple equal sign `=` is the straightforward assignment, and is used f"
"or features which take only one element.\n"
"1.  The `+=` sign (the add operator) expects a multi-valued feature and adds t"
"he value on the right hand side to that feature, which is a list feature.\n"
"1.  The `?=` sign (boolean assignment operator) expects a feature of type [EBo"
"olean]({{site.javadoc.java}}/java/lang/Boolean.html) and sets it to true if th"
"e right hand side was consumed, independently from the concrete value of the r"
"ight hand side."
msgstr ""

msgid ""
"The used assignment operator does not influence the cardinality of the expecte"
"d symbols on the right hand side."
msgstr ""

msgid "##### Cross-References {#cross-references}"
msgstr ""

msgid ""
"A unique feature of Xtext is the ability to declare cross-references in the gr"
"ammar. In traditional compiler construction such cross-references are not esta"
"blished during parsing but in a later linking phase. This is the same in Xtext"
", but we allow to specify cross-reference information in the grammar. This inf"
"ormation is used by the [linker](303_runtime_concepts.html#linking)."
msgstr ""

msgid "The syntax for cross-references is:"
msgstr ""

msgid ""
"```xtext\n"
"CrossReference:\n"
"    '[' type=TypeRef ('|' ^terminal=CrossReferenceableTerminal )? ']';\n"
"```"
msgstr ""

msgid ""
"For example, Features in the [domainmodel tutorial](102_domainmodelwalkthrough"
".html) contain a cross-reference pointing to a Type:"
msgstr ""

msgid ""
"```xtext\n"
"Feature:\n"
"    (many ?= 'many')? name = ID ':' type = [Type];\n"
"```"
msgstr ""

msgid ""
"It is important to understand that the text between the square brackets does n"
"ot refer to another rule, but to an [EClass]({{site.src.emf}}/plugins/org.ecli"
"pse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java) &ndash; which is a type a"
"nd not a parser rule. This can be sometimes confusing because one usually uses"
" the same name for the rules and for the returned types."
msgstr ""

msgid ""
"Looking at the syntax definition for cross-references, there is an optional pa"
"rt starting with a vertical bar (pipe) followed by *CrossReferenceableTerminal"
"*. This is the part describing the concrete text from which the cross-referenc"
"e should be established. If the terminal is omitted, it is expected to be the "
"rule with the name *ID* &ndash; if one can be found. The terminal is mandatory"
" for languages that do not define a rule with the name *ID*."
msgstr ""

msgid "##### Unordered Groups {#unordered-groups}"
msgstr ""

msgid ""
"The elements of an unordered group can occur in any order, but each element mu"
"st appear once. Members of unordered groups are separated by `&`. The followin"
"g rule `Modifier` allows to parse simplified modifiers of the Java language:"
msgstr ""

msgid ""
"```xtext\n"
"Modifier: \n"
"    static?='static'? & final?='final'? & visibility=Visibility;"
msgstr ""

msgid ""
"enum Visibility:\n"
"    PUBLIC='public' | PRIVATE='private' | PROTECTED='protected';\n"
"```"
msgstr ""

msgid "With these definitions the following sequences of tokens are valid:"
msgstr ""

msgid ""
"```java\n"
"public static final\n"
"static protected \n"
"final private static\n"
"public\n"
"```"
msgstr ""

msgid "In contrast, the parser refuses to accept these input lines:"
msgstr ""

msgid ""
"```java\n"
"static final static // ERROR: static appears twice\n"
"public static final private // ERROR: visibility appears twice\n"
"final // ERROR: visibility is missing\n"
"```"
msgstr ""

msgid ""
"Note that if you want an element of an unordered group to appear once or not a"
"t all, you have to choose a cardinality of `?`. In the example, the visibility"
" is mandatory, while `static` or `final` are optional. Elements with a cardina"
"lity of `*` or `+` have to appear continuously without interruption, i.e."
msgstr ""

msgid ""
"```xtext\n"
"ExampleRule:\n"
"    values+=INT* & name=ID;\n"
"```"
msgstr ""

msgid "can parse these lines"
msgstr ""

msgid ""
"```java\n"
"0 8 15 x\n"
"x 0 8 15 \n"
"```"
msgstr ""

msgid "but does not consume the following sequence without raising an error"
msgstr ""

msgid ""
"```java\n"
"0 x 8 15 // wrong, as values must not be interrupted by a name (ID)\n"
"```"
msgstr ""

msgid "##### Simple Actions"
msgstr ""

msgid ""
"The object to be returned by a parser rule is usually created lazily on the fi"
"rst assignment. Its type is determined from the specified return type of the r"
"ule, which may have been inferred from the rule's name if no explicit return t"
"ype is specified."
msgstr ""

msgid ""
"With Actions however, the creation of returned [EObject]({{site.src.emf}}/plug"
"ins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) can be made "
"explicit. Xtext supports two kinds of Actions:"
msgstr ""

msgid ""
"1. *Simple* Actions\n"
"1. *Assigned* Actions"
msgstr ""

msgid ""
"If you want to enforce the creation of an instance with specific type you can "
"use simple actions. In the following example *TypeB* must be a subtype of *Typ"
"eA*. An expression `A ident` should create an instance of *TypeA*, whereas `B "
"ident` should instantiate *TypeB*."
msgstr ""

msgid ""
"If you don't use actions, you'll have to define an alternative and delegate ru"
"les to guide the parser to the right types for the to-be-instantiated objects:"
msgstr ""

msgid ""
"```xtext\n"
"MyRule returns TypeA:\n"
"    \"A\" name=ID |\n"
"    MyOtherRule;"
msgstr ""

msgid ""
"MyOtherRule returns TypeB:\n"
"    \"B\" name = ID;\n"
"```"
msgstr ""

msgid ""
"Actions however allow to make this explicit. Thereby they can improve the read"
"ability of grammars."
msgstr ""

msgid ""
"```xtext\n"
"MyRule returns TypeA:\n"
"    \"A\" name=ID |\n"
"    \"B\" {TypeB} name=ID; \n"
"```"
msgstr ""

msgid ""
"Generally speaking, the instance is created as soon as the parser hits the fir"
"st assignment. However, actions allow to explicitly instantiate any [EObject]("
"{{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObje"
"ct.java). The notation `{TypeB}` will create an instance of *TypeB* and assign"
" it to the result of the parser rule. This allows to define parser rules witho"
"ut any assignment and to create objects without the need to introduce unnecess"
"ary delegate rules."
msgstr ""

msgid ""
"Note: If a parser rule does not instantiate any object because it does not con"
"tain an Action and no mandatory Assignment, you'll likely end up with unexpect"
"ed situations for valid input files. Xtext detects this situation and will rai"
"se a warning (with a corresponding quickfix) for the parser rules in question."
msgstr ""

msgid "##### Unassigned Rule Calls"
msgstr ""

msgid ""
"We previously explained that the [EObject]({{site.src.emf}}/plugins/org.eclips"
"e.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) to be returned is created "
"lazily when the first assignment occurs or as soon as a simple action is evalu"
"ated. There is another concept to find the EObject to be returned, called *una"
"ssigned rule call*. Unassigned rule calls, as the name suggests it, are rule c"
"alls to other parser rules which are not used within an assignment. The return"
" value of the called rule becomes the return value of the calling parser rule "
"if it is not assigned to a feature."
msgstr ""

msgid ""
"With unassigned rule calls one can, for instance, create rules which just disp"
"atch to other rules:"
msgstr ""

msgid ""
"```xtext\n"
"AbstractToken:\n"
"    TokenA |\n"
"    TokenB |\n"
"    TokenC;\n"
"```"
msgstr ""

msgid ""
"As `AbstractToken` could possibly return an instance of *TokenA*, *TokenB* or "
"*TokenC*. Its type must be a super type for all these types. Since the return "
"value of the called rule becomes the result of the current rule, it is possibl"
"e to further change the state of the AST element by assigning additional featu"
"res."
msgstr ""

msgid ""
"```xtext\n"
"AbstractToken:\n"
"    ( TokenA |\n"
"      TokenB |\n"
"      TokenC ) cardinality=('?'|'+'|'*')?;\n"
"```"
msgstr ""

msgid ""
"This way the *cardinality* is optional (last question mark) and can be represe"
"nted by a question mark, a plus, or an asterisk. It will be assigned to either"
" an instance of type *TokenA*, *TokenB*, or *TokenC*, which are all subtypes o"
"f *AbstractToken*. The rule in this example will never create an instance of *"
"AbstractToken* directly, but always return the instance that has been created "
"by the invoked *TokenX* rule."
msgstr ""

msgid "##### Assigned Actions {#grammar-actions}"
msgstr ""

msgid ""
"Xtext leverages the powerful ANTLR parser which implements an `LL(*)` algorith"
"m. Even though LL parsers have many advantages with respect to readability, de"
"buggability and error recovery, there are also some drawbacks. The most import"
"ant one is that it does not allow left recursive grammars. For instance, the f"
"ollowing rule is not allowed in LL-based grammars, because `Expression '+' Exp"
"ression` is left-recursive:"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    Expression '+' Expression |\n"
"    '(' Expression ')' |\n"
"    INT;\n"
"```"
msgstr ""

msgid "Instead one has to rewrite such left-recursive rules by \"left-factoring\" them:"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    TerminalExpression ('+' TerminalExpression)*;"
msgstr ""

msgid ""
"TerminalExpression:\n"
"    '(' Expression ')' |\n"
"    INT;\n"
"```"
msgstr ""

msgid ""
"In practice this is always the same pattern and therefore not too difficult. H"
"owever, by simply applying the Xtext AST construction features we've covered s"
"o far, a grammar such as"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    {Operation} left=TerminalExpression (ops+='+' rights+=TerminalExpression)*"
msgstr ""

msgid ""
"TerminalExpression returns Expression:\n"
"    '(' Expression ')' |\n"
"    {IntLiteral} value=INT;\n"
"```"
msgstr ""

msgid ""
"would result in unwanted elements in the AST. For instance the expression `(42"
")` would result in a tree like this:"
msgstr ""

msgid ""
"```mwe2\n"
"Operation {\n"
"  left=Operation {\n"
"    left=IntLiteral {\n"
"      value=42\n"
"    }\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Typically one would only want to have one instance of *IntLiteral* instead. Th"
"is problem can be solved by using a combination of unassigned rule calls and a"
"ssigned actions:"
msgstr ""

msgid ""
"```xtext\n"
"Expression:\n"
"    TerminalExpression ({Operation.left=current} \n"
"    op='+' right=TerminalExpression)*"
msgstr ""

msgid ""
"In the example above `{Operation.left=current}` is a so-called *tree rewrite a"
"ction*, which creates a new instance of the stated [EClass]({{site.src.emf}}/p"
"lugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EClass.java) *Operation"
"* and assigns the element currently to-be-returned (the `current` variable) to"
" a feature of the newly created object. The example uses the feature *left* of"
" the *Operation* instance to store the previously returned *Expression*. In Ja"
"va these semantics could be expressed as:"
msgstr ""

msgid ""
"```java\n"
"Operation temp = new Operation();\n"
"temp.setLeft(current);\n"
"current = temp;\n"
"```"
msgstr ""

msgid ""
"With these improved rules the expression `(42)` would lead to a single *IntLit"
"eral* instance, while `40 + 2` creates an *Operation* with two *IntLiterals*."
msgstr ""

msgid "#### Syntactic Predicates {#syntactic-predicates}"
msgstr ""

msgid ""
"It is sometimes not easily possible to define an `LL(*)` grammar for a given l"
"anguage that parses all possible valid input files and still produces abstract"
" syntax graphs that mimic the actual structure of the files. There are even ca"
"ses that cannot be described with an unambiguous grammar. There are solutions "
"that allow to deal with this problem:"
msgstr ""

msgid ""
"* Enable backtracking: Xtext allows to enable backtracking for the ANTLR parse"
"r generator. This is usually not recommended since it influences error message"
" strategies at runtime and shadows actually existing problems in the grammar.\n"
"* Syntactic predicates: The grammar language allows to guide the parser in cas"
"e of ambiguities. This mechanism is achieved by *syntactic predicates*. Since "
"they affect only a very small part of the grammar, syntactic predicates are th"
"e recommended approach to handle ANTLR error messages during the parser genera"
"tion."
msgstr ""

msgid ""
"The classical example for ambiguous language parts is the *dangling else probl"
"em*. A conditional in a programming language usually looks like this:"
msgstr ""

msgid ""
"```java\n"
"if (isTrue())\n"
"    doStuff();\n"
"else \n"
"    dontDoStuff();\n"
"```"
msgstr ""

msgid "The problems becomes obvious as soon as nested conditions are used:"
msgstr ""

msgid ""
"```java\n"
"if (isTrue())\n"
"    if (isTrueAsWell())\n"
"        doStuff();\n"
"    else \n"
"        dontDoStuff();\n"
"```"
msgstr ""

msgid ""
"Where does the `else` branch belong to? This question can be answered by a qui"
"ck look into the language specification which tells that the `else` branch is "
"part of the inner condition. However, the parser generator cannot be convinced"
" that easily. We have to guide it to this decision point by means of syntactic"
" predicates which are expressed by a leading `=>` operator."
msgstr ""

msgid ""
"```xtext\n"
"Condition: \n"
"    'if' '(' condition=BooleanExpression ')'\n"
"    then=Expression \n"
"    (=>'else' else=Expression)?\n"
"```"
msgstr ""

msgid ""
"The parser understands the predicate basically like this: If you are at this p"
"articular decision point and you don't know what to do, check whether the `els"
"e` keyword is present. If it is, take that branch directly without considering"
" other options that would match the same token sequence."
msgstr ""

msgid ""
"Well chosen predicates allow to solve most ambiguities and backtracking can of"
"ten be disabled. Be warned, though, that an ambiguity for the parser can also "
"mean an ambiguity for the user, so before forcing the syntax into handling suc"
"h cases you should consider avoiding them in the first place."
msgstr ""

msgid "##### First Token Set Predicates"
msgstr ""

msgid ""
"Sometimes you need to put a syntactic predicate on a more complex rule, e.g. a"
"n expression, which might be very long. For disambiguation it is often suffici"
"ent to look only at the first token set. In those cases one can use the `->` o"
"perator instead of `=>`, instructing the parser to just look at the first toke"
"n and make the decision based on that. This can heavily reduce the lookahead a"
"nd as a consequence make the parser faster and more robust to syntactic errors"
". This also affects the behavior of the IDE, such as content assist, in a posi"
"tive way."
msgstr ""

msgid "### Hidden Terminal Symbols {#hidden-terminals}"
msgstr ""

msgid ""
"Because parser rules describe not a single token, but a sequence of patterns i"
"n the input, it is necessary to define the important parts of the input. Xtext"
" introduces the concept of hidden tokens to handle semantically irrelevant thi"
"ngs like white spaces, comments, etc. in the input sequence gracefully. It is "
"possible to define a set of terminal symbols that are hidden from the parser r"
"ules and automatically skipped when they are recognized. Nevertheless, they ar"
"e transparently woven into the node model, but not relevant for the semantic m"
"odel."
msgstr ""

msgid ""
"Hidden terminals may optionally appear between any other terminals in any card"
"inality. They can be described per rule or for the whole grammar. When [reusin"
"g a single grammar](301_grammarlanguage.html#grammar-mixins) its definition of"
" hidden tokens is reused, too. The grammar `org.eclipse.xtext.common.Terminals"
"` comes with a reasonable default and hides all comments and white spaces from"
" the parser rules."
msgstr ""

msgid ""
"If a rule defines hidden symbols, you can think of a kind of scope that is aut"
"omatically introduced. Any rule that is called transitively by the declaring r"
"ule uses the same hidden terminals as the calling rule, unless it defines hidd"
"en tokens itself."
msgstr ""

msgid ""
"```xtext\n"
"Person hidden(WS, ML_COMMENT, SL_COMMENT):\n"
"    name=Fullname age=INT ';';"
msgstr ""

msgid ""
"Fullname:\n"
"    (firstname=ID)? lastname=ID;\n"
"```"
msgstr ""

msgid ""
"The sample rule *Person* defines multiline comments (`ML_COMMENT`), single-lin"
"e comments (`SL_COMMENT`), and white space (`WS`) to be allowed between the *n"
"ame* and the *age*. Because the rule *Fullname* does not introduce an own set "
"of hidden terminals, it allows the same symbols to appear between *firstname* "
"and *lastname* as the calling rule *Person*. Thus, the following input is perf"
"ectly valid for the given grammar snippet:"
msgstr ""

msgid ""
"```java\n"
"John /* comment */ Smith // line comment\n"
"/* comment */\n"
"      42      ; // line comment\n"
"```"
msgstr ""

msgid ""
"A list of all default terminals such as `WS` can be found in [Common Terminals"
"](#common-terminals)."
msgstr ""

msgid "### Data Type Rules {#datatype-rules}"
msgstr ""

msgid ""
"Data type rules create instances of [EDataType]({{site.src.emf}}/plugins/org.e"
"clipse.emf.ecore/src/org/eclipse/emf/ecore/EDataType.java) instead of [EClass]"
"({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/ECla"
"ss.java). They are quite similar to terminal rules, but they are actually pars"
"er rules and are therefore"
msgstr ""

msgid ""
"1. context sensitive and\n"
"1. allow to use of hidden tokens."
msgstr ""

msgid ""
"Assuming you want to define a rule to consume Java-like qualified names (e.g. "
"`foo.bar.Baz`) you could write:"
msgstr ""

msgid ""
"```xtext\n"
"QualifiedName:\n"
"    ID ('.' ID)*;\n"
"```"
msgstr ""

msgid ""
"In contrast to a terminal rule this is only valid in certain contexts, i.e. it"
" won't conflict with the rule *ID*. If you had defined it as a terminal rule, "
"it would possibly hide the simple *ID* rule."
msgstr ""

msgid ""
"In addition, by defining the *QualifiedName* as a data type rule, it is allowe"
"d to use hidden tokens such as `/* comment */` between the segment IDs and dot"
"s (e.g. `foo/* comment */. bar . Baz`)."
msgstr ""

msgid "Return types can be specified in the same way as for terminal rules:"
msgstr ""

msgid ""
"```xtext\n"
"QualifiedName returns ecore::EString:\n"
"    ID ('.' ID)*;\n"
"```"
msgstr ""

msgid ""
"Note that rules that do not call other parser rules and do neither contain any"
" actions nor [assignments](301_grammarlanguage.html#assignments) are considere"
"d to be data type rules, and the data type [EString]({{site.javadoc.java}}/jav"
"a/lang/String.html) is implied if none has been explicitly declared."
msgstr ""

msgid ""
"[Value converters](303_runtime_concepts.html#value-converter) are used to tran"
"sform the parsed string to the actually returned data type value."
msgstr ""

msgid "### Enum Rules"
msgstr ""

msgid ""
"Enum rules return enumeration literals from strings. They can be seen as a sho"
"rtcut for data type rules with specific value converters. The main advantage o"
"f enum rules is their simplicity, type safety and therefore nice validation. F"
"urthermore it is possible to infer enums and their respective literals during "
"the Ecore model transformation."
msgstr ""

msgid ""
"If you want to define a `ChangeKind` from [org.eclipse.emf.ecore.change/model/"
"Change.ecore](https://github.com/eclipse/emf/blob/master/plugins/org.eclipse.e"
"mf.ecore.change/model/Change.ecore) with *ADD*, *MOVE* and *REMOVE* you could "
"write:"
msgstr ""

msgid ""
"```xtext\n"
"enum ChangeKind:\n"
"    ADD | MOVE | REMOVE;\n"
"```"
msgstr ""

msgid ""
"It is even possible to use alternative literals for your enums or reference an"
" enum value twice:"
msgstr ""

msgid ""
"```xtext\n"
"enum ChangeKind:\n"
"    ADD = 'add' | ADD = '+' | \n"
"    MOVE = 'move' | MOVE = '->' | \n"
"    REMOVE = 'remove' | REMOVE = '-';\n"
"```"
msgstr ""

msgid ""
"Please note that Ecore does not support unset values for enums. If you define "
"a grammar like"
msgstr ""

msgid ""
"```xtext\n"
"Element:\n"
"\t'element' name=ID (value=SomeEnum)?;\n"
"```"
msgstr ""

msgid ""
"with the input of `element Foo` the resulting instance *Foo* will hold the enu"
"m value with the internal representation of `0` (zero). When generating the EP"
"ackage from your grammar this will be the first literal you define. As a worka"
"round you could introduce a dedicated none-value or order the enums accordingl"
"y. Note that it is not possible to define an enum literal with an empty textua"
"l representation. You can overcome this by importing a meta model where the en"
"um is defined and omitting some of its literals in the grammar."
msgstr ""

msgid ""
"### Grammar Annotations {#grammar-annotations}\n"
"Parser Rules can be annotated with several useful annotations. In the followin"
"g sections there is an overview. Please keep in mind that those annotations wi"
"ll only work on Parser Rules. You'll get an error if you try to use them on Te"
"rminal or Enum Rules."
msgstr ""

msgid ""
"#### Override\n"
"Sometimes you want to override an existing Parser Rule of a given super gramma"
"r to customize it. To do that, you have to create a rule with the same name. I"
"t's clear for you that this is a customization, but for the reader of the gram"
"mar it's not. To make that more explicit `@Override` marks a rule as being a c"
"ustomization of an already existing rule in a super grammar. You'll get a warn"
"ing if a rule is a customization and is not marked as Override and an error if"
" it's not an customization and therefore must not be marked as Override.\n"
"#### Final\n"
"Overriding Parser Rules is a common thing but if you want to make sure that no"
"body overrides a special rule the `@Final` annotation gives support for that.\n"
"#### Deprecated\n"
"Language evolution is an important part of building serious DSLs. Adding somet"
"hing to a grammar is easy as long as the old instances of the grammar are stil"
"l valid to the new grammar. It becomes hard if you want to remove something an"
"d you have to be very careful. Marking classes as deprecated is a good indicat"
"or for users to switch to the new API. With `@Deprecated` Xtext has support to"
" mark Parser Rules to be deprecated. \n"
"This will generate validations and the possibility to change the severity thro"
"ugh preferences. As a default users will get a warning when using these rules."
" Of course it's up to you to decide what the severity should be - this opens t"
"he possibility to safely remove parts of the grammar by informing in advance w"
"ith a warning and raise the severity to error afterwards."
msgstr ""

msgid ""
"#### Exported\n"
"As a default all elements that have a name that are exposed through the index "
"to be referenced from outside. As a start this might fit your needs, but soone"
"r or later you might run out of memory (big index) or you simply want to hide "
"elements from the outside world. To do that you can write a custom version of "
"the [IDefaultResourceDescriptionStrategy]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/resource/IDefaultResourceDescriptionStrategy.java)"
" or simply use the `@Exported` annotation. This will generate a custom strateg"
"y as soon as there is at least one `@Exported` annotation in your grammar."
msgstr ""

msgid "---"
msgstr ""

msgid "## Ecore Model Inference {#metamodel-inference}"
msgstr ""

msgid ""
"The Ecore model (or meta-model) of a textual language describes the structure "
"of its abstract syntax trees (AST)."
msgstr ""

msgid ""
"Xtext uses Ecore's EPackages to define Ecore models. Ecore models are declared"
" to be either inferred from the grammar or imported. By using the `generate` d"
"irective, one tells Xtext to infer an EPackage from the grammar."
msgstr ""

msgid "### Type and Package Generation"
msgstr ""

msgid "Xtext creates"
msgstr ""

msgid ""
"* an [EPackage]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse"
"/emf/ecore/EPackage.java)\n"
"  * for each `generate` declaration. The *name* of the EPackage is set to the "
"first parameter of such a declaration, its *nsURI* to the second parameter. An"
" optional alias as the third parameter allows to distinguish the generated EPa"
"ckages later. Only one generated package declaration per alias is allowed.\n"
"* an [EClass]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/e"
"mf/ecore/EClass.java)\n"
"  * for each return type of a parser rule. If a parser rule does not define a "
"return type, an implicit one with the same name as the rule itself is assumed."
" You can specify multiple rules that return the same type, but only one EClass"
" is generated for each type name.\n"
"  * for each type defined in an action or a cross-reference.\n"
"* an [EEnum]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/em"
"f/ecore/EEnum.java)\n"
"  * for each return type of an enum rule.\n"
"* an [EDataType]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclips"
"e/emf/ecore/EDataType.java)\n"
"  * for each return type of a terminal rule or a data type rule."
msgstr ""

msgid ""
"All EClasses, EEnums, and EDataTypes are added to the EPackage referred to by "
"the alias provided in the type reference they were created from."
msgstr ""

msgid "### Feature and Type Hierarchy Generation"
msgstr ""

msgid ""
"While walking through the grammar, the model inference algorithm keeps track o"
"f a set of the currently possible return types to add features to."
msgstr ""

msgid ""
"* Entering a parser rule the set contains only the return type of the rule. \n"
"* Entering an element of an alternative the set is reset to the same state it "
"was in when entering the first option of the alternative.\n"
"* Leaving an alternative the set contains the union of all types at the end of"
" each of its paths.\n"
"* After an optional element, the set is reset to the same state it was before "
"entering it.\n"
"* After a non-optional unassigned rule call the set contains only the return t"
"ype of the called rule. An optional rule call does not modify the set. A rule "
"call is optional if its cardinality is `?` or `*`.\n"
"* After an action the set contains only the type of the action."
msgstr ""

msgid "While traversing the parser rules Xtext creates"
msgstr ""

msgid ""
"* an [EAttribute]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclip"
"se/emf/ecore/EAttribute.java) in each current return type\n"
"  * of type [EBoolean]({{site.javadoc.java}}/java/lang/Boolean.html) for each "
"feature assignment using the `?=` operator. No further EReferences or EAttribu"
"tes are generated from such an assignment.\n"
"  * for each assignment with the `=` or `+=` operator calling a terminal rule "
"or data type rule. Its type is the return type of the called rule.\n"
"* an [EReference]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclip"
"se/emf/ecore/EReference.java) in each current return type\n"
"  * for each assignment with the `=` or `+=` operator in a parser rule calling"
" a parser rule. The type of the EReference is the return type of the called pa"
"rser rule.\n"
"  * for each assigned action. The type of the reference is the return type of "
"the current rule containing the action."
msgstr ""

msgid ""
"Each [EAttribute]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclip"
"se/emf/ecore/EAttribute.java) or [EReference]({{site.src.emf}}/plugins/org.ecl"
"ipse.emf.ecore/src/org/eclipse/emf/ecore/EReference.java) takes its name from "
"the assignment or action that caused it. Multiplicities are `0..1` for assignm"
"ents with the `=` operator and `0..*` for assignments with the `+=` operator."
msgstr ""

msgid ""
"Furthermore, each type that is added to the currently possible return types au"
"tomatically extends the current return type of the parser rule. You can specif"
"y additional common super types by means of \"artificial\" parser rules that are"
" never called, e.g."
msgstr ""

msgid ""
"```xtext\n"
"CommonSuperType:\n"
"    SubTypeA | SubTypeB | SubTypeC;\n"
"```"
msgstr ""

msgid ""
"After the traversal of all grammar rules the model inference algorithm examine"
"s all generated EClasses and lifts up similar features to supertypes if there "
"is more than one subtype and the feature is defined in all subtypes. This work"
"s even for multiple super types."
msgstr ""

msgid "### Enum Literal Generation"
msgstr ""

msgid ""
"For each alternative defined in an enum rule, the transformer creates an enum "
"literal, as long as no other literal with the same name can be found. The *lit"
"eral* property of the generated enum literal is set to the right hand side of "
"the declaration. If it is omitted, an enum literal with equal *name* and *lite"
"ral* attributes is inferred."
msgstr ""

msgid ""
"```xtext\n"
"enum MyGeneratedEnum:\n"
"    NAME = 'literal' | EQUAL_NAME_AND_LITERAL;\n"
"```"
msgstr ""

msgid "### Error Conditions"
msgstr ""

msgid "The following conditions cause an error"
msgstr ""

msgid ""
"*   An EAttribute or EReference has two different types or different cardinali"
"ties.\n"
"*   There is an EAttribute and an EReference with the same name in the same EC"
"lass.\n"
"*   There is a cycle in the type hierarchy.\n"
"*   A new EAttribute, EReference or super type is added to an imported type.\n"
"*   An EClass is added to an imported EPackage.\n"
"*   An undeclared alias is used.\n"
"*   An imported Ecore model cannot be loaded."
msgstr ""

msgid "## Grammar Mixins {#grammar-mixins}"
msgstr ""

msgid ""
"Xtext supports the reuse of existing grammars. Grammars that are created via t"
"he Xtext wizard use `org.eclipse.xtext.common.Terminals` by default, which int"
"roduces a common set of terminal rules and defines reasonable defaults for hid"
"den terminals."
msgstr ""

msgid ""
"```xtext\n"
"grammar org.example.domainmodel.Domainmodel\n"
"    with org.eclipse.xtext.common.Terminals"
msgstr ""

msgid "generate domainmodel \"http://www.example.org/domainmodel/Domainmodel\""
msgstr ""

msgid ""
"Model:\n"
"    greetings+=Greeting*;"
msgstr ""

msgid ""
"Greeting:\n"
"    'Hello' name=ID '!';\n"
"```"
msgstr ""

msgid ""
"To reuse an existing grammar, make sure the grammar file is on the classpath o"
"f the inheriting language. If it is in a different plug-in, make sure to add a"
" plug-in dependency in the `MANIFEST.MF`."
msgstr ""

msgid ""
"Mixing another grammar into a language makes the rules defined in that grammar"
" referable. It is also possible to overwrite rules from the used grammar. Exam"
"ple:"
msgstr ""

msgid ""
"```xtext\n"
"grammar my.SuperGrammar"
msgstr ""

msgid "generate super \"http://my.org/super\""
msgstr ""

msgid ""
"RuleA: 'a' stuff=RuleB;\n"
"RuleB: '{' name=ID '}';\n"
"```"
msgstr ""

msgid ""
"```xtext\n"
"grammar my.SubGrammar with my.SuperGrammar"
msgstr ""

msgid "import \"http://my.org/super\""
msgstr ""

msgid "Model: (ruleAs+=RuleA)*;"
msgstr ""

msgid ""
"// overrides my.SuperGrammar.RuleB\n"
"@Override\n"
"RuleB: '[' name=ID ']';\n"
"```"
msgstr ""

msgid ""
"Declared terminal rules always get a higher priority than imported terminal ru"
"les."
msgstr ""

msgid "### Common Terminals {#common-terminals}"
msgstr ""

msgid ""
"Xtext ships with a default set of predefined, reasonable and often required te"
"rminal rules. The grammar for these common terminal rules is defined as follow"
"s:"
msgstr ""

msgid ""
"```xtext\n"
"grammar org.eclipse.xtext.common.Terminals\n"
"    hidden(WS, ML_COMMENT, SL_COMMENT)"
msgstr ""
"```xtext\n"
"grammar org.eclipse.xtext.common.Terminals\n"
"    hidden(WS, ML_COMMENT, SL_COMMENT)"

msgid "import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore"
msgstr "import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore"

msgid ""
"terminal ID:\n"
"    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;"
msgstr ""
"terminal ID:\n"
"    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;"

msgid ""
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;"
msgstr ""
"terminal INT returns ecore::EInt:\n"
"    ('0'..'9')+;"

msgid ""
"terminal STRING:\n"
"    '\"' ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|'\"') )* '\"' |\n"
"    \"'\" ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|\"'\") )* \"'\";"
msgstr ""
"terminal STRING:\n"
"    '\"' ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|'\"') )* '\"' |\n"
"    \"'\" ( '\\\\'('b'|'t'|'n'|'f'|'r'|'u'|'\"'|\"'\"|'\\\\') | !('\\\\'|\"'\") )* \"'\";"

msgid ""
"terminal ML_COMMENT:\n"
"    '/*' -> '*/';"
msgstr ""
"terminal ML_COMMENT:\n"
"    '/*' -> '*/';"

msgid ""
"terminal SL_COMMENT:\n"
"    '//' !('\n"
"')?;"
msgstr ""
"terminal SL_COMMENT:\n"
"    '//' !('\n"
"')?;"

msgid ""
"terminal WS:\n"
"')+;"
msgstr ""
"terminal WS:\n"
"')+;"

msgid ""
"terminal ANY_OTHER:\n"
"    .;\n"
"```"
msgstr ""
"terminal ANY_OTHER:\n"
"    .;\n"
"```"

msgid "**[Next Chapter: Configuration](302_configuration.html)**"
msgstr "**[次章: コンフィギュレーション](302_configuration.html)**"
