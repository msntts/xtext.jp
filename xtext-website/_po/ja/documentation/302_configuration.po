msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: documentation\n"
"title: Configuration\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid "# {{page.title}} {#configuration}"
msgstr ""

msgid ""
"Xtext offers two levels on which you can configure your language: the language"
" generator and dependency injection. The language generator uses a special DSL"
" called MWE2 to configure the generator."
msgstr ""

msgid "## A Short Introduction to MWE2 {#short-intro-to-mwe}"
msgstr ""

msgid ""
"MWE2 (Modeling Workflow Engine) allows to compose object graphs declaratively "
"in a very compact manner. The nice thing about it is that it just instantiates"
" Java classes and the configuration is done through public setter and adder me"
"thods as known from Java Beans encapsulation principles. More in-depth informa"
"tion can be found in the [MWE2 documentation](https://github.com/eclipse/mwe/b"
"lob/master/documentation/mwe2.md)."
msgstr ""

msgid "Given the following simple Java class (POJO):"
msgstr ""

msgid ""
"```java\n"
"package com.mycompany;"
msgstr ""

msgid "public class Person {"
msgstr ""

msgid "  private String name;"
msgstr ""

msgid ""
"  public void setName(String name) {\n"
"    this.name = name;\n"
"  }"
msgstr ""

msgid "  private final List<Person> children = new ArrayList<Person>();"
msgstr ""

msgid ""
"  public void addChild(Person child) {\n"
"    this.children.add(child);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"One can create a family tree with MWE2 easily by describing it in a declarativ"
"e manner without writing a single line of Java code and without the need to co"
"mpile classes:"
msgstr ""

msgid ""
"```mwe2\n"
"module com.mycompany.CreatePersons"
msgstr ""

msgid ""
"Person {\n"
"  name = \"Grandpa\"\n"
"  child = Person {\n"
"    name = \"Father\"\n"
"    child = {\n"
"      name = \"Son\"\n"
"    }\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"These few lines will, when interpreted by MWE2, result in an object tree consi"
"sting of three instances of *com.mycompany.Person*. The interpreter will basic"
"ally do the same as the following *main* method:"
msgstr ""

msgid ""
"public class CreatePersons {\n"
"    public static void main(String[] args) {\n"
"        Person grandpa = new Person();\n"
"        grandpa.setName(\"Grandpa\");\n"
"        Person father = new Person();\n"
"        father.setName(\"Father\");\n"
"        grandpa.addChild(father);\n"
"        Person son = new Person();\n"
"        son.setName(\"Son\");\n"
"        father.addChild(son);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"And this is how it works: The root element is a plain Java class name. As this"
" MWE2 module is a sibling to the class *com.mycompany.Person* it is not necess"
"ary to use fully qualified name. The constructed objects are furthermore confi"
"gured according to the declaration in the module, i.e. a second instance of Pe"
"rson is created and added to the list of children of \"Grandpa\" while the third"
" person becomes a child of \"Father\". All three instances will have their respe"
"ctive *name* assigned via a reflective invocation of the *setName* method. Not"
"e that in this example the *Person* type for \"Father\" is given explicitly, whi"
"le for \"Son\" it is inferred from the assigned feature *child*."
msgstr ""

msgid ""
"*Hint: Whenever you are in an \\*.mwe2 file and wonder what kind of configurati"
"on the underlying component may accept: Just use content assist (ctrl + space)"
" in the MWE2 Editor or navigate directly to the declaration of the underlying "
"Java implementation by means of F3 (Go To Declaration).*"
msgstr ""

msgid ""
"Another frequently used feature of MWE2 is *variables*, which can be declared "
"with `var` as shown below. Such a variable can be reset from outside when call"
"ing the module, e.g. allowing to use different settings when calling it from a"
" Maven build. You can refer the variables inside strings using the `${variable"
"-name}` notation."
msgstr ""

msgid "var surname = \"Johnson\""
msgstr ""

msgid ""
"Person {\n"
"  name = \"John ${surname}\"\n"
"  child = {\n"
"    name = \"Jim ${surname}\"\n"
"  }\n"
"  child = {\n"
"    name = \"Jane ${surname}\"\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"Although arbitrary Java classes can be used, the standard root element for MWE"
"2 files is [Workflow]({{site.src.mwe}}/plugins/org.eclipse.emf.mwe2.runtime/sr"
"c/org/eclipse/emf/mwe2/runtime/workflow/Workflow.java), which is part of the v"
"ery slim runtime model shipped with MWE2. It accepts *beans* and *components*."
msgstr ""

msgid ""
"* The method Workflow.addBean(Object) provides a means to apply global side-ef"
"fects, which unfortunately is required sometimes. For instance, [StandaloneSet"
"up]({{site.src.mwe}}/plugins/org.eclipse.emf.mwe.utils/src/org/eclipse/emf/mwe"
"/utils/StandaloneSetup.java) can be used to initialize global EMF metadata suc"
"h as the [EPackage.Registry]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/sr"
"c/org/eclipse/emf/ecore/EPackage.java)."
msgstr ""

msgid ""
"* The method Workflow.addComponent(..) accepts instances of [IWorkflowComponen"
"t]({{site.src.mwe}}/plugins/org.eclipse.emf.mwe2.runtime/src/org/eclipse/emf/m"
"we2/runtime/workflow/IWorkflowComponent.java), which is the primary concept of"
" the workflow model of MWE2. The language generator component itself is an ins"
"tance of IWorkflowComponent and can therefore be used within MWE2 workflows."
msgstr ""

msgid ""
"We will now have a look at the component model used to configure the Xtext lan"
"guage generator."
msgstr ""

msgid "## The Language Generator {#generator}"
msgstr ""

msgid ""
"Xtext provides a lot of generic implementations for the infrastructure of your"
" language, but also uses code generation to create specialized components. Suc"
"h generated components are for instance the parser, the serializer, the inferr"
"ed Ecore model (if any) and a couple of convenient base classes for further co"
"nfiguration. The generator also contributes to shared project resources such a"
"s the *plugin.xml*, *MANIFEST.MF* and the [Guice modules](#guicemodules)."
msgstr ""

msgid ""
"This documentation is about the new generator infrastructure introduced with X"
"text 2.9. In order to migrate an older Xtext project to this new infrastructur"
"e, the recommended approach is to create a new Xtext project and copy the gram"
"mar and existing configuration from the old project to the new one step by ste"
"p."
msgstr ""

msgid ""
"The entry point for Xtext code generation is [XtextGenerator]({{site.src.xtext"
"_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generato"
"r/XtextGenerator.xtend), which is composed of a *general configuration* and a "
"set of *language configurations*. The general configuration describes the stru"
"cture of your project as well as general settings for generating code. Each la"
"nguage configuration corresponds to a specific grammar file and allows to conf"
"igure the generated code for the respective language. The actual code generati"
"on is performed by *generator fragments* contained in a language configuration"
"."
msgstr ""

msgid ""
"In the following we see an exemplary language generator configuration written "
"in MWE2:"
msgstr ""

msgid ""
"```mwe2\n"
"module org.example.domainmodel.GenerateDomainmodel"
msgstr ""

msgid ""
"import org.eclipse.xtext.xtext.generator.*\n"
"import org.eclipse.xtext.xtext.generator.model.project.*"
msgstr ""

msgid "var rootPath = \"..\""
msgstr ""

msgid ""
"Workflow {\n"
"    component = XtextGenerator {\n"
"        configuration = {\n"
"            project = StandardProjectConfig {\n"
"                baseName = \"org.example.domainmodel\"\n"
"                rootPath = rootPath\n"
"                eclipsePlugin = {\n"
"                    enabled = true\n"
"                }\n"
"                createEclipseMetaData = true\n"
"            }\n"
"            code = {\n"
"                encoding = \"UTF-8\"\n"
"            }\n"
"        }\n"
"        language = StandardLanguage {\n"
"            name = \"org.example.domainmodel.Domainmodel\"\n"
"            fileExtensions = \"dmodel\""
msgstr ""

msgid ""
"            serializer = {\n"
"                generateStub = false\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"This example is similar to the workflows generated by the Xtext project wizard"
" when you create new projects. It uses two convenience classes [StandardProjec"
"tConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/ecl"
"ipse/xtext/xtext/generator/model/project/StandardProjectConfig.java) and [Stan"
"dardLanguage]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/or"
"g/eclipse/xtext/xtext/generator/StandardLanguage.java), both of which are desi"
"gned to apply default configurations that work for the majority of language pr"
"ojects."
msgstr ""

msgid "### Project Configuration {#project-configuration}"
msgstr ""

msgid ""
"The Xtext generator needs to know the structure of your project in order to ge"
"nerate code into the correct paths. The base class for describing the project "
"structure is [XtextProjectConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xt"
"ext.generator/src/org/eclipse/xtext/xtext/generator/model/project/XtextProject"
"Config.java). It is composed of several descriptors for the individual subproj"
"ects:"
msgstr ""

msgid ""
"* `runtime` &ndash; The basic language features: grammar definition, parser, s"
"erializer, scoping, validation, etc.\n"
"* `runtimeTest` &ndash; Unit tests for `runtime`\n"
"* `genericIde` &ndash; Platform-independent IDE features such as services for "
"content assist\n"
"* `eclipsePlugin` &ndash; Integration plug-in for Eclipse\n"
"* `eclipsePluginTest` &ndash; Unit tests for `eclipsePlugin`\n"
"* `web` &ndash; Integration into web applications"
msgstr ""

msgid ""
"These subprojects are of type [SubProjectConfig]({{site.src.xtext_core}}/org.e"
"clipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/proje"
"ct/SubProjectConfig.java) and offer important parameters:"
msgstr ""

msgid ""
"* `enabled` &ndash; whether the subproject is present or not\n"
"* `name` &ndash; the name of the subproject\n"
"* `root` &ndash; the path to the root folder of the subproject\n"
"* `src` &ndash; the path to the folder for Java source files\n"
"* `srcGen` &ndash; the path to the folder for generated Java source files\n"
"* `manifest` &ndash; configuration for the MANIFEST.MF file\n"
"* `pluginXml` &ndash; configuration for the plugin.xml file"
msgstr ""

msgid ""
"Since setting all these parameters manually would be tedious and the structure"
" of most Xtext projects is quite similar, it is advisable to use the [Standard"
"ProjectConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/o"
"rg/eclipse/xtext/xtext/generator/model/project/StandardProjectConfig.java) as "
"shown in our example above. This specialized project configuration applies def"
"ault values to all parameters, so you only have to specify those where you wis"
"h to override the defaults. For example, given the configuration"
msgstr ""

msgid ""
"```mwe2\n"
"project = StandardProjectConfig {\n"
"    baseName = \"org.example.domainmodel\"\n"
"    rootPath = rootPath\n"
"    eclipsePlugin = {\n"
"        enabled = true\n"
"    }\n"
"    createEclipseMetaData = true\n"
"}\n"
"```"
msgstr ""

msgid ""
"we obtain a runtime project with the name `org.example.domainmodel`, an Eclips"
"e integration project with the name `org.example.domainmodel.ui`, and a generi"
"c IDE project with the name `org.example.domainmodel.ide` (the generic IDE pro"
"ject is enabled automatically if any integration project is enabled). The sour"
"ce folder, MANIFEST.MF and plugin.xml paths are set to the defaults for Eclips"
"e plug-in projects. If you don't want a separate IDE project you can merge its"
" content into another subproject by assigning it the same name:"
msgstr ""

msgid ""
"```mwe2\n"
"project = StandardProjectConfig {\n"
"    baseName = \"org.example.domainmodel\"\n"
"    rootPath = rootPath\n"
"    genericIde = {\n"
"        name = \"org.example.domainmodel.ui\"\n"
"    }\n"
"    eclipsePlugin = {\n"
"        enabled = true\n"
"    }\n"
"    createEclipseMetaData = true\n"
"}\n"
"```"
msgstr ""

msgid ""
"This leads to the generic IDE code being generated into the Eclipse integratio"
"n plug-in."
msgstr ""

msgid "### Other General Configuration"
msgstr ""

msgid ""
"The configuration block of our generator workflow example above contains a [Co"
"deConfig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/ec"
"lipse/xtext/xtext/generator/CodeConfig.java) as sibling of [StandardProjectCon"
"fig]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse"
"/xtext/xtext/generator/model/project/StandardProjectConfig.java). As the name "
"suggests, the parameters of CodeConfig influence the generated code:"
msgstr ""

msgid ""
"* `encoding` &ndash; The character encoding\n"
"* `fileHeader` &ndash; The file header comment to insert at the beginning of e"
"ach file\n"
"* `preferXtendStubs` &ndash; Whether to prefer Xtend over Java for stub files "
"to be implemented manually; this option applies only to files in `src` folders"
", while for `src-gen` folders Java files are always generated."
msgstr ""

msgid ""
"The container for the [StandardProjectConfig]({{site.src.xtext_core}}/org.ecli"
"pse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/"
"StandardProjectConfig.java) and [CodeConfig]({{site.src.xtext_core}}/org.eclip"
"se.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CodeConfig.java"
") is of type [DefaultGeneratorModule]({{site.src.xtext_core}}/org.eclipse.xtex"
"t.xtext.generator/src/org/eclipse/xtext/xtext/generator/DefaultGeneratorModule"
".java) and is assigned to the property `configuration` of the [XtextGenerator]"
"({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xte"
"xt/xtext/generator/XtextGenerator.xtend). The DefaultGeneratorModule is actual"
"ly a [Guice](https://github.com/google/guice) module, which can be subclassed "
"in a similar way as explained in [Dependency Injection](#dependency-injection)"
" for overriding default configurations. This allows to alter the configuration"
" in places that are not accessible through MWE2. For instance, you could bind "
"your own subclass of [XtextGeneratorNaming]({{site.src.xtext_core}}/org.eclips"
"e.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextGeneratorNa"
"ming.java) in order to influence the names of generated classes."
msgstr ""

msgid "### Language Configuration {#language-configuration}"
msgstr ""

msgid ""
"The base class for describing a language configuration is [XtextGeneratorLangu"
"age]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse"
"/xtext/xtext/generator/XtextGeneratorLanguage.java), whose most important para"
"meters are"
msgstr ""

msgid ""
"* `name` &ndash; The name of the language exactly as specified in the first li"
"ne of your grammar definition\n"
"* `grammarUri` &ndash; A [URI]({{site.src.emf}}/plugins/org.eclipse.emf.common"
"/src/org/eclipse/emf/common/util/URI.java) pointing to the grammar definition "
"file; if omitted, the grammar file is assumed to be in the Java source folder "
"of the runtime project and to be named according to the language name.\n"
"* `fileExtensions` &ndash; A comma-separated list of file extensions for the l"
"anguage\n"
"* `referencedResources` &ndash; Additional resources to load (see [Importing E"
"xisting Metamodels](#importing-metamodels))"
msgstr ""

msgid ""
"The actual code generation is performed by [generator fragments]({{site.src.xt"
"ext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/gener"
"ator/IXtextGeneratorFragment.java), which can be added to a language configura"
"tion using the `fragment` property. The Xtext project wizard creates a workflo"
"w that employs the [StandardLanguage]({{site.src.xtext_core}}/org.eclipse.xtex"
"t.xtext.generator/src/org/eclipse/xtext/xtext/generator/StandardLanguage.java)"
", which specializes XtextGeneratorLanguage in a similar way as StandardProject"
"Config specializes XtextProjectConfig (see [Project Configuration](#project-co"
"nfiguration)). The main contribution of StandardLanguage is a default list of "
"generator fragments that includes all features of Xtext. These fragments autom"
"atically adapt their generated code to your language and project configuration"
". Some fragments offer their own configuration parameters, hence each fragment"
" can be accessed via a dedicated property in StandardLanguage. For instance, i"
"n the language configuration"
msgstr ""

msgid ""
"```mwe2\n"
"language = StandardLanguage {\n"
"    name = \"org.example.domainmodel.Domainmodel\"\n"
"    fileExtensions = \"dmodel\""
msgstr ""

msgid ""
"    serializer = {\n"
"        generateStub = false\n"
"    }\n"
"}\n"
"```\n"
"we see the `generateStub` parameter disabled for the `serializer` fragment, wh"
"ich means that the fragment should not create any stub file for customizing se"
"rialization."
msgstr ""

msgid ""
"It is not possible to remove fragments from the [StandardLanguage]({{site.src."
"xtext_core}}/org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/gen"
"erator/StandardLanguage.java). If you need a language configuration where one "
"or more of the default fragments are omitted, you can do so by using [XtextGen"
"eratorLanguage]({{site.src.xtext_core}}/org.eclipse.xtext.xtext.generator/src/"
"org/eclipse/xtext/xtext/generator/XtextGeneratorLanguage.java) instead and lis"
"ting the required fragments explicitly. You can take the following configurati"
"on as a template:"
msgstr ""

msgid ""
"```mwe2\n"
"language = XtextGeneratorLanguage {\n"
"    name = \"org.example.domainmodel.Domainmodel\"\n"
"    fileExtensions = \"dmodel\"\n"
"    referencedResource = \"platform:/resource/org.eclipse.xtext.xbase/model/Xba"
"se.genmodel\""
msgstr ""

msgid ""
"    fragment = grammarAccess.GrammarAccessFragment2 {}\n"
"    fragment = ecore.EMFGeneratorFragment2 {}\n"
"    fragment = serializer.SerializerFragment2 {}\n"
"    fragment = resourceFactory.ResourceFactoryFragment2 {}\n"
"    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}\n"
"    fragment = validation.ValidatorFragment2 {}\n"
"    fragment = scoping.ImportNamespacesScopingFragment2 {}\n"
"    fragment = exporting.QualifiedNamesFragment2 {}\n"
"    fragment = builder.BuilderIntegrationFragment2 {}\n"
"    fragment = generator.GeneratorFragment2 {}\n"
"    fragment = formatting.Formatter2Fragment2 {}\n"
"    fragment = ui.labeling.LabelProviderFragment2 {}\n"
"    fragment = ui.outline.QuickOutlineFragment2 {}\n"
"    fragment = ui.outline.OutlineTreeProviderFragment2 {}\n"
"    fragment = ui.quickfix.QuickfixProviderFragment2 {}\n"
"    fragment = ui.contentAssist.ContentAssistFragment2 {}\n"
"    fragment = junit.JunitFragment {}\n"
"    fragment = ui.refactoring.RefactorElementNameFragment2 {}\n"
"    fragment = types.TypesGeneratorFragment2 {}\n"
"    fragment = xbase.XtypeGeneratorFragment2 {}\n"
"    fragment = xbase.XbaseGeneratorFragment2 {}\n"
"    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}\n"
"    fragment = ui.compare.CompareFragment2 {}\n"
"    fragment = web.WebIntegrationFragment {\n"
"        framework = \"Ace\"\n"
"    }\n"
"    fragment = ui.projectWizard.TemplateProjectWizardFragment {}\n"
"    fragment = ui.fileWizard.TemplateFileWizardFragment {}\n"
"}\n"
"```"
msgstr ""

msgid "### Importing Existing Metamodels {#importing-metamodels}"
msgstr ""

msgid ""
"As explained in the [grammar language reference](301_grammarlanguage.html#epac"
"kage-import) it is possible to import existing metamodels into your language d"
"efinition."
msgstr ""

msgid ""
"You can use namespace URIs in your grammar file in order to import existing EP"
"ackages. This is generally preferable, and other URI schemes are considered de"
"precated. With a namespace URI the package will be read from the Xtext index a"
"nd therefore your grammar is independent from the concrete location of the res"
"pective ecore file. You have to make sure though that the ecore file is contai"
"ned in a project that is managed by Xtext. Therefore the project has to have t"
"he Xtext project nature attached. Ecore files that reside in referenced Java a"
"rchives (JARs) are automatically picked up and indexed if the referencing proj"
"ect itself is an Xtext project."
msgstr ""

msgid ""
"In order to be able to find the referenced package in the language generator, "
"its Ecore generator model has to be mentioned in the language configuration:"
msgstr ""

msgid ""
"```mwe2\n"
"language = StandardLanguage {\n"
"    name = \"org.example.domainmodel.Domainmodel\"\n"
"    fileExtensions = \"dmodel\"\n"
"    referencedResource =\n"
"        \"platform:/resource/org.example.domainmodel/model/Domainmodel.genmodel"
"\"\n"
"}\n"
"```"
msgstr ""

msgid ""
"If you are importing more than one metamodel, you can add more `referencedReso"
"urce` declarations as required."
msgstr ""

msgid ""
"In some occasions this simple way of referencing metamodels is not sufficient;"
" you can then use the [StandaloneSetup]({{site.src.mwe}}/plugins/org.eclipse.e"
"mf.mwe.utils/src/org/eclipse/emf/mwe/utils/StandaloneSetup.java) as a Workflow"
" bean for fine-tuning your EMF setup. Example:"
msgstr ""

msgid ""
"```mwe2\n"
"bean = StandaloneSetup {\n"
"    platformUri = \"${rootPath}\"\n"
"    scanClassPath = true\n"
"    registerGeneratedEPackage = \"my.project.DomainmodelPackage\"\n"
"    registerGenModelFile = \"platform:/resource/my.project/model/Domainmodel.ge"
"nmodel\"\n"
"}\n"
"```"
msgstr ""

msgid "---"
msgstr ""

msgid "## Dependency Injection {#dependency-injection}"
msgstr ""

msgid ""
"All Xtext components are assembled by means of dependency injection (DI). This"
" means basically that whenever some code is in need for functionality (or stat"
"e) from another component, one just declares the dependency rather than statin"
"g how to resolve it, i.e. obtaining that component."
msgstr ""

msgid ""
"For instance when some code wants to use a scope provider, it just declares a "
"field (or method or constructor) and adds the [Inject]({{site.javadoc.guice}}/"
"com/google/inject/Inject.html) annotation:"
msgstr ""

msgid ""
"```java\n"
"public class MyLanguageLinker extends Linker {"
msgstr ""

msgid ""
"    @Inject\n"
"    private IScopeProvider scopeProvider;"
msgstr ""

msgid ""
"}\n"
"```"
msgstr ""

msgid ""
"It is not the duty of the client code to care about where the [IScopeProvider]"
"({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/IScop"
"eProvider.java) implementation comes from or how it is created. When the above"
" class is instantiated, Guice sees that it requires an instance of IScopeProvi"
"der and assigns it to the specified field or method parameter. This of course "
"only works if the object itself is created by Guice. In Xtext almost every ins"
"tance is created that way and therefore the whole dependency net is controlled"
" and configured by the means of Guice."
msgstr ""

msgid ""
"Guice of course needs to know how to instantiate real objects for declared dep"
"endencies. This is done in so-called Modules. A [Module]({{site.javadoc.guice}"
"}/com/google/inject/Module.html) defines a set of mappings from types to eithe"
"r existing instances, instance providers or concrete classes. Modules are impl"
"emented in Java. Here's an example:"
msgstr ""

msgid ""
"```java\n"
"public class MyDslRuntimeModule implements Module {"
msgstr ""

msgid ""
"    @Override\n"
"    public void configure(Binder binder) {\n"
"        binder\n"
"            .bind(IScopeProvider.class)\n"
"            .to(MyConcreteScopeProvider.class);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"With plain Guice modules one implements a method called configure and gets a ["
"Binder]({{site.javadoc.guice}}/com/google/inject/Binder.html) passed in. That "
"binder provides a fluent API to define the mentioned mappings."
msgstr ""

msgid "### The Module API {#guicemodules}"
msgstr ""

msgid ""
"After running the Xtext generator you get several different modules for your l"
"anguage: one for the base project, one for the generic ide project, and one fo"
"r each platform integration project. For instance, for a language named *Domai"
"nmodel* we would have a *DomainmodelRuntimeModule*, a *DomainmodelIdeModule* ("
"IDE independent UI services), a *DomainmodelUiModule* (for the Eclipse integra"
"tion), and a *DomainmodelWebModule*. The bindings from the runtime module are "
"shared by all integration projects."
msgstr ""

msgid ""
"Xtext comes with a slightly enhanced module API. The abstract base class [Abst"
"ractGenericModule]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/service/AbstractGenericModule.java) looks reflectively for certain method"
"s in order to find declared bindings. The most common kind of method is"
msgstr ""

msgid ""
"```java\n"
"public Class<? extends IScopeProvider> bindIScopeProvider() {\n"
"    return MyConcreteScopeProvider.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"which would do the same as the code snippet above. It simply declares a bindin"
"g from [IScopeProvider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecli"
"pse/xtext/scoping/IScopeProvider.java) to *MyConcreteScopeProvider*. That bind"
"ing will make Guice instantiate and inject a new instance of *MyConcreteScopeP"
"rovider* whenever a dependency to [IScopeProvider]({{site.src.xtext_core}}/org"
".eclipse.xtext/src/org/eclipse/xtext/scoping/IScopeProvider.java) is declared."
msgstr ""

msgid ""
"Having one method per binding allows to deactivate individual bindings by over"
"riding the corresponding methods and either change the binding by returning a "
"different target type or removing that binding completely by returning null."
msgstr ""

msgid ""
"There are two additional kinds of binding-methods supported. The first one all"
"ows to configure a [Provider]({{site.javadoc.guice}}/com/google/inject/Provide"
"r.html), which is like a factory for one specific type. This one can be used i"
"f you need a hook whenever an instance of a certain type is created. For insta"
"nce if you want to provide lazy access to a singleton or you need to do some c"
"omputation each time an instance is created (i.e. factory). If you want to poi"
"nt to a provider rather than to a concrete class you can use the following bin"
"ding method."
msgstr ""

msgid ""
"```java\n"
"public Class<? extends Provider<IScopeProvider>> provideIScopeProvider() {\n"
"    return MyConcreteScopeProviderFactory.class;\n"
"}\n"
"```"
msgstr ""

msgid ""
"Note: Please forgive us the overuse of the term *provider*. The [IScopeProvide"
"r]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/ISc"
"opeProvider.java) is not a Guice [Provider]({{site.javadoc.guice}}/com/google/"
"inject/Provider.html)."
msgstr ""

msgid ""
"That binding tells Guice to instantiate *MyConcreteScopeProviderFactory* and i"
"nvoke get() in order to obtain an instance of [IScopeProvider]({{site.src.xtex"
"t_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scoping/IScopeProvider.java) "
"for clients having declared a dependency to that type. Both mentioned binding "
"methods are allowed to return an instance instead of a type. This may be usefu"
"l if some global state should be shared in the application. For a simple insta"
"nce this would be"
msgstr ""

msgid ""
"```java\n"
"public IScopeProvider bindIScopeProvider() {\n"
"    return new MyConcreteScopeProvider();\n"
"}\n"
"```"
msgstr ""

msgid "and for a provider binding"
msgstr ""

msgid ""
"```java\n"
"public Provider<IScopeProvider> provideIScopeProvider() {\n"
"    return new MyConcreteScopeProviderFactory();\n"
"}\n"
"```"
msgstr ""

msgid ""
"The third binding method provided by Xtext allows to do anything you can do wi"
"th the binding API of Guice, since it allows you to use the [Binder]({{site.ja"
"vadoc.guice}}/com/google/inject/Binder.html) directly. The name of the method "
"has to start with the 'configure', the return type must be `void`, and it must"
" accept one argument of type [Binder]({{site.javadoc.guice}}/com/google/inject"
"/Binder.html):"
msgstr ""

msgid ""
"```java\n"
"public void configureIScopeProvider(Binder binder) {\n"
"    binder.bind(IScopeProvider.class).to(MyConcreteScopeProvider.class);\n"
"} \n"
"```"
msgstr ""

msgid ""
"These are the basic ideas around Guice and the small extension Xtext provides "
"on top. For more information we strongly encourage you to read through the doc"
"umentation on [the website of Google Guice](https://github.com/google/guice)."
msgstr ""

msgid "### Obtaining an Injector"
msgstr ""

msgid ""
"In every application wired up with Guice there is usually one point where you "
"initialize an [Injector]({{site.javadoc.guice}}/com/google/inject/Injector.htm"
"l) using the modules declared. Usually this is done with the static methods of"
" [Guice]({{site.javadoc.guice}}/com/google/inject/Guice.html). In Xtext, howev"
"er, you should never instantiate the injector of your language yourself."
msgstr ""

msgid ""
"Xtext may be used in different environments which introduce different constrai"
"nts. Especially important is the difference between OSGi managed containers an"
"d plain vanilla Java programs. To honor these differences Xtext uses the conce"
"pt of [ISetup]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext"
"/ISetup.java) implementations in normal mode and uses the extension mechanism "
"of Eclipse when it should be configured in an OSGi environment."
msgstr ""

msgid "#### Runtime Setup {#runtime-setup}"
msgstr ""

msgid ""
"For each language there is an implementation of [ISetup]({{site.src.xtext_core"
"}}/org.eclipse.xtext/src/org/eclipse/xtext/ISetup.java) generated. It implemen"
"ts a method called `createInjectorAndDoEMFRegistration()`, which can be called"
" to do the initialization of the language infrastructure."
msgstr ""

msgid ""
"```java\n"
"public static void main(String[] args) {\n"
"    Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegis"
"tration();\n"
"    MyApplication application = injector.getInstance(MyApplication.class);\n"
"    application.run();\n"
"}\n"
"```"
msgstr ""

msgid ""
"The setup method returns an [Injector]({{site.javadoc.guice}}/com/google/injec"
"t/Injector.html), which can further be used to obtain a parser, etc. It also r"
"egisters the [Resource.Factory]({{site.src.emf}}/plugins/org.eclipse.emf.ecore"
"/src/org/eclipse/emf/ecore/resource/Resource.java) and generated [EPackages]({"
"{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPacka"
"ge.java) to the respective global registries provided by EMF. So basically aft"
"er having run the setup you can start using EMF API to load and store models o"
"f your language."
msgstr ""

msgid ""
"**Caveat:** The [ISetup]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/ecl"
"ipse/xtext/ISetup.java) class is intended to be used for runtime and for unit "
"testing, only. If you use it in an Equinox scenario, you will very likely brea"
"k the running application because entries to the global registries will be ove"
"rwritten."
msgstr ""

msgid "#### Setup within Eclipse-Equinox (OSGi) {#equinox-setup}"
msgstr ""

msgid ""
"Within Eclipse we have a generated *Activator*, which creates a Guice [Injecto"
"r]({{site.javadoc.guice}}/com/google/inject/Injector.html) using the [modules]"
"(#guicemodules). In addition an [IExecutableExtensionFactory]({{site.javadoc.e"
"clipse-platform}}/org/eclipse/core/runtime/IExecutableExtensionFactory.html) i"
"s generated for each language, which is used to create [IExecutableExtensions]"
"({{site.javadoc.eclipse-platform}}/org/eclipse/core/runtime/IExecutableExtensi"
"on.html). This means that everything which is created via extension points is "
"managed by Guice as well, i.e. you can declare dependencies and get them injec"
"ted upon creation."
msgstr ""

msgid ""
"The only thing you have to do in order to use this factory is to prefix the cl"
"ass with the generated *ExecutableExtensionFactory* name followed by a colon."
msgstr ""

msgid ""
"```xml\n"
"<extension point=\"org.eclipse.ui.editors\">\n"
"  <editor\n"
"    class=\n"
"      \"example.MyDslExecutableExtensionFactory:org.eclipse.xtext.ui.editor.Xte"
"xtEditor\"\n"
"    contributorClass=\n"
"      \"org.eclipse.ui.editors.text.TextEditorActionContributor\"\n"
"    default=\"true\"\n"
"    extensions=\"mydsl\"\n"
"    id=\"org.eclipse.xtext.example.MyDsl\"\n"
"    name=\"MyDsl Editor\">\n"
"  </editor>\n"
"</extension>\n"
"```"
msgstr ""

msgid "## Logging"
msgstr ""

msgid ""
"Xtext uses [Apache Log4j](http://logging.apache.org/log4j/) for logging. It is"
" configured using files named *log4j.properties*, which are looked up in the r"
"oot of the Java class path. If you want to change or provide configuration at "
"runtime (i.e. non-OSGi), all you have to do is putting such a *log4j.propertie"
"s* in place and make sure that it is not overridden by other *log4j.properties"
"* in previous class path entries."
msgstr ""

msgid ""
"In OSGi you provide configuration by creating a fragment for *org.apache.log4j"
"*. In this case you need to make sure that there is not any second fragment co"
"ntributing a *log4j.properties* file."
msgstr ""

msgid "**[Next Chapter: Language Implementation](303_runtime_concepts.html)**"
msgstr ""
