msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: documentation\n"
"title: Integration with EMF\n"
"part: Reference Documentation\n"
"---"
msgstr ""

msgid "# {{page.title}} {#emf-integration}"
msgstr ""

msgid ""
"Xtext relies heavily on EMF internally, but it can also be used as the seriali"
"zation back-end of other EMF-based tools. In this section we introduce the bas"
"ic concepts of the [Eclipse Modeling Framework (EMF)](http://www.eclipse.org/m"
"odeling/emf/) in the context of Xtext. If you want to learn more about EMF, we"
" recommend reading the [EMF book](http://www.eclipse.org/modeling/emf/)."
msgstr ""

msgid "## Model, Ecore Model, and Ecore {#model-metamodel}"
msgstr ""

msgid ""
"Xtext uses EMF models as the in-memory representation of any parsed text files"
". This in-memory object graph is called the *abstract syntax tree* (AST). Depe"
"nding on the community this concepts is also called *document object model (DO"
"M)*, *semantic model*, or simply *model*. We use *model* and *AST* interchange"
"ably. Given the example model from the [domainmodel tutorial](102_domainmodelw"
"alkthrough.html), the AST looks similar to this"
msgstr ""

msgid "![Sample AST](images/ast.png)"
msgstr ""

msgid ""
"The *AST* should contain the essence of your textual models. It abstracts over"
" syntactical information. It is used by later processing steps, such as valida"
"tion, compilation or interpretation. In EMF a model is made up of instances of"
" *EObjects* which are connected. An [EObject]({{site.src.emf}}/plugins/org.ecl"
"ipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) is an instance of an [E"
"Class]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecor"
"e/EClass.java). A set of *EClasses* can be contained in a so called [EPackage]"
"({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPac"
"kage.java), which are both concepts of *Ecore*. In Xtext, meta-models are eith"
"er inferred from the grammar or predefined by the user (see the section on [EP"
"ackage declarations](301_grammarlanguage.html#package-declarations) for detail"
"s). The next diagram shows the meta-model of our example:"
msgstr ""

msgid "![Sample meta model](images/metamodel.png)"
msgstr ""

msgid ""
"The language in which the meta-model is defined is called *Ecore*. In other wo"
"rds, the meta-model is the Ecore model of your language. Ecore is an essential"
" part of EMF. Your models instantiate the meta-model, and your meta-model inst"
"antiates Ecore. To put an end to this recursion, Ecore is defined in itself (a"
"n instance of itself)."
msgstr ""

msgid ""
"The meta-model defines the types of the semantic nodes as Ecore *EClasses*. EC"
"lasses are shown as boxes in the meta-model diagram, so in our example, *Model"
"*, *Type*, *SimpleType*, *Entity*, and *Property* are EClasses. An EClass can "
"inherit from other EClasses. Multiple inheritance is allowed in Ecore, but of "
"course cycles are forbidden."
msgstr ""

msgid ""
"EClasses can have *EAttributes* for their simple properties. These are shown i"
"nside the EClasses nodes. The example contains two EAttributes *name* and one "
"EAttribute *multi*. The domain of values for an EAttribute is defined by its *"
"EDataType*. Ecore ships with some predefined *EDataTypes*, which essentially r"
"efer to Java primitive types and other immutable classes like [String]({{site."
"javadoc.java}}/java/lang/String.html). To make a distinction from the Java typ"
"es, the *EDataTypes* are prefixed with an *E*. In our example, that is *EStrin"
"g* and *EBoolean*."
msgstr ""

msgid ""
"In contrast to EAttributes, *EReferences* point to other EClasses. The *contai"
"nment* flag indicates whether an EReference is a *containment reference* or a "
"*cross-reference*. In the diagram, references are edges and containment refere"
"nces are marked with a diamond. At the model level, each element can have at m"
"ost one container, i.e. another element referring to it with a containment ref"
"erence. This infers a tree structure to the models, as can be seen in the samp"
"le model diagram. On the other hand, *cross-references* refer to elements that"
" can be contained anywhere else. In the example, *elements* and *properties* a"
"re containment references, while *type* and *extends* are cross-references. Fo"
"r reasons of readability, we skipped the cross-references in the sample model "
"diagram. Note that in contrast to other parser generators, Xtext creates ASTs "
"with linked cross-references."
msgstr ""

msgid ""
"Other than associations in UML, EReferences in Ecore are always owned by one E"
"Class and only navigable in the direction form the owner to the type. Bi-direc"
"tional associations must be modeled as two references, being *eOpposite* of ea"
"ch other and owned by one end of the associations."
msgstr ""

msgid ""
"The superclass of EAttributes and EReferences is *EStructuralFeature* and allo"
"ws to define a name and a cardinality by setting *lowerBound* and *upperBound*"
". Setting the latter to -1 means 'unbounded'."
msgstr ""

msgid ""
"The common super type of EDataType and EClass is *EClassifier*. An [EPackage]("
"{{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EPack"
"age.java) acts as a namespace and container of EClassifiers."
msgstr ""

msgid ""
"We have summarized these most relevant concepts of Ecore in the following diag"
"ram:"
msgstr ""

msgid "![Ecore concepts](images/ecore.png)"
msgstr ""

msgid "## EMF Code Generation {#emf-codegen}"
msgstr ""

msgid ""
"EMF also ships with a code generator that generates Java classes from your Eco"
"re model. The code generators input is the so called *EMF generator model*. It"
" decorates (references) the Ecore model and adds additional information for th"
"e Ecore &rarr; Java transformation. Xtext will automatically generate a genera"
"tor model with reasonable defaults for all generated meta-models, and run the "
"EMF code generator on them."
msgstr ""

msgid ""
"The generated classes are based on the EMF runtime library, which offers a lot"
" of infrastructure and tools to work with your models, such as persistence, re"
"flection, referential integrity, lazy loading etc."
msgstr ""

msgid "Among other things, the code generator will generate"
msgstr ""

msgid ""
"*   A Java interface and a Java class for each EClassifier in your Ecore model"
". By default, all classes will implement the interface [EObject]({{site.src.em"
"f}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java), lin"
"king a lot of runtime functionality. \n"
"*   A Java bean property for each EStructuralFeature (member variable, accesso"
"r methods).\n"
"*   A package interface and class, holding singleton objects for all elements "
"of your Ecore model, allowing reflection. EPackages are also registered to the"
" [Registry]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf"
"/ecore/EPackage.java) to be usable at runtime.\n"
"*   A factory interface and class for creating instances.\n"
"*   An abstract switch class implementing a visitor pattern to avoid if-instan"
"ceof-cascades in your code."
msgstr ""

msgid "## XtextResource Implementation {#xtext-resource}"
msgstr ""

msgid ""
"Xtext provides an implementation of EMF's resource, the [XtextResource]({{site"
".src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResour"
"ce.java). This does not only encapsulate the parser that converts text to an E"
"MF model but also the [serializer](303_runtime_concepts.html#serialization) wo"
"rking the opposite direction. That way, an Xtext model just looks like any oth"
"er Ecore-based model from the outside, making it amenable for the use by other"
" EMF based tools. So in the ideal case, you can switch the serialization forma"
"t of your models to your self-defined DSL by just replacing the resource imple"
"mentation used by your other modeling tools."
msgstr ""

msgid "![](images/emf-integration.png)"
msgstr ""

msgid ""
"The generator fragment [ResourceFactoryFragment2]({{site.src.xtext_core}}/org."
"eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/resourceFa"
"ctory/ResourceFactoryFragment2.xtend) registers a factory for the [XtextResour"
"ce]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/X"
"textResource.java) to EMF's resource factory registry, such that all tools usi"
"ng the default mechanism to resolve a resource implementation will automatical"
"ly get that resource implementation."
msgstr ""

msgid ""
"Using a self-defined textual syntax as the primary storage format has a number"
" of advantages over the default XMI serialization, e.g."
msgstr ""

msgid ""
"*   You can use well-known and easy-to-use tools and techniques for manipulati"
"on, such as text editors, regular expressions, or stream editors.\n"
"*   You can use the same tools for version control as you use for source code."
" Comparing and merging is performed in a syntax the developer is familiar with"
".\n"
"*   It is impossible to break the model such that it cannot be reopened in the"
" editor again.\n"
"*   Models can be fixed using the same tools, even if they have become incompa"
"tible with a new version of the Ecore model."
msgstr ""

msgid ""
"Xtext targets easy to use and naturally feeling languages. It focuses on the l"
"exical aspects of a language a bit more than on the semantic ones. As a conseq"
"uence, a referenced Ecore model can contain more concepts than are actually co"
"vered by the Xtext grammar. As a result, not everything that is possibly expre"
"ssed in the EMF model can be serialized back into a textual representation wit"
"h regards to the grammar. So if you want to use Xtext to serialize your models"
" as described above, it is good to have a couple of things in mind:"
msgstr ""

msgid ""
"*   Prefer optional rule calls (cardinality *?* or *\\**) to mandatory ones (ca"
"rdinality *+* or default), such that missing references will not obstruct seri"
"alization.\n"
"*   You should not use an Xtext-Editor on the same model instance as a self-sy"
"nchronizing other editor, e.g. a canonical GMF editor (see the [EMF integratio"
"n chapter](308_emf_integration.html#gmf-integration-stage1) for details). The "
"Xtext parser replaces re-parsed subtrees of the AST rather than modifying it, "
"so elements will become stale. As the Xtext editor continuously re-parses the "
"model on changes, this will happen rather often. It is safer to synchronize ed"
"itors more loosely, e.g. on file changes.\n"
"*   Implement an [IFragmentProvider](#fragment-provider) to make the XtextReso"
"urce return stable fragments for its contained elements, e.g. based on composi"
"te names rather than order of appearance.\n"
"*   Implement an [IQualifiedNameProvider]({{site.src.xtext_core}}/org.eclipse."
"xtext/src/org/eclipse/xtext/naming/IQualifiedNameProvider.java) and an [IScope"
"Provider]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/scop"
"ing/IScopeProvider.java) ([how-to](303_runtime_concepts.html#scoping)) to make"
" the names of all linkable elements in cross-references unique.\n"
"*   Provide an [IFormatter]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/"
"eclipse/xtext/formatting/IFormatter.java) ([how-to](303_runtime_concepts.html#"
"formatting)) to improve the readability of the generated textual models.\n"
"*   Register an [IReferableElementsUnloader]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/parser/antlr/IReferableElementsUnloader.java) t"
"o turn deleted/replaced model elements into EMF proxies. Design the rest of yo"
"ur application such that it does never keep references to [EObjects]({{site.sr"
"c.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) "
"or to cope with proxies. That will improve the stability of your application d"
"rastically.\n"
"*   Xtext will register an EMF [Factory]({{site.src.emf}}/plugins/org.eclipse."
"emf.ecore/src/org/eclipse/emf/ecore/resource/Resource.java), so resources with"
" the file extension you entered when generating the Xtext plug-ins will be aut"
"omatically loaded in an [XtextResource]({{site.src.xtext_core}}/org.eclipse.xt"
"ext/src/org/eclipse/xtext/resource/XtextResource.java) when you use EMF's [Res"
"ourceSet]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/e"
"core/resource/ResourceSet.java) API to load it."
msgstr ""

msgid "## Referencing From EMF {#fragment-provider}"
msgstr ""

msgid ""
"In some cases you may want to be able to reference an [EObject]({{site.src.emf"
"}}/plugins/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) of an"
" Xtext model from another EMF artifact that is not managed by Xtext. In those "
"cases URIs are used, which are made up of a part identifying the resource and "
"a second part that points to an object. Each [EObject]({{site.src.emf}}/plugin"
"s/org.eclipse.emf.ecore/src/org/eclipse/emf/ecore/EObject.java) contained in a"
" resource can be identified by a so called *fragment*."
msgstr ""

msgid "A fragment is a part of an EMF URI and needs to be unique per resource."
msgstr ""

msgid ""
"The generic resource shipped with EMF provides a generic path-like computation"
" of fragments. These fragment paths are unique by default and do not have to b"
"e serialized. On the other hand, they can be easily broken by reordering the e"
"lements in a resource."
msgstr ""

msgid ""
"With an XMI or other binary-like serialization it is also common and possible "
"to use UUIDs. UUIDs are usually binary and technical, so you don't want to dea"
"l with them in human readable representations."
msgstr ""

msgid ""
"However with a textual concrete syntax we want to be able to compute fragments"
" out of the human readable information. We don't want to force people to use U"
"UIDs (i.e. synthetic identifiers) or fragile, relative, generic paths in order"
" to refer to [EObjects]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org"
"/eclipse/emf/ecore/EObject.java)."
msgstr ""

msgid ""
"Therefore one can contribute an [IFragmentProvider]({{site.src.xtext_core}}/or"
"g.eclipse.xtext/src/org/eclipse/xtext/resource/IFragmentProvider.java) per lan"
"guage. It has two methods: `getFragment(EObject, Fallback)` to calculate the f"
"ragment of an [EObject]({{site.src.emf}}/plugins/org.eclipse.emf.ecore/src/org"
"/eclipse/emf/ecore/EObject.java) and `getEObject(Resource, String, Fallback)` "
"to go the opposite direction. The [Fallback]({{site.src.xtext_core}}/org.eclip"
"se.xtext/src/org/eclipse/xtext/resource/IFragmentProvider.java) interface allo"
"ws to delegate to the default strategy - which usually uses the fragment paths"
" described above."
msgstr ""

msgid "The following snippet shows how to use qualified names as fragments:"
msgstr ""

msgid ""
"```java\n"
"public QualifiedNameFragmentProvider implements IFragmentProvider {"
msgstr ""

msgid ""
"  @Inject\n"
"  private IQualifiedNameProvider qualifiedNameProvider;"
msgstr ""

msgid ""
"  public String getFragment(EObject obj, Fallback fallback) {\n"
"    String qName = qualifiedNameProvider.getQualifiedName(obj);\n"
"    return qName != null ? qName : fallback.getFragment(obj);\n"
"  }"
msgstr ""

msgid ""
"  public EObject getEObject(Resource resource,\n"
"                            String fragment,\n"
"                            Fallback fallback) {\n"
"    if (fragment != null) {\n"
"      Iterator<EObject> i = EcoreUtil.getAllContents(resource, false);\n"
"      while(i.hasNext()) {\n"
"        EObject eObject = i.next();\n"
"        String candidateFragment = (eObject.eIsProxy())\n"
"            ? ((InternalEObject) eObject).eProxyURI().fragment()\n"
"            : getFragment(eObject, fallback);\n"
"        if (fragment.equals(candidateFragment))\n"
"          return eObject;\n"
"      }\n"
"    }\n"
"    return fallback.getEObject(fragment);\n"
"  }\n"
"}\n"
"```"
msgstr ""

msgid ""
"For performance reasons it is usually a good idea to navigate the resource bas"
"ed on the fragment information instead of traversing it completely. If you kno"
"w that your fragment is computed from qualified names and your model contains "
"something like *NamedElements*, you should split your fragment into those part"
"s and query the root elements, the children of the best match and so on."
msgstr ""

msgid ""
"Furthermore it's a good idea to have some kind of conflict resolution strategy"
" to be able to distinguish between equally named elements that actually are di"
"fferent, e.g. properties may have the very same qualified name as entities."
msgstr ""

msgid "## Integration with GMF Editors {#gmf-integration}"
msgstr ""

msgid ""
"We do no longer maintain the GMF example code and have removed it from our ins"
"tallation. You can still access the last version of the source code form our ["
"source code repository](https://github.com/eclipse/xtext/tree/v2.10.0/examples"
"/org.eclipse.xtext.xtext.ui.examples/contents)."
msgstr ""

msgid ""
"The [Graphical Modeling Framework (GMF)](http://www.eclipse.org/modeling/gmp/?"
"project=gmf) allows to create graphical diagram editors for Ecore models. To i"
"llustrate how to build a GMF editor on top of an [XtextResource]({{site.src.xt"
"ext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResource.java"
") we have provided an example. You must have the Helios version 2.3 of GMF Not"
"ation, Runtime and Tooling and their dependencies installed in your workbench "
"to run the example. With other versions of GMF it might work to regenerate the"
" diagram code."
msgstr ""

msgid "The example consists of a number of plug-ins"
msgstr ""

msgid ""
"|Plug-in|Framework|Purpose|Contents|\n"
"|:---|:---|:---|:---|\n"
"|o.e.x.example.gmf|Xtext|Xtext runtime plug-in|Grammar, derived metamodel and "
"language infrastructure|\n"
"|o.e.x.e.g.ui|Xtext|Xtext UI plug-in|Xtext editor and services|\n"
"|o.e.x.e.g.edit|EMF|EMF.edit plug-in|UI services generated from the metamodel|"
"\n"
"|o.e.x.e.g.models|GMF|GMF design models|Input for the GMF code generator|\n"
"|o.e.x.e.g.diagram|GMF|GMF diagram editor|Purely generated from the GMF design"
" models|\n"
"|o.e.x.e.g.d.extensions|GMF and Xtext|GMF diagram editor extensions|Manual ext"
"ensions to the generated GMF editor for integration with Xtext|\n"
"|o.e.x.gmf.glue|Xtext and GMF|Glue code|Generic code to integrate Xtext and GM"
"F|"
msgstr ""

msgid "We will elaborate the example in three stages."
msgstr ""

msgid ""
"### Stage 1: Make GMF Read and Write the Semantic Model As Text {#gmf-integrat"
"ion-stage1}"
msgstr ""

msgid ""
"A diagram editor in GMF by default manages two resources: One for the semantic"
" model, that is the model we're actually interested in for further processing."
" In our example it is a model representing entities and data types. The second"
" resource holds the notation model. It represents the shapes you see in the di"
"agram and their graphical properties. Notation elements reference their semant"
"ic counterparts. An entity's name would be in the semantic model, while the fo"
"nt to draw it in the diagram would be stored the notation model. Note that in "
"the integration example we're only trying to represent the semantic resource a"
"s text."
msgstr ""

msgid ""
"To keep the semantic model and the diagram model in sync, GMF uses a so called"
" *CanonicalEditPolicy*. This component registers as a listener to the semantic"
" model and automatically updates diagram elements when their semantic counterp"
"arts change, are added or are removed. Some notational information can be deri"
"ved from the semantic model by some default mapping, but usually there is a lo"
"t of graphical stuff that the user wants to change to make the diagram look be"
"tter."
msgstr ""

msgid ""
"In an Xtext editor, changes in the text are transferred to the underlying [Xte"
"xtResource]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/re"
"source/XtextResource.java) by a call to the method [XtextResource.update(int, "
"int, String)]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/xtext/"
"resource/XtextResource.java), which will trigger a partial parsing of the dirt"
"y text region and a replacement of the corresponding subtree in the AST model "
"(semantic model)."
msgstr ""

msgid ""
"Having an Xtext editor and a canonical GMF editor on the same resource can the"
"refore lead to loss of notational information, as a change in the Xtext editor"
" will remove a subtree in the AST, causing the *CanonicalEditPolicy* to remove"
" all notational elements, even though it was customized by the user. Xtext reb"
"uilds the AST and the notation model is restored using the default mapping. It"
" is therefore not recommended to let an Xtext editor and a canonical GMF edito"
"r work on the same resource."
msgstr ""

msgid ""
"In this example, we let each editor use its own memory instance of the model a"
"nd synchronize on file changes only. Both frameworks already synchronize with "
"external changes to the edited files out-of-the-box. In the glue code, a *org."
"eclipse.xtext.gmf.glue.concurrency.ConcurrentModificationObserver* warns the u"
"ser if he/she tries to edit the same file with two different model editors con"
"currently."
msgstr ""

msgid ""
"In the example, we started with writing an Xtext grammar for an entity languag"
"e. As explained above, we preferred optional assignments and rather covered ma"
"ndatory attributes later in a validator. Into the bargain, we added some servi"
"ces to improve the EMF integration, namely a formatter, a fragment provider an"
"d an unloader. Then we let Xtext generate the language infrastructure. From th"
"e derived Ecore model and its generator model, we generated the edit plug-in ("
"needed by GMF) and added some fancier icons."
msgstr ""

msgid ""
"From the GMF side, we followed the default procedure and created a gmfgraph mo"
"del, a gmftool model and a gmfmap model referring to the Ecore model derived f"
"orm the Xtext grammar. We changed some settings in the gmfgen model derived by"
" GMF from the gmfmap model, namely to enable printing and to enable validation"
" and validation decorators. Then we generated the diagram editor."
msgstr ""

msgid ""
"Voilà, we now have a diagram editor that reads/writes its semantic model as te"
"xt. Also note that the validator from Xtext is already integrated in the diagr"
"am editor via the menu bar."
msgstr ""

msgid ""
"### Stage 2: Calling the Xtext Parser to Parse GMF Labels {#gmf-integration-st"
"age2}"
msgstr ""

msgid ""
"GMF's generated parser for the labels is a bit poor: It will work on attribute"
"s only, and will fail for cross-references, e.g. an attribute's type. So why n"
"ot use the Xtext parser to process the user's input?"
msgstr ""

msgid ""
"An [XtextResource]({{site.src.xtext_core}}/org.eclipse.xtext/src/org/eclipse/x"
"text/resource/XtextResource.java) keeps track of it's concrete syntax represen"
"tation by means of a so called node model (see [parser rules section](301_gram"
"marlanguage.html#parser-rules) for a more detailed description). The node mode"
"l represents the parse tree and provides information on the offset, length and"
" text that has been parsed to create a semantic model element. The nodes are a"
"ttached to their semantic elements by means of a node adapter."
msgstr ""

msgid ""
"We can use the node adapter to access the text block that represents an attrib"
"ute, and call the Xtext parser to parse the user input. The example code is co"
"ntained in *org.eclipse.xtext.gmf.glue.edit.part.AntlrParserWrapper*. *SimpleP"
"ropertyWrapperEditPartOverride* shows how this is integrated into the generate"
"d GMF editor. Use the *EntitiesEditPartFactoryOverride* to instantiate it and "
"the *EntitiesEditPartProviderOverride* to create the overridden factory, and r"
"egister the latter to the extension point. Note that this is a non-invasive wa"
"y to extend the generated GMF editors."
msgstr ""

msgid ""
"When you test the editor, you will note that the node model will be corrupt af"
"ter editing a few labels. This is because the node model is only updated by th"
"e Xtext parser and not by the serializer. So we need a way to automatically ca"
"ll the (partial) parser every time the semantic model is changed. You will fin"
"d the required classes in the package *org.eclipse.xtext.gmf.glue.editingdomai"
"n*. To activate node model reconciling, you have to add a line"
msgstr ""

msgid ""
"```java\n"
"XtextNodeModelReconciler.adapt(editingDomain);\n"
"```"
msgstr ""

msgid ""
"in the method `createEditingDomain()` of the generated *EntitiesDocumentProvid"
"er*. To avoid changing the generated code, you can modify the code generation "
"template for that class by setting"
msgstr ""

msgid ""
"```java\n"
"Dynamic Templates -> true\n"
"  Template Directory = \"org.eclipse.xtext.example.gmf.models/templates\"\n"
"```"
msgstr ""

msgid "in the *GenEditorGenerator* and"
msgstr ""

msgid ""
"```java\n"
"Required Plugins -> \"org.eclipse.xtext.gmf.glue\" \n"
"```"
msgstr ""

msgid ""
"in the *GenPlugin* element of the gmfgen before generating the diagram editor "
"anew."
msgstr ""

msgid "### Stage 3: A Popup Xtext Editor (experimental) {#gmf-integration-stage3}"
msgstr ""

msgid ""
"*SimplePropertyPopupXtextEditorEditPartOverride* demonstrates how to spawn an "
"Xtext editor to edit a model element. The editor pops up in its control and sh"
"ows only the section of the selected element. It is a fully fledged Xtext edit"
"or, with support of validation, content assist and syntax highlighting. The ed"
"ited text is only transferred back to the model if it does not have any errors"
"."
msgstr ""

msgid ""
"Note that there still are synchronization issues, that's why we keep this one "
"marked as experimental."
msgstr ""

msgid "---"
msgstr ""

msgid "**[Next Chapter: Eclipse Support](310_eclipse_support.html)**"
msgstr ""
